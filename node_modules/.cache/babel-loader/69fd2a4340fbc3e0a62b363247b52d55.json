{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.classMethodOrDeclareMethodCommon = exports.classMethodOrPropertyCommon = void 0;\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _core = require(\"./core\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\n(0, _utils.default)(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\"],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, _core.patternLikeCommon, {\n    left: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"ObjectPattern\", \"ArrayPattern\", \"MemberExpression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\n    }\n  })\n});\n(0, _utils.default)(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, _core.patternLikeCommon, {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"PatternLike\")))\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\n    }\n  })\n});\n(0, _utils.default)(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: Object.assign({}, _core.functionCommon, {}, _core.functionTypeAnnotationCommon, {\n    expression: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\", \"Expression\")\n    }\n  })\n});\n(0, _utils.default)(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ClassMethod\", \"ClassPrivateMethod\", \"ClassProperty\", \"ClassPrivateProperty\", \"TSDeclareMethod\", \"TSIndexSignature\")))\n    }\n  }\n});\nconst classCommon = {\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  },\n  body: {\n    validate: (0, _utils.assertNodeType)(\"ClassBody\")\n  },\n  superClass: {\n    optional: true,\n    validate: (0, _utils.assertNodeType)(\"Expression\")\n  },\n  superTypeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n    optional: true\n  },\n  implements: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSExpressionWithTypeArguments\", \"ClassImplements\"))),\n    optional: true\n  }\n};\n(0, _utils.default)(\"ClassDeclaration\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\"id\", \"body\", \"superClass\", \"mixins\", \"typeParameters\", \"superTypeParameters\", \"implements\", \"decorators\"],\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\", \"Pureish\"],\n  fields: Object.assign({}, classCommon, {\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    abstract: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"ClassExpression\", {\n  inherits: \"ClassDeclaration\",\n  aliases: [\"Scopable\", \"Class\", \"Expression\", \"Pureish\"],\n  fields: Object.assign({}, classCommon, {\n    id: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"ExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _utils.assertNodeType)(\"FunctionDeclaration\", \"TSDeclareFunction\", \"ClassDeclaration\", \"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportNamedDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _utils.assertNodeType)(\"Declaration\"),\n      optional: true\n    },\n    specifiers: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ExportSpecifier\", \"ExportDefaultSpecifier\", \"ExportNamespaceSpecifier\")))\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\"),\n      optional: true\n    },\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\"type\", \"value\"))\n  }\n});\n(0, _utils.default)(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _utils.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    },\n    await: {\n      default: false,\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportDeclaration\", {\n  visitor: [\"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\"],\n  fields: {\n    specifiers: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ImportSpecifier\", \"ImportDefaultSpecifier\", \"ImportNamespaceSpecifier\")))\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"typeof\", \"value\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    imported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"typeof\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\nconst classMethodOrPropertyCommon = {\n  abstract: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  accessibility: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\")),\n    optional: true\n  },\n  static: {\n    default: false,\n    validate: (0, _utils.assertValueType)(\"boolean\")\n  },\n  computed: {\n    default: false,\n    validate: (0, _utils.assertValueType)(\"boolean\")\n  },\n  optional: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  key: {\n    validate: (0, _utils.chain)(function () {\n      const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\");\n      const computed = (0, _utils.assertNodeType)(\"Expression\");\n      return function (node, key, val) {\n        const validator = node.computed ? computed : normal;\n        validator(node, key, val);\n      };\n    }(), (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"Expression\"))\n  }\n};\nexports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;\nconst classMethodOrDeclareMethodCommon = Object.assign({}, _core.functionCommon, {}, classMethodOrPropertyCommon, {\n  kind: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"get\", \"set\", \"method\", \"constructor\")),\n    default: \"method\"\n  },\n  access: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\")),\n    optional: true\n  },\n  decorators: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n    optional: true\n  }\n});\nexports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;\n(0, _utils.default)(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  fields: Object.assign({}, classMethodOrDeclareMethodCommon, {}, _core.functionTypeAnnotationCommon, {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\n(0, _utils.default)(\"ObjectPattern\", {\n  visitor: [\"properties\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, _core.patternLikeCommon, {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"RestElement\", \"ObjectProperty\")))\n    }\n  })\n});\n(0, _utils.default)(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"Super\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    quasi: {\n      validate: (0, _utils.assertNodeType)(\"TemplateLiteral\")\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertShape)({\n        raw: {\n          validate: (0, _utils.assertValueType)(\"string\")\n        },\n        cooked: {\n          validate: (0, _utils.assertValueType)(\"string\"),\n          optional: true\n        }\n      })\n    },\n    tail: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TemplateElement\")))\n    },\n    expressions: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\")), function (node, key, val) {\n        if (node.quasis.length !== val.length + 1) {\n          throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);\n        }\n      })\n    }\n  }\n});\n(0, _utils.default)(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    argument: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});","map":{"version":3,"sources":["/Users/lancer_abir/Desktop/react-app-01/node_modules/@babel/types/lib/definitions/es2015.js"],"names":["Object","defineProperty","exports","value","classMethodOrDeclareMethodCommon","classMethodOrPropertyCommon","_utils","_interopRequireWildcard","require","_core","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","visitor","builder","aliases","fields","assign","patternLikeCommon","left","validate","assertNodeType","right","decorators","chain","assertValueType","assertEach","elements","functionCommon","functionTypeAnnotationCommon","expression","body","classCommon","typeParameters","optional","superClass","superTypeParameters","implements","declare","abstract","id","inherits","source","declaration","specifiers","exportKind","validateOptional","assertOneOf","local","exported","await","importKind","imported","meta","property","accessibility","static","computed","normal","node","val","validator","kind","access","properties","deprecatedAlias","argument","tag","quasi","assertShape","raw","cooked","tail","quasis","expressions","length","TypeError","type","delegate"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.classMethodOrDeclareMethodCommon = exports.classMethodOrPropertyCommon = void 0;\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _core = require(\"./core\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n(0, _utils.default)(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\"],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, _core.patternLikeCommon, {\n    left: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"ObjectPattern\", \"ArrayPattern\", \"MemberExpression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\n    }\n  })\n});\n(0, _utils.default)(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, _core.patternLikeCommon, {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"PatternLike\")))\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\n    }\n  })\n});\n(0, _utils.default)(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: Object.assign({}, _core.functionCommon, {}, _core.functionTypeAnnotationCommon, {\n    expression: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\", \"Expression\")\n    }\n  })\n});\n(0, _utils.default)(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ClassMethod\", \"ClassPrivateMethod\", \"ClassProperty\", \"ClassPrivateProperty\", \"TSDeclareMethod\", \"TSIndexSignature\")))\n    }\n  }\n});\nconst classCommon = {\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  },\n  body: {\n    validate: (0, _utils.assertNodeType)(\"ClassBody\")\n  },\n  superClass: {\n    optional: true,\n    validate: (0, _utils.assertNodeType)(\"Expression\")\n  },\n  superTypeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n    optional: true\n  },\n  implements: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSExpressionWithTypeArguments\", \"ClassImplements\"))),\n    optional: true\n  }\n};\n(0, _utils.default)(\"ClassDeclaration\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\"id\", \"body\", \"superClass\", \"mixins\", \"typeParameters\", \"superTypeParameters\", \"implements\", \"decorators\"],\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\", \"Pureish\"],\n  fields: Object.assign({}, classCommon, {\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    abstract: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"ClassExpression\", {\n  inherits: \"ClassDeclaration\",\n  aliases: [\"Scopable\", \"Class\", \"Expression\", \"Pureish\"],\n  fields: Object.assign({}, classCommon, {\n    id: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"ExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _utils.assertNodeType)(\"FunctionDeclaration\", \"TSDeclareFunction\", \"ClassDeclaration\", \"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportNamedDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      validate: (0, _utils.assertNodeType)(\"Declaration\"),\n      optional: true\n    },\n    specifiers: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ExportSpecifier\", \"ExportDefaultSpecifier\", \"ExportNamespaceSpecifier\")))\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\"),\n      optional: true\n    },\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\"type\", \"value\"))\n  }\n});\n(0, _utils.default)(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _utils.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    },\n    await: {\n      default: false,\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportDeclaration\", {\n  visitor: [\"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\"],\n  fields: {\n    specifiers: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ImportSpecifier\", \"ImportDefaultSpecifier\", \"ImportNamespaceSpecifier\")))\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"typeof\", \"value\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    imported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"typeof\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\nconst classMethodOrPropertyCommon = {\n  abstract: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  accessibility: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\")),\n    optional: true\n  },\n  static: {\n    default: false,\n    validate: (0, _utils.assertValueType)(\"boolean\")\n  },\n  computed: {\n    default: false,\n    validate: (0, _utils.assertValueType)(\"boolean\")\n  },\n  optional: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  key: {\n    validate: (0, _utils.chain)(function () {\n      const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\");\n      const computed = (0, _utils.assertNodeType)(\"Expression\");\n      return function (node, key, val) {\n        const validator = node.computed ? computed : normal;\n        validator(node, key, val);\n      };\n    }(), (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"Expression\"))\n  }\n};\nexports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;\nconst classMethodOrDeclareMethodCommon = Object.assign({}, _core.functionCommon, {}, classMethodOrPropertyCommon, {\n  kind: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"get\", \"set\", \"method\", \"constructor\")),\n    default: \"method\"\n  },\n  access: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\")),\n    optional: true\n  },\n  decorators: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n    optional: true\n  }\n});\nexports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;\n(0, _utils.default)(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  fields: Object.assign({}, classMethodOrDeclareMethodCommon, {}, _core.functionTypeAnnotationCommon, {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\n(0, _utils.default)(\"ObjectPattern\", {\n  visitor: [\"properties\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, _core.patternLikeCommon, {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"RestElement\", \"ObjectProperty\")))\n    }\n  })\n});\n(0, _utils.default)(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"Super\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    quasi: {\n      validate: (0, _utils.assertNodeType)(\"TemplateLiteral\")\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertShape)({\n        raw: {\n          validate: (0, _utils.assertValueType)(\"string\")\n        },\n        cooked: {\n          validate: (0, _utils.assertValueType)(\"string\"),\n          optional: true\n        }\n      })\n    },\n    tail: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TemplateElement\")))\n    },\n    expressions: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\")), function (node, key, val) {\n        if (node.quasis.length !== val.length + 1) {\n          throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);\n        }\n      })\n    }\n  }\n});\n(0, _utils.default)(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    argument: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});"]},"metadata":{},"sourceType":"script"}
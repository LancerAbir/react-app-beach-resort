{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lancer_abir/Desktop/react-app-rabbil-hasan/node_modules/@babel/runtime/regenerator\";\nimport React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar renderErr = 'Renderer Error';\nvar actions = {\n  init: 'init'\n};\nvar defaultColumn = {\n  Cell: function Cell(_ref) {\n    var _ref$cell$value = _ref.cell.value,\n        value = _ref$cell$value === void 0 ? '' : _ref$cell$value;\n    return value;\n  },\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER\n};\n\nfunction defaultOrderByFn(arr, funcs, dirs) {\n  return [].concat(arr).sort(function (rowA, rowB) {\n    for (var i = 0; i < funcs.length; i += 1) {\n      var sortFn = funcs[i];\n      var desc = dirs[i] === false || dirs[i] === 'desc';\n      var sortInt = sortFn(rowA, rowB);\n\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt;\n      }\n    }\n\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n  });\n}\n\nfunction defaultGroupByFn(rows, columnId) {\n  return rows.reduce(function (prev, row, i) {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    var resKey = \"\" + row.values[columnId];\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n    prev[resKey].push(row);\n    return prev;\n  }, {});\n}\n\nfunction mergeProps() {\n  for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {\n    propList[_key] = arguments[_key];\n  }\n\n  return propList.reduce(function (props, next) {\n    var style = next.style,\n        className = next.className,\n        rest = _objectWithoutPropertiesLoose(next, [\"style\", \"className\"]);\n\n    props = _extends({}, props, {}, rest);\n\n    if (style) {\n      props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;\n    }\n\n    if (className) {\n      props.className = props.className ? props.className + ' ' + className : className;\n    }\n\n    if (props.className === '') {\n      delete props.className;\n    }\n\n    return props;\n  }, {});\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta));\n  } // Handle an array, merge each item as separate props\n\n\n  if (Array.isArray(userProps)) {\n    return mergeProps.apply(void 0, [prevProps].concat(userProps));\n  } // Handle an object by default, merge the two objects\n\n\n  return mergeProps(prevProps, userProps);\n}\n\nvar makePropGetter = function makePropGetter(hooks, meta) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return function (userProps) {\n    if (userProps === void 0) {\n      userProps = {};\n    }\n\n    return [].concat(hooks, [userProps]).reduce(function (prev, next) {\n      return handlePropGetter(prev, next, _extends({}, meta, {\n        userProps: userProps\n      }));\n    }, {});\n  };\n};\n\nvar reduceHooks = function reduceHooks(hooks, initial, meta) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return hooks.reduce(function (prev, next) {\n    var nextValue = next(prev, meta);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue === 'undefined') {\n        console.info(next);\n        throw new Error('React Table: A reducer hook ☝️ just returned undefined! This is not allowed.');\n      }\n    }\n\n    return nextValue;\n  }, initial);\n};\n\nvar loopHooks = function loopHooks(hooks, meta) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return hooks.forEach(function (hook) {\n    var nextValue = hook(meta);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue);\n        throw new Error('React Table: A loop-type hook ☝️ just returned a value! This is not allowed.');\n      }\n    }\n  });\n};\n\nfunction ensurePluginOrder(plugins, befores, pluginName, afters) {\n  var pluginIndex = plugins.findIndex(function (plugin) {\n    return plugin.pluginName === pluginName;\n  });\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\"The plugin \\\"\" + pluginName + \"\\\" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \" + pluginName + \".pluginName = '\" + pluginName + \"'\\n\");\n    }\n  }\n\n  befores.forEach(function (before) {\n    var beforeIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === before;\n    });\n\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\"React Table: The \" + pluginName + \" plugin hook must be placed after the \" + before + \" plugin hook!\");\n      }\n    }\n  });\n  afters.forEach(function (after) {\n    var afterIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === after;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (afterIndex > -1 && afterIndex < pluginIndex) {\n        throw new Error(\"React Table: The \" + pluginName + \" plugin hook must be placed before the \" + after + \" plugin hook!\");\n      }\n    }\n  });\n}\n\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\n\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n} // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n\n\nvar safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nfunction useMountedLayoutEffect(fn, deps) {\n  var mountedRef = React.useRef(false);\n  safeUseLayoutEffect(function () {\n    if (mountedRef.current) {\n      fn();\n    }\n\n    mountedRef.current = true; // eslint-disable-next-line\n  }, deps);\n}\n\nfunction useAsyncDebounce(defaultFn, defaultWait) {\n  if (defaultWait === void 0) {\n    defaultWait = 0;\n  }\n\n  var debounceRef = React.useRef({});\n  debounceRef.current.defaultFn = defaultFn;\n  debounceRef.current.defaultWait = defaultWait;\n  var debounce = React.useCallback(function _callee2(fn, wait) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (fn === void 0) {\n              fn = debounceRef.current.defaultFn;\n            }\n\n            if (wait === void 0) {\n              wait = debounceRef.current.defaultWait;\n            }\n\n            if (!debounceRef.current.promise) {\n              debounceRef.current.promise = new Promise(function (resolve, reject) {\n                debounceRef.current.resolve = resolve;\n                debounceRef.current.reject = reject;\n              });\n            }\n\n            if (debounceRef.current.timeout) {\n              clearTimeout(debounceRef.current.timeout);\n            }\n\n            debounceRef.current.timeout = setTimeout(function _callee() {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      delete debounceRef.current.timeout;\n                      _context.prev = 1;\n                      _context.t0 = debounceRef.current;\n                      _context.next = 5;\n                      return _regeneratorRuntime.awrap(fn());\n\n                    case 5:\n                      _context.t1 = _context.sent;\n\n                      _context.t0.resolve.call(_context.t0, _context.t1);\n\n                      _context.next = 12;\n                      break;\n\n                    case 9:\n                      _context.prev = 9;\n                      _context.t2 = _context[\"catch\"](1);\n                      debounceRef.current.reject(_context.t2);\n\n                    case 12:\n                      _context.prev = 12;\n                      delete debounceRef.current.promise;\n                      return _context.finish(12);\n\n                    case 15:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, [[1, 9, 12, 15]]);\n            }, wait);\n            return _context2.abrupt(\"return\", debounceRef.current.promise);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }, []);\n  return debounce;\n}\n\nfunction useConsumeHookGetter(hooks, hookName) {\n  var getter = useGetLatest(hooks[hookName]);\n  hooks[hookName] = undefined;\n  return getter;\n}\n\nfunction makeRenderer(instance, column, meta) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return function (type, userProps) {\n    if (userProps === void 0) {\n      userProps = {};\n    }\n\n    var Comp = typeof type === 'string' ? column[type] : type;\n\n    if (typeof Comp === 'undefined') {\n      throw new Error(renderErr);\n    }\n\n    return flexRender(Comp, _extends({}, instance, {\n      column: column\n    }, meta, {}, userProps));\n  };\n}\n\nfunction flexRender(Comp, props) {\n  return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n}\n\nfunction isClassComponent(component) {\n  return typeof component === 'function' && !!function () {\n    var proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  }();\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function';\n}\n\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component) || isExoticComponent(component);\n}\n\nfunction decorateColumn(column, userDefaultColumn, parent, depth, index) {\n  // Apply the userDefaultColumn\n  column = _extends({}, defaultColumn, {}, userDefaultColumn, {}, column); // First check for string accessor\n\n  var _column = column,\n      id = _column.id,\n      accessor = _column.accessor,\n      Header = _column.Header;\n\n  if (typeof accessor === 'string') {\n    id = id || accessor;\n    var accessorPath = accessor.split('.');\n\n    accessor = function accessor(row) {\n      return getBy(row, accessorPath);\n    };\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header;\n  }\n\n  if (!id && column.columns) {\n    console.error(column);\n    throw new Error('A column ID (or unique \"Header\" value) is required!');\n  }\n\n  if (!id) {\n    console.error(column);\n    throw new Error('A column ID (or string accessor) is required!');\n  }\n\n  column = _extends({\n    // Make sure there is a fallback header, just in case\n    Header: function Header() {\n      return React.createElement(React.Fragment, null, \"\\xA0\");\n    },\n    Footer: function Footer() {\n      return React.createElement(React.Fragment, null, \"\\xA0\");\n    }\n  }, column, {\n    // Materialize and override this stuff\n    id: id,\n    accessor: accessor,\n    parent: parent,\n    depth: depth,\n    index: index\n  });\n  return column;\n} // Build the visible columns, headers and flat column list\n\n\nfunction decorateColumnTree(columns, defaultColumn, parent, depth) {\n  if (depth === void 0) {\n    depth = 0;\n  }\n\n  return columns.map(function (column, columnIndex) {\n    column = decorateColumn(column, defaultColumn, parent, depth, columnIndex);\n\n    if (column.columns) {\n      column.columns = decorateColumnTree(column.columns, defaultColumn, column, depth + 1);\n    }\n\n    return column;\n  });\n} // Build the header groups from the bottom up\n\n\nfunction makeHeaderGroups(flatColumns, defaultColumn) {\n  var headerGroups = []; // Build each header group from the bottom up\n\n  var buildGroup = function buildGroup(columns, depth) {\n    var headerGroup = {\n      headers: []\n    };\n    var parentColumns = []; // Do any of these columns have parents?\n\n    var hasParents = columns.some(function (col) {\n      return col.parent;\n    });\n    columns.forEach(function (column) {\n      // Are we the first column in this group?\n      var isFirst = !parentColumns.length; // What is the latest (last) parent column?\n\n      var latestParentColumn = [].concat(parentColumns).reverse()[0]; // If the column has a parent, add it if necessary\n\n      if (column.parent) {\n        var similarParentColumns = parentColumns.filter(function (d) {\n          return d.originalId === column.parent.id;\n        });\n\n        if (isFirst || latestParentColumn.originalId !== column.parent.id) {\n          parentColumns.push(_extends({}, column.parent, {\n            originalId: column.parent.id,\n            id: [column.parent.id, similarParentColumns.length].join('_')\n          }));\n        }\n      } else if (hasParents) {\n        // If other columns have parents, we'll need to add a place holder if necessary\n        var originalId = [column.id, 'placeholder'].join('_');\n\n        var _similarParentColumns = parentColumns.filter(function (d) {\n          return d.originalId === originalId;\n        });\n\n        var placeholderColumn = decorateColumn({\n          originalId: originalId,\n          id: [column.id, 'placeholder', _similarParentColumns.length].join('_'),\n          placeholderOf: column\n        }, defaultColumn);\n\n        if (isFirst || latestParentColumn.originalId !== placeholderColumn.originalId) {\n          parentColumns.push(placeholderColumn);\n        }\n      } // Establish the new headers[] relationship on the parent\n\n\n      if (column.parent || hasParents) {\n        latestParentColumn = [].concat(parentColumns).reverse()[0];\n        latestParentColumn.headers = latestParentColumn.headers || [];\n\n        if (!latestParentColumn.headers.includes(column)) {\n          latestParentColumn.headers.push(column);\n        }\n      }\n\n      column.totalHeaderCount = column.headers ? column.headers.reduce(function (sum, header) {\n        return sum + header.totalHeaderCount;\n      }, 0) : 1; // Leaf node columns take up at least one count\n\n      headerGroup.headers.push(column);\n    });\n    headerGroups.push(headerGroup);\n\n    if (parentColumns.length) {\n      buildGroup(parentColumns);\n    }\n  };\n\n  buildGroup(flatColumns);\n  return headerGroups.reverse();\n}\n\nvar pathObjCache = new Map();\n\nfunction getBy(obj, path, def) {\n  if (!path) {\n    return obj;\n  }\n\n  var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n  var pathObj = pathObjCache.get(cacheKey) || function () {\n    var pathObj = makePathArray(path);\n    pathObjCache.set(cacheKey, pathObj);\n    return pathObj;\n  }();\n\n  var val;\n\n  try {\n    val = pathObj.reduce(function (cursor, pathPart) {\n      return cursor[pathPart];\n    }, obj);\n  } catch (e) {// continue regardless of error\n  }\n\n  return typeof val !== 'undefined' ? val : def;\n}\n\nfunction getFirstDefined() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  for (var i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i];\n    }\n  }\n}\n\nfunction isFunction(a) {\n  if (typeof a === 'function') {\n    return a;\n  }\n}\n\nfunction flattenBy(columns, childKey) {\n  var flatColumns = [];\n\n  var recurse = function recurse(columns) {\n    columns.forEach(function (d) {\n      if (!d[childKey]) {\n        flatColumns.push(d);\n      } else {\n        recurse(d[childKey]);\n      }\n    });\n  };\n\n  recurse(columns);\n  return flatColumns;\n}\n\nfunction expandRows(rows, _ref) {\n  var manualExpandedKey = _ref.manualExpandedKey,\n      expanded = _ref.expanded,\n      _ref$expandSubRows = _ref.expandSubRows,\n      expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;\n  var expandedRows = [];\n\n  var handleRow = function handleRow(row) {\n    row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];\n    row.canExpand = row.subRows && !!row.subRows.length;\n    expandedRows.push(row);\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rows.forEach(handleRow);\n  return expandedRows;\n}\n\nfunction getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n}\n\nfunction shouldAutoRemoveFilter(autoRemove, value) {\n  return autoRemove ? autoRemove(value) : typeof value === 'undefined';\n} //\n\n\nvar reOpenBracket = /\\[/g;\nvar reCloseBracket = /\\]/g;\n\nfunction makePathArray(obj) {\n  return flattenDeep(obj) // remove all periods in parts\n  .map(function (d) {\n    return String(d).replace('.', '_');\n  }) // join parts using period\n  .join('.') // replace brackets with periods\n  .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n  .split('.');\n}\n\nfunction flattenDeep(arr, newArr) {\n  if (newArr === void 0) {\n    newArr = [];\n  }\n\n  if (!Array.isArray(arr)) {\n    newArr.push(arr);\n  } else {\n    for (var i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr);\n    }\n  }\n\n  return newArr;\n}\n\nvar defaultCells = function defaultCells(cell) {\n  return cell.filter(function (d) {\n    return d.column.isVisible;\n  });\n};\n\nvar defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {\n  var column = _ref.column;\n  return _extends({\n    key: \"header_\" + column.id,\n    colSpan: column.totalVisibleHeaderCount\n  }, props);\n};\n\nvar defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {\n  var column = _ref2.column;\n  return _extends({\n    key: \"footer_\" + column.id,\n    colSpan: column.totalVisibleHeaderCount\n  }, props);\n};\n\nvar defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {\n  var index = _ref3.index;\n  return _extends({\n    key: \"headerGroup_\" + index\n  }, props);\n};\n\nvar defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {\n  var index = _ref4.index;\n  return _extends({\n    key: \"footerGroup_\" + index\n  }, props);\n};\n\nvar defaultGetRowProps = function defaultGetRowProps(props, _ref5) {\n  var row = _ref5.row;\n  return _extends({\n    key: \"row_\" + row.id\n  }, props);\n};\n\nvar defaultGetCellProps = function defaultGetCellProps(props, _ref6) {\n  var cell = _ref6.cell;\n  return _extends({}, props, {\n    key: \"cell_\" + cell.row.id + \"_\" + cell.column.id\n  });\n};\n\nfunction makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    flatColumns: [],\n    flatColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    useRows: [],\n    cells: [defaultCells],\n    prepareRow: [],\n    getTableProps: [],\n    getTableBodyProps: [],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: []\n  };\n}\n\nactions.resetHiddenColumns = 'resetHiddenColumns';\nactions.toggleHideColumn = 'toggleHideColumn';\nactions.setHiddenColumns = 'setHiddenColumns';\nactions.toggleHideAllColumns = 'toggleHideAllColumns';\n\nvar useColumnVisibility = function useColumnVisibility(hooks) {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n  hooks.headerGroupsDeps.push(function (deps, _ref) {\n    var instance = _ref.instance;\n    return [].concat(deps, [instance.state.hiddenColumns]);\n  });\n  hooks.useInstance.push(useInstance);\n};\n\nuseColumnVisibility.pluginName = 'useColumnVisibility';\n\nvar defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {\n  var column = _ref2.column;\n  return [props, {\n    onChange: function onChange(e) {\n      column.toggleHidden(!e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible'\n  }];\n};\n\nvar defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {\n  var instance = _ref3.instance;\n  return [props, {\n    onChange: function onChange(e) {\n      instance.toggleHideAllColumns(!e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length\n  }];\n};\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      hiddenColumns: []\n    }, state);\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return _extends({}, state, {\n      hiddenColumns: instance.initialState.hiddenColumns || []\n    });\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n    var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function (d) {\n      return d !== action.columnId;\n    });\n    return _extends({}, state, {\n      hiddenColumns: hiddenColumns\n    });\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return _extends({}, state, {\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n    });\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n    return _extends({}, state, {\n      hiddenColumns: shouldAll ? instance.flatColumns.map(function (d) {\n        return d.id;\n      }) : []\n    });\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  var headers = instance.headers,\n      hiddenColumns = instance.state.hiddenColumns;\n  var isMountedRef = React.useRef(false);\n  if (!isMountedRef.current) ;\n\n  var handleColumn = function handleColumn(column, parentVisible) {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n    var totalVisibleHeaderCount = 0;\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(function (subColumn) {\n        return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n      });\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n    return totalVisibleHeaderCount;\n  };\n\n  var totalVisibleHeaderCount = 0;\n  headers.forEach(function (subHeader) {\n    return totalVisibleHeaderCount += handleColumn(subHeader, true);\n  });\n}\n\nfunction useInstance(instance) {\n  var flatHeaders = instance.flatHeaders,\n      dispatch = instance.dispatch,\n      flatColumns = instance.flatColumns,\n      hiddenColumns = instance.state.hiddenColumns;\n  var getInstance = useGetLatest(instance);\n  var allColumnsHidden = flatColumns.length === hiddenColumns.length;\n  var toggleHideColumn = React.useCallback(function (columnId, value) {\n    return dispatch({\n      type: actions.toggleHideColumn,\n      columnId: columnId,\n      value: value\n    });\n  }, [dispatch]);\n  var setHiddenColumns = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.setHiddenColumns,\n      value: value\n    });\n  }, [dispatch]);\n  var toggleHideAllColumns = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.toggleHideAllColumns,\n      value: value\n    });\n  }, [dispatch]); // Snapshot hook and disallow more from being added\n\n  var getToggleHideAllColumnsPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getToggleHideAllColumnsProps');\n  var getToggleHideAllColumnsProps = makePropGetter(getToggleHideAllColumnsPropsHooks(), {\n    instance: getInstance()\n  }); // Snapshot hook and disallow more from being added\n\n  var getToggleHiddenPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getToggleHiddenProps');\n  flatHeaders.forEach(function (column) {\n    column.toggleHidden = function (value) {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value: value\n      });\n    };\n\n    column.getToggleHiddenProps = makePropGetter(getToggleHiddenPropsHooks(), {\n      instance: getInstance(),\n      column: column\n    });\n  });\n  Object.assign(instance, {\n    allColumnsHidden: allColumnsHidden,\n    toggleHideColumn: toggleHideColumn,\n    setHiddenColumns: setHiddenColumns,\n    toggleHideAllColumns: toggleHideAllColumns,\n    getToggleHideAllColumnsProps: getToggleHideAllColumnsProps\n  });\n}\n\nvar defaultInitialState = {};\nvar defaultColumnInstance = {};\n\nvar defaultReducer = function defaultReducer(state, action, prevState) {\n  return state;\n};\n\nvar defaultGetSubRows = function defaultGetSubRows(row, index) {\n  return row.subRows || [];\n};\n\nvar defaultGetRowId = function defaultGetRowId(row, index, parent) {\n  return \"\" + (parent ? [parent.id, index].join('.') : index);\n};\n\nvar defaultUseControlledState = function defaultUseControlledState(d) {\n  return d;\n};\n\nfunction applyDefaults(props) {\n  var _props$initialState = props.initialState,\n      initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,\n      _props$defaultColumn = props.defaultColumn,\n      defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,\n      _props$getSubRows = props.getSubRows,\n      getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,\n      _props$getRowId = props.getRowId,\n      getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,\n      _props$stateReducer = props.stateReducer,\n      stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer,\n      _props$useControlledS = props.useControlledState,\n      useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS,\n      rest = _objectWithoutPropertiesLoose(props, [\"initialState\", \"defaultColumn\", \"getSubRows\", \"getRowId\", \"stateReducer\", \"useControlledState\"]);\n\n  return _extends({}, rest, {\n    initialState: initialState,\n    defaultColumn: defaultColumn,\n    getSubRows: getSubRows,\n    getRowId: getRowId,\n    stateReducer: stateReducer,\n    useControlledState: useControlledState\n  });\n}\n\nvar useTable = function useTable(props) {\n  for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    plugins[_key - 1] = arguments[_key];\n  } // Apply default props\n\n\n  props = applyDefaults(props); // Add core plugins\n\n  plugins = [useColumnVisibility].concat(plugins); // Create the table instance\n\n  var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n\n  var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance\n\n  Object.assign(getInstance(), _extends({}, props, {\n    plugins: plugins,\n    hooks: makeDefaultPluginHooks()\n  })); // Allow plugins to register hooks as early as possible\n\n  plugins.filter(Boolean).forEach(function (plugin) {\n    plugin(getInstance().hooks);\n  });\n  var getUseOptionsHooks = useConsumeHookGetter(getInstance().hooks, 'useOptions'); // Allow useOptions hooks to modify the options coming into the table\n\n  Object.assign(getInstance(), reduceHooks(getUseOptionsHooks(), applyDefaults(props)));\n\n  var _getInstance = getInstance(),\n      data = _getInstance.data,\n      userColumns = _getInstance.columns,\n      initialState = _getInstance.initialState,\n      defaultColumn = _getInstance.defaultColumn,\n      getSubRows = _getInstance.getSubRows,\n      getRowId = _getInstance.getRowId,\n      stateReducer = _getInstance.stateReducer,\n      useControlledState = _getInstance.useControlledState; // Snapshot hook and disallow more from being added\n\n\n  var getStateReducers = useConsumeHookGetter(getInstance().hooks, 'stateReducers'); // Setup user reducer ref\n\n  var getStateReducer = useGetLatest(stateReducer); // Build the reducer\n\n  var reducer = React.useCallback(function (state, action) {\n    // Detect invalid actions\n    if (!action.type) {\n      console.info({\n        action: action\n      });\n      throw new Error('Unknown Action 👆');\n    } // Reduce the state from all plugin reducers\n\n\n    return [].concat(getStateReducers(), Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function (s, handler) {\n      return handler(s, action, state, getInstance()) || s;\n    }, state);\n  }, [getStateReducers, getStateReducer, getInstance]); // Start the reducer\n\n  var _React$useReducer = React.useReducer(reducer, undefined, function () {\n    return reducer(initialState, {\n      type: actions.init\n    });\n  }),\n      reducerState = _React$useReducer[0],\n      dispatch = _React$useReducer[1]; // Snapshot hook and disallow more from being added\n\n\n  var getUseControlledStateHooks = useConsumeHookGetter(getInstance().hooks, 'useControlledState'); // Allow the user to control the final state with hooks\n\n  var state = reduceHooks([].concat(getUseControlledStateHooks(), [useControlledState]), reducerState, {\n    instance: getInstance()\n  });\n  Object.assign(getInstance(), {\n    state: state,\n    dispatch: dispatch\n  }); // Snapshot hook and disallow more from being added\n\n  var getColumnsHooks = useConsumeHookGetter(getInstance().hooks, 'columns'); // Snapshot hook and disallow more from being added\n\n  var getColumnsDepsHooks = useConsumeHookGetter(getInstance().hooks, 'columnsDeps'); // Decorate All the columns\n\n  var columns = React.useMemo(function () {\n    return decorateColumnTree(reduceHooks(getColumnsHooks(), userColumns, {\n      instance: getInstance()\n    }), defaultColumn);\n  }, [defaultColumn, getColumnsHooks, getInstance, userColumns].concat(reduceHooks(getColumnsDepsHooks(), [], {\n    instance: getInstance()\n  })));\n  getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  var flatColumns = React.useMemo(function () {\n    return flattenBy(columns, 'columns');\n  }, [columns]);\n  getInstance().flatColumns = flatColumns; // Access the row model\n\n  var _React$useMemo = React.useMemo(function () {\n    var flatRows = []; // Access the row's data\n\n    var accessRow = function accessRow(originalRow, i, depth, parent) {\n      if (depth === void 0) {\n        depth = 0;\n      } // Keep the original reference around\n\n\n      var original = originalRow;\n      var id = getRowId(originalRow, i, parent);\n      var row = {\n        id: id,\n        original: original,\n        index: i,\n        depth: depth,\n        cells: [{}] // This is a dummy cell\n\n      };\n      flatRows.push(row); // Process any subRows\n\n      var subRows = getSubRows(originalRow, i);\n\n      if (subRows) {\n        row.subRows = subRows.map(function (d, i) {\n          return accessRow(d, i, depth + 1, row);\n        });\n      } // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n\n\n      var unpreparedAccessWarning = function unpreparedAccessWarning() {\n        throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n      };\n\n      row.cells.map = unpreparedAccessWarning;\n      row.cells.filter = unpreparedAccessWarning;\n      row.cells.forEach = unpreparedAccessWarning;\n      row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n      row.values = {};\n      flatColumns.forEach(function (_ref) {\n        var id = _ref.id,\n            accessor = _ref.accessor;\n        row.values[id] = accessor ? accessor(originalRow, i, {\n          subRows: subRows,\n          depth: depth,\n          data: data\n        }) : undefined;\n      });\n      return row;\n    }; // Use the resolved data\n\n\n    var accessedData = data.map(function (d, i) {\n      return accessRow(d, i);\n    });\n    return [accessedData, flatRows];\n  }, [data, flatColumns, getRowId, getSubRows]),\n      rows = _React$useMemo[0],\n      flatRows = _React$useMemo[1];\n\n  getInstance().rows = rows;\n  getInstance().flatRows = flatRows; // Snapshot hook and disallow more from being added\n\n  var flatColumnsHooks = useConsumeHookGetter(getInstance().hooks, 'flatColumns'); // Snapshot hook and disallow more from being added\n\n  var flatColumnsDepsHooks = useConsumeHookGetter(getInstance().hooks, 'flatColumnsDeps'); // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  flatColumns = React.useMemo(function () {\n    return reduceHooks(flatColumnsHooks(), flatColumns, {\n      instance: getInstance()\n    });\n  }, [flatColumns, flatColumnsHooks, getInstance].concat(reduceHooks(flatColumnsDepsHooks(), [], {\n    instance: getInstance()\n  })));\n  getInstance().flatColumns = flatColumns; // Snapshot hook and disallow more from being added\n\n  var getHeaderGroups = useConsumeHookGetter(getInstance().hooks, 'headerGroups'); // Snapshot hook and disallow more from being added\n\n  var getHeaderGroupsDeps = useConsumeHookGetter(getInstance().hooks, 'headerGroupsDeps'); // Make the headerGroups\n\n  var headerGroups = React.useMemo(function () {\n    return reduceHooks(getHeaderGroups(), makeHeaderGroups(flatColumns, defaultColumn), getInstance());\n  }, [defaultColumn, flatColumns, getHeaderGroups, getInstance].concat(reduceHooks(getHeaderGroupsDeps(), [], {\n    instance: getInstance()\n  })));\n  getInstance().headerGroups = headerGroups;\n  var headers = React.useMemo(function () {\n    return headerGroups.length ? headerGroups[0].headers : [];\n  }, [headerGroups]);\n  getInstance().headers = headers; // Provide a flat header list for utilities\n\n  getInstance().flatHeaders = headerGroups.reduce(function (all, headerGroup) {\n    return [].concat(all, headerGroup.headers);\n  }, []); // Snapshot hook and disallow more from being added\n\n  var getUseInstanceBeforeDimensions = useConsumeHookGetter(getInstance().hooks, 'useInstanceBeforeDimensions');\n  loopHooks(getUseInstanceBeforeDimensions(), getInstance()); // Header Visibility is needed by this point\n\n  var _calculateHeaderWidth = calculateHeaderWidths(headers),\n      totalColumnsMinWidth = _calculateHeaderWidth[0],\n      totalColumnsWidth = _calculateHeaderWidth[1],\n      totalColumnsMaxWidth = _calculateHeaderWidth[2];\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth;\n  getInstance().totalColumnsWidth = totalColumnsWidth;\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth; // Snapshot hook and disallow more from being added\n\n  var getUseInstance = useConsumeHookGetter(getInstance().hooks, 'useInstance');\n  loopHooks(getUseInstance(), getInstance()); // Snapshot hook and disallow more from being added\n\n  var getHeaderPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getHeaderProps'); // Snapshot hook and disallow more from being added\n\n  var getFooterPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getFooterProps') // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;\n  [].concat(getInstance().flatHeaders, getInstance().flatColumns).forEach(function (column) {\n    // Give columns/headers rendering power\n    column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps\n\n    column.getHeaderProps = makePropGetter(getHeaderPropsHooks(), {\n      instance: getInstance(),\n      column: column\n    }); // Give columns/headers a default getFooterProps\n\n    column.getFooterProps = makePropGetter(getFooterPropsHooks(), {\n      instance: getInstance(),\n      column: column\n    });\n  }); // Snapshot hook and disallow more from being added\n\n  var getHeaderGroupPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getHeaderGroupProps'); // Snapshot hook and disallow more from being added\n\n  var getFooterGroupPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getFooterGroupProps');\n  getInstance().headerGroups = getInstance().headerGroups.filter(function (headerGroup, i) {\n    // Filter out any headers and headerGroups that don't have visible columns\n    headerGroup.headers = headerGroup.headers.filter(function (column) {\n      var recurse = function recurse(headers) {\n        return headers.filter(function (column) {\n          if (column.headers) {\n            return recurse(column.headers);\n          }\n\n          return column.isVisible;\n        }).length;\n      };\n\n      if (column.headers) {\n        return recurse(column.headers);\n      }\n\n      return column.isVisible;\n    }); // Give headerGroups getRowProps\n\n    if (headerGroup.headers.length) {\n      headerGroup.getHeaderGroupProps = makePropGetter(getHeaderGroupPropsHooks(), {\n        instance: getInstance(),\n        headerGroup: headerGroup,\n        index: i\n      });\n      headerGroup.getFooterGroupProps = makePropGetter(getFooterGroupPropsHooks(), {\n        instance: getInstance(),\n        headerGroup: headerGroup,\n        index: i\n      });\n      return true;\n    }\n\n    return false;\n  });\n  getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // Run the rows (this could be a dangerous hook with a ton of data)\n  // Snapshot hook and disallow more from being added\n\n  var getUseRowsHooks = useConsumeHookGetter(getInstance().hooks, 'useRows');\n  getInstance().rows = reduceHooks(getUseRowsHooks(), getInstance().rows, {\n    instance: getInstance()\n  }); // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n  // Snapshot hook and disallow more from being added\n\n  var getPrepareRowHooks = useConsumeHookGetter(getInstance().hooks, 'prepareRow'); // Snapshot hook and disallow more from being added\n\n  var getRowPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getRowProps'); // Snapshot hook and disallow more from being added\n\n  var getCellPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getCellProps'); // Snapshot hook and disallow more from being added\n\n  var cellsHooks = useConsumeHookGetter(getInstance().hooks, 'cells');\n  getInstance().prepareRow = React.useCallback(function (row) {\n    row.getRowProps = makePropGetter(getRowPropsHooks(), {\n      instance: getInstance(),\n      row: row\n    }); // Build the visible cells for each row\n\n    row.allCells = flatColumns.map(function (column) {\n      var cell = {\n        column: column,\n        row: row,\n        value: row.values[column.id]\n      }; // Give each cell a getCellProps base\n\n      cell.getCellProps = makePropGetter(getCellPropsHooks(), {\n        instance: getInstance(),\n        cell: cell\n      }); // Give each cell a renderer function (supports multiple renderers)\n\n      cell.render = makeRenderer(getInstance(), column, {\n        row: row,\n        cell: cell\n      });\n      return cell;\n    });\n    row.cells = reduceHooks(cellsHooks(), row.allCells, {\n      instance: getInstance()\n    }); // need to apply any row specific hooks (useExpanded requires this)\n\n    loopHooks(getPrepareRowHooks(), row, {\n      instance: getInstance()\n    });\n  }, [getRowPropsHooks, getInstance, flatColumns, cellsHooks, getPrepareRowHooks, getCellPropsHooks]); // Snapshot hook and disallow more from being added\n\n  var getTablePropsHooks = useConsumeHookGetter(getInstance().hooks, 'getTableProps');\n  getInstance().getTableProps = makePropGetter(getTablePropsHooks(), {\n    instance: getInstance()\n  }); // Snapshot hook and disallow more from being added\n\n  var getTableBodyPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getTableBodyProps');\n  getInstance().getTableBodyProps = makePropGetter(getTableBodyPropsHooks(), {\n    instance: getInstance()\n  }); // Snapshot hook and disallow more from being added\n\n  var getUseFinalInstanceHooks = useConsumeHookGetter(getInstance().hooks, 'useFinalInstance');\n  loopHooks(getUseFinalInstanceHooks(), getInstance());\n  return getInstance();\n};\n\nfunction calculateHeaderWidths(headers, left) {\n  if (left === void 0) {\n    left = 0;\n  }\n\n  var sumTotalMinWidth = 0;\n  var sumTotalWidth = 0;\n  var sumTotalMaxWidth = 0;\n  headers.forEach(function (header) {\n    var subHeaders = header.headers;\n    header.totalLeft = left;\n\n    if (subHeaders && subHeaders.length) {\n      var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left),\n          totalMinWidth = _calculateHeaderWidth2[0],\n          totalWidth = _calculateHeaderWidth2[1],\n          totalMaxWidth = _calculateHeaderWidth2[2];\n\n      header.totalMinWidth = totalMinWidth;\n      header.totalWidth = totalWidth;\n      header.totalMaxWidth = totalMaxWidth;\n    } else {\n      header.totalMinWidth = header.minWidth;\n      header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n      header.totalMaxWidth = header.maxWidth;\n    }\n\n    if (header.isVisible) {\n      left += header.totalWidth;\n      sumTotalMinWidth += header.totalMinWidth;\n      sumTotalWidth += header.totalWidth;\n      sumTotalMaxWidth += header.totalMaxWidth;\n    }\n  });\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth];\n}\n\nactions.toggleExpanded = 'toggleExpanded';\nactions.toggleAllExpanded = 'toggleAllExpanded';\nactions.setExpanded = 'setExpanded';\nactions.resetExpanded = 'resetExpanded';\n\nvar useExpanded = function useExpanded(hooks) {\n  hooks.getExpandedToggleProps = [defaultGetExpandedToggleProps];\n  hooks.stateReducers.push(reducer$1);\n  hooks.useInstance.push(useInstance$1);\n};\n\nuseExpanded.pluginName = 'useExpanded';\n\nvar defaultGetExpandedToggleProps = function defaultGetExpandedToggleProps(props, _ref) {\n  var row = _ref.row;\n  return [props, {\n    onClick: function onClick(e) {\n      e.persist();\n      row.toggleExpanded();\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    title: 'Toggle Expanded'\n  }];\n}; // Reducer\n\n\nfunction reducer$1(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      expanded: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return _extends({}, state, {\n      expanded: instance.initialState.expanded || {}\n    });\n  }\n\n  if (action.type === actions.setExpanded) {\n    return _extends({}, state, {\n      expanded: functionalUpdate(action.expanded, state.expanded)\n    });\n  }\n\n  if (action.type === actions.toggleExpanded) {\n    var id = action.id,\n        setExpanded = action.expanded;\n    var exists = state.expanded[id];\n    var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;\n\n    if (!exists && shouldExist) {\n      var _extends2;\n\n      return _extends({}, state, {\n        expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))\n      });\n    } else if (exists && !shouldExist) {\n      var _state$expanded = state.expanded,\n          _ = _state$expanded[id],\n          rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));\n\n      return _extends({}, state, {\n        expanded: rest\n      });\n    } else {\n      return state;\n    }\n  }\n}\n\nfunction useInstance$1(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      hooks = instance.hooks,\n      _instance$autoResetEx = instance.autoResetExpanded,\n      autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx,\n      expanded = instance.state.expanded,\n      dispatch = instance.dispatch;\n  var getAutoResetExpanded = useGetLatest(autoResetExpanded); // Bypass any effects from firing when this changes\n\n  useMountedLayoutEffect(function () {\n    if (getAutoResetExpanded()) {\n      dispatch({\n        type: actions.resetExpanded\n      });\n    }\n  }, [dispatch, data]);\n\n  var toggleExpanded = function toggleExpanded(id, expanded) {\n    dispatch({\n      type: actions.toggleExpanded,\n      id: id,\n      expanded: expanded\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var getInstance = useGetLatest(instance);\n  var getExpandedTogglePropsHooks = useConsumeHookGetter(getInstance().hooks, 'getExpandedToggleProps');\n  hooks.prepareRow.push(function (row) {\n    row.toggleExpanded = function (set) {\n      return instance.toggleExpanded(row.id, set);\n    };\n\n    row.getExpandedToggleProps = makePropGetter(getExpandedTogglePropsHooks(), {\n      instance: getInstance(),\n      row: row\n    });\n  });\n  var expandedRows = React.useMemo(function () {\n    if (paginateExpandedRows) {\n      return expandRows(rows, {\n        manualExpandedKey: manualExpandedKey,\n        expanded: expanded,\n        expandSubRows: expandSubRows\n      });\n    }\n\n    return rows;\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n  var expandedDepth = React.useMemo(function () {\n    return findExpandedDepth(expanded);\n  }, [expanded]);\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows: expandedRows,\n    rows: expandedRows,\n    toggleExpanded: toggleExpanded,\n    expandedDepth: expandedDepth\n  });\n}\n\nfunction findExpandedDepth(expanded) {\n  var maxDepth = 0;\n  Object.keys(expanded).forEach(function (id) {\n    var splitId = id.split('.');\n    maxDepth = Math.max(maxDepth, splitId.length);\n  });\n  return maxDepth;\n}\n\nvar text = function text(rows, ids, filterValue) {\n  rows = rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n    });\n  });\n  return rows;\n};\n\ntext.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactText = function exactText(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n    });\n  });\n};\n\nexactText.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactTextCase = function exactTextCase(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n    });\n  });\n};\n\nexactTextCase.autoRemove = function (val) {\n  return !val;\n};\n\nvar includes = function includes(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return filterValue.includes(rowValue);\n    });\n  });\n};\n\nincludes.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar includesAll = function includesAll(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue && rowValue.length && filterValue.every(function (val) {\n        return rowValue.includes(val);\n      });\n    });\n  });\n};\n\nincludesAll.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar exact = function exact(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue === filterValue;\n    });\n  });\n};\n\nexact.autoRemove = function (val) {\n  return typeof val === 'undefined';\n};\n\nvar equals = function equals(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n\n      return rowValue == filterValue;\n    });\n  });\n};\n\nequals.autoRemove = function (val) {\n  return val == null;\n};\n\nvar between = function between(rows, ids, filterValue) {\n  var _ref = filterValue || [],\n      min = _ref[0],\n      max = _ref[1];\n\n  min = typeof min === 'number' ? min : -Infinity;\n  max = typeof max === 'number' ? max : Infinity;\n\n  if (min > max) {\n    var temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue >= min && rowValue <= max;\n    });\n  });\n};\n\nbetween.autoRemove = function (val) {\n  return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n};\n\nvar filterTypes =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  text: text,\n  exactText: exactText,\n  exactTextCase: exactTextCase,\n  includes: includes,\n  includesAll: includesAll,\n  exact: exact,\n  equals: equals,\n  between: between\n});\nactions.resetFilters = 'resetFilters';\nactions.setFilter = 'setFilter';\nactions.setAllFilters = 'setAllFilters';\n\nvar useFilters = function useFilters(hooks) {\n  hooks.stateReducers.push(reducer$2);\n  hooks.useInstance.push(useInstance$2);\n};\n\nuseFilters.pluginName = 'useFilters';\n\nfunction reducer$2(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      filters: []\n    }, state);\n  }\n\n  if (action.type === actions.resetFilters) {\n    return _extends({}, state, {\n      filters: instance.initialState.filters || []\n    });\n  }\n\n  if (action.type === actions.setFilter) {\n    var columnId = action.columnId,\n        filterValue = action.filterValue;\n    var flatColumns = instance.flatColumns,\n        userFilterTypes = instance.userFilterTypes;\n    var column = flatColumns.find(function (d) {\n      return d.id === columnId;\n    });\n\n    if (!column) {\n      throw new Error(\"React-Table: Could not find a column with id: \" + columnId);\n    }\n\n    var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n    var previousfilter = state.filters.find(function (d) {\n      return d.id === columnId;\n    });\n    var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //\n\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      return _extends({}, state, {\n        filters: state.filters.filter(function (d) {\n          return d.id !== columnId;\n        })\n      });\n    }\n\n    if (previousfilter) {\n      return _extends({}, state, {\n        filters: state.filters.map(function (d) {\n          if (d.id === columnId) {\n            return {\n              id: columnId,\n              value: newFilter\n            };\n          }\n\n          return d;\n        })\n      });\n    }\n\n    return _extends({}, state, {\n      filters: [].concat(state.filters, [{\n        id: columnId,\n        value: newFilter\n      }])\n    });\n  }\n\n  if (action.type === actions.setAllFilters) {\n    var filters = action.filters;\n    var _flatColumns = instance.flatColumns,\n        _userFilterTypes = instance.filterTypes;\n    return _extends({}, state, {\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(function (filter) {\n        var column = _flatColumns.find(function (d) {\n          return d.id === filter.id;\n        });\n\n        var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n\n        if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value)) {\n          return false;\n        }\n\n        return true;\n      })\n    });\n  }\n}\n\nfunction useInstance$2(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      flatColumns = instance.flatColumns,\n      userFilterTypes = instance.filterTypes,\n      manualFilters = instance.manualFilters,\n      _instance$defaultCanF = instance.defaultCanFilter,\n      defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,\n      disableFilters = instance.disableFilters,\n      filters = instance.state.filters,\n      dispatch = instance.dispatch,\n      _instance$autoResetFi = instance.autoResetFilters,\n      autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;\n\n  var setFilter = function setFilter(columnId, filterValue) {\n    dispatch({\n      type: actions.setFilter,\n      columnId: columnId,\n      filterValue: filterValue\n    });\n  };\n\n  var setAllFilters = function setAllFilters(filters) {\n    dispatch({\n      type: actions.setAllFilters,\n      filters: filters\n    });\n  };\n\n  flatColumns.forEach(function (column) {\n    var id = column.id,\n        accessor = column.accessor,\n        columnDefaultCanFilter = column.defaultCanFilter,\n        columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n\n    column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n\n    column.setFilter = function (val) {\n      return setFilter(column.id, val);\n    }; // Provide the current filter value to the column for\n    // convenience\n\n\n    var found = filters.find(function (d) {\n      return d.id === id;\n    });\n    column.filterValue = found && found.value;\n  });\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows];\n    }\n\n    var filteredFlatRows = []; // Filters top level and nested rows\n\n    var filterRows = function filterRows(rows, depth) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      var filteredRows = rows;\n      filteredRows = filters.reduce(function (filteredSoFar, _ref) {\n        var columnId = _ref.id,\n            filterValue = _ref.value; // Find the filters column\n\n        var column = flatColumns.find(function (d) {\n          return d.id === columnId;\n        });\n\n        if (!column) {\n          return filteredSoFar;\n        }\n\n        if (depth === 0) {\n          column.preFilteredRows = filteredSoFar;\n        }\n\n        var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n\n        if (!filterMethod) {\n          console.warn(\"Could not find a valid 'column.filter' for column with the ID: \" + column.id + \".\");\n          return filteredSoFar;\n        } // Pass the rows, id, filterValue and column to the filterMethod\n        // to get the filtered rows back\n\n\n        column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);\n        return column.filteredRows;\n      }, rows); // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n\n      filteredRows = filteredRows.map(function (row) {\n        filteredFlatRows.push(row);\n\n        if (!row.subRows) {\n          return row;\n        }\n\n        return _extends({}, row, {\n          subRows: row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows\n        });\n      });\n      return filteredRows;\n    };\n\n    return [filterRows(rows), filteredFlatRows];\n  }, [manualFilters, filters, rows, flatRows, flatColumns, userFilterTypes]),\n      filteredRows = _React$useMemo[0],\n      filteredFlatRows = _React$useMemo[1];\n\n  React.useMemo(function () {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    var nonFilteredColumns = flatColumns.filter(function (column) {\n      return !filters.find(function (d) {\n        return d.id === column.id;\n      });\n    }); // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n\n    nonFilteredColumns.forEach(function (column) {\n      column.preFilteredRows = filteredRows;\n      column.filteredRows = filteredRows;\n    });\n  }, [filteredRows, filters, flatColumns]);\n  var getAutoResetFilters = useGetLatest(autoResetFilters);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetFilters()) {\n      dispatch({\n        type: actions.resetFilters\n      });\n    }\n  }, [dispatch, manualFilters ? null : data]);\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    filteredRows: filteredRows,\n    filteredFlatRows: filteredFlatRows,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    setFilter: setFilter,\n    setAllFilters: setAllFilters\n  });\n}\n\nactions.resetGlobalFilter = 'resetGlobalFilter';\nactions.setGlobalFilter = 'setGlobalFilter';\n\nvar useGlobalFilter = function useGlobalFilter(hooks) {\n  hooks.stateReducers.push(reducer$3);\n  hooks.useInstance.push(useInstance$3);\n};\n\nuseGlobalFilter.pluginName = 'useGlobalFilter';\n\nfunction reducer$3(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return _extends({}, state, {\n      globalFilter: instance.initialState.globalFilter || undefined\n    });\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    var filterValue = action.filterValue;\n    var userFilterTypes = instance.userFilterTypes;\n    var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);\n    var newFilter = functionalUpdate(filterValue, state.globalFilter); //\n\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      var globalFilter = state.globalFilter,\n          stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, [\"globalFilter\"]);\n\n      return stateWithoutGlobalFilter;\n    }\n\n    return _extends({}, state, {\n      globalFilter: newFilter\n    });\n  }\n}\n\nfunction useInstance$3(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      flatColumns = instance.flatColumns,\n      userFilterTypes = instance.filterTypes,\n      globalFilter = instance.globalFilter,\n      manualGlobalFilter = instance.manualGlobalFilter,\n      globalFilterValue = instance.state.globalFilter,\n      dispatch = instance.dispatch,\n      _instance$autoResetGl = instance.autoResetGlobalFilters,\n      autoResetGlobalFilters = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl,\n      plugins = instance.plugins;\n  ensurePluginOrder(plugins, [], 'useGlobalFilter', ['useSortBy', 'useExpanded']);\n\n  var setGlobalFilter = function setGlobalFilter(filterValue) {\n    dispatch({\n      type: actions.setGlobalFilter,\n      filterValue: filterValue\n    });\n  }; // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows];\n    }\n\n    var filteredFlatRows = [];\n    var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);\n\n    if (!filterMethod) {\n      console.warn(\"Could not find a valid 'globalFilter' option.\");\n      return rows;\n    } // Filters top level and nested rows\n\n\n    var filterRows = function filterRows(filteredRows) {\n      return filterMethod(filteredRows, flatColumns.map(function (d) {\n        return d.id;\n      }), globalFilterValue).map(function (row) {\n        filteredFlatRows.push(row);\n        return _extends({}, row, {\n          subRows: row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows\n        });\n      });\n    };\n\n    return [filterRows(rows), filteredFlatRows];\n  }, [manualGlobalFilter, globalFilter, userFilterTypes, rows, flatRows, flatColumns, globalFilterValue]),\n      globalFilteredRows = _React$useMemo[0],\n      globalFilteredFlatRows = _React$useMemo[1];\n\n  var getAutoResetGlobalFilters = useGetLatest(autoResetGlobalFilters);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetGlobalFilters()) {\n      dispatch({\n        type: actions.resetGlobalFilter\n      });\n    }\n  }, [dispatch, manualGlobalFilter ? null : data]);\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    globalFilteredRows: globalFilteredRows,\n    globalFilteredFlatRows: globalFilteredFlatRows,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    setGlobalFilter: setGlobalFilter\n  });\n}\n\nfunction sum(values, rows) {\n  return values.reduce(function (sum, next) {\n    return sum + next;\n  }, 0);\n}\n\nfunction average(values, rows) {\n  return Math.round(sum(values) / values.length * 100) / 100;\n}\n\nfunction median(values) {\n  values = values.length ? values : [0];\n  var min = Math.min.apply(Math, values);\n  var max = Math.max.apply(Math, values);\n  return (min + max) / 2;\n}\n\nfunction uniqueCount(values) {\n  return new Set(values).size;\n}\n\nfunction count(values) {\n  return values.length;\n}\n\nvar aggregations =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  sum: sum,\n  average: average,\n  median: median,\n  uniqueCount: uniqueCount,\n  count: count\n});\nactions.resetGroupBy = 'resetGroupBy';\nactions.toggleGroupBy = 'toggleGroupBy';\n\nvar useGroupBy = function useGroupBy(hooks) {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];\n  hooks.stateReducers.push(reducer$4);\n  hooks.flatColumnsDeps.push(function (deps, _ref) {\n    var instance = _ref.instance;\n    return [].concat(deps, [instance.state.groupBy]);\n  });\n  hooks.flatColumns.push(flatColumns);\n  hooks.useInstance.push(useInstance$4);\n};\n\nuseGroupBy.pluginName = 'useGroupBy';\n\nvar defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {\n  var header = _ref2.header;\n  return [props, {\n    onClick: header.canGroupBy ? function (e) {\n      e.persist();\n      header.toggleGroupBy();\n    } : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined\n    },\n    title: 'Toggle GroupBy'\n  }];\n}; // Reducer\n\n\nfunction reducer$4(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      groupBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return _extends({}, state, {\n      groupBy: instance.initialState.groupBy || []\n    });\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    var columnId = action.columnId,\n        toggle = action.toggle;\n    var resolvedToggle = typeof toggle !== 'undefined' ? toggle : !state.groupBy.includes(columnId);\n\n    if (resolvedToggle) {\n      return _extends({}, state, {\n        groupBy: [].concat(state.groupBy, [columnId])\n      });\n    }\n\n    return _extends({}, state, {\n      groupBy: state.groupBy.filter(function (d) {\n        return d !== columnId;\n      })\n    });\n  }\n}\n\nfunction flatColumns(flatColumns, _ref3) {\n  var groupBy = _ref3.instance.state.groupBy; // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  var groupByColumns = groupBy.map(function (g) {\n    return flatColumns.find(function (col) {\n      return col.id === g;\n    });\n  }).filter(function (col) {\n    return !!col;\n  });\n  var nonGroupByColumns = flatColumns.filter(function (col) {\n    return !groupBy.includes(col.id);\n  });\n  flatColumns = [].concat(groupByColumns, nonGroupByColumns);\n  flatColumns.forEach(function (column) {\n    column.isGrouped = groupBy.includes(column.id);\n    column.groupedIndex = groupBy.indexOf(column.id);\n  });\n  return flatColumns;\n}\n\nvar defaultUserAggregations = {};\n\nfunction useInstance$4(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      flatColumns = instance.flatColumns,\n      flatHeaders = instance.flatHeaders,\n      _instance$groupByFn = instance.groupByFn,\n      groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,\n      manualGroupBy = instance.manualGroupBy,\n      _instance$aggregation = instance.aggregations,\n      userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,\n      hooks = instance.hooks,\n      plugins = instance.plugins,\n      groupBy = instance.state.groupBy,\n      dispatch = instance.dispatch,\n      _instance$autoResetGr = instance.autoResetGroupBy,\n      autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr,\n      manaulGroupBy = instance.manaulGroupBy,\n      disableGroupBy = instance.disableGroupBy,\n      defaultCanGroupBy = instance.defaultCanGroupBy;\n  ensurePluginOrder(plugins, [], 'useGroupBy', ['useSortBy', 'useExpanded']);\n  var getInstance = useGetLatest(instance);\n  flatColumns.forEach(function (column) {\n    var accessor = column.accessor,\n        defaultColumnGroupBy = column.defaultGroupBy,\n        columnDisableGroupBy = column.disableGroupBy;\n    column.canGroupBy = accessor ? getFirstDefined(columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(defaultColumnGroupBy, defaultCanGroupBy, false);\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = function () {\n        return instance.toggleGroupBy(column.id);\n      };\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell;\n  });\n\n  var toggleGroupBy = function toggleGroupBy(columnId, toggle) {\n    dispatch({\n      type: actions.toggleGroupBy,\n      columnId: columnId,\n      toggle: toggle\n    });\n  };\n\n  var getGroupByTogglePropsHooks = useConsumeHookGetter(getInstance().hooks, 'getGroupByToggleProps');\n  flatHeaders.forEach(function (header) {\n    header.getGroupByToggleProps = makePropGetter(getGroupByTogglePropsHooks(), {\n      instance: getInstance(),\n      header: header\n    });\n  });\n  hooks.prepareRow.push(function (row) {\n    row.allCells.forEach(function (cell) {\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Repeated cells are any columns in the groupBy that are not grouped\n\n      cell.isRepeatedValue = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n\n      cell.isAggregated = !cell.isGrouped && !cell.isRepeatedValue && row.canExpand;\n    });\n  });\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualGroupBy || !groupBy.length) {\n      return [rows, flatRows];\n    } // Ensure that the list of filtered columns exist\n\n\n    var existingGroupBy = groupBy.filter(function (g) {\n      return flatColumns.find(function (col) {\n        return col.id === g;\n      });\n    }); // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n\n    var aggregateRowsToValues = function aggregateRowsToValues(rows, isAggregated) {\n      var values = {};\n      flatColumns.forEach(function (column) {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = rows[0] ? rows[0].values[column.id] : null;\n          return;\n        }\n\n        var columnValues = rows.map(function (d) {\n          return d.values[column.id];\n        });\n        var aggregator = column.aggregate;\n\n        if (Array.isArray(aggregator)) {\n          if (aggregator.length !== 2) {\n            console.info({\n              column: column\n            });\n            throw new Error(\"React Table: Complex aggregators must have 2 values, eg. aggregate: ['sum', 'count']. More info above...\");\n          }\n\n          if (isAggregated) {\n            aggregator = aggregator[1];\n          } else {\n            aggregator = aggregator[0];\n          }\n        }\n\n        var aggregateFn = typeof aggregator === 'function' ? aggregator : userAggregations[aggregator] || aggregations[aggregator];\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(columnValues, rows, isAggregated);\n        } else if (aggregator) {\n          console.info({\n            column: column\n          });\n          throw new Error(\"React Table: Invalid aggregate option for column listed above\");\n        } else {\n          values[column.id] = null;\n        }\n      });\n      return values;\n    };\n\n    var groupedFlatRows = []; // Recursively group the data\n\n    var groupRecursively = function groupRecursively(rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      } // This is the last level, just return the rows\n\n\n      if (depth === existingGroupBy.length) {\n        return rows;\n      }\n\n      var columnId = existingGroupBy[depth]; // Group the rows together for this level\n\n      var groupedRows = groupByFn(rows, columnId); // Recurse to sub rows before aggregation\n\n      groupedRows = Object.entries(groupedRows).map(function (_ref4, index) {\n        var groupByVal = _ref4[0],\n            subRows = _ref4[1];\n        var id = columnId + \":\" + groupByVal;\n        id = parentId ? parentId + \">\" + id : id;\n        subRows = groupRecursively(subRows, depth + 1, id);\n        var values = aggregateRowsToValues(subRows, depth < existingGroupBy.length);\n        var row = {\n          id: id,\n          isGrouped: true,\n          groupByID: columnId,\n          groupByVal: groupByVal,\n          values: values,\n          subRows: subRows,\n          depth: depth,\n          index: index\n        };\n        groupedFlatRows.push.apply(groupedFlatRows, [row].concat(subRows));\n        return row;\n      });\n      return groupedRows;\n    };\n\n    var groupedRows = groupRecursively(rows); // Assign the new data\n\n    return [groupedRows, groupedFlatRows];\n  }, [manualGroupBy, groupBy, rows, flatRows, flatColumns, userAggregations, groupByFn]),\n      groupedRows = _React$useMemo[0],\n      groupedFlatRows = _React$useMemo[1];\n\n  var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetGroupBy()) {\n      dispatch({\n        type: actions.resetGroupBy\n      });\n    }\n  }, [dispatch, manaulGroupBy ? null : data]);\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    groupedRows: groupedRows,\n    groupedFlatRows: groupedFlatRows,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    toggleGroupBy: toggleGroupBy\n  });\n}\n\nvar reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\nvar alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId); // Force to strings (or \"\" for unsupported types)\n\n  a = toString(a);\n  b = toString(b); // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n\n  a = a.split(reSplitAlphaNumeric).filter(Boolean);\n  b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    var aa = a.shift();\n    var bb = b.shift();\n    var an = parseInt(aa, 10);\n    var bn = parseInt(bb, 10);\n    var combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n};\n\nfunction datetime(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  a = a.getTime();\n  b = b.getTime();\n  return compareBasic(a, b);\n}\n\nfunction basic(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  return compareBasic(a, b);\n} // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId];\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n}\n\nvar sortTypes =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  alphanumeric: alphanumeric,\n  datetime: datetime,\n  basic: basic\n});\nactions.resetSortBy = 'resetSortBy';\nactions.toggleSortBy = 'toggleSortBy';\nactions.clearSortBy = 'clearSortBy';\ndefaultColumn.sortType = 'alphanumeric';\ndefaultColumn.sortDescFirst = false;\n\nvar useSortBy = function useSortBy(hooks) {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps];\n  hooks.stateReducers.push(reducer$5);\n  hooks.useInstance.push(useInstance$5);\n};\n\nuseSortBy.pluginName = 'useSortBy';\n\nvar defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {\n  var instance = _ref.instance,\n      column = _ref.column;\n  var _instance$isMultiSort = instance.isMultiSortEvent,\n      isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {\n    return e.shiftKey;\n  } : _instance$isMultiSort;\n  return [props, {\n    onClick: column.canSort ? function (e) {\n      e.persist();\n      column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));\n    } : undefined,\n    style: {\n      cursor: column.canSort ? 'pointer' : undefined\n    },\n    title: column.canSort ? 'Toggle SortBy' : undefined\n  }];\n}; // Reducer\n\n\nfunction reducer$5(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      sortBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return _extends({}, state, {\n      sortBy: instance.initialState.sortBy || []\n    });\n  }\n\n  if (action.type === actions.clearSortBy) {\n    var sortBy = state.sortBy;\n    var newSortBy = sortBy.filter(function (d) {\n      return d.id !== action.columnId;\n    });\n    return _extends({}, state, {\n      sortBy: newSortBy\n    });\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    var columnId = action.columnId,\n        desc = action.desc,\n        multi = action.multi;\n    var flatColumns = instance.flatColumns,\n        disableMultiSort = instance.disableMultiSort,\n        disableSortRemove = instance.disableSortRemove,\n        disableMultiRemove = instance.disableMultiRemove,\n        _instance$maxMultiSor = instance.maxMultiSortColCount,\n        maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;\n    var _sortBy = state.sortBy; // Find the column for this columnId\n\n    var column = flatColumns.find(function (d) {\n      return d.id === columnId;\n    });\n    var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n\n    var existingSortBy = _sortBy.find(function (d) {\n      return d.id === columnId;\n    });\n\n    var existingIndex = _sortBy.findIndex(function (d) {\n      return d.id === columnId;\n    });\n\n    var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n    var _newSortBy = []; // What should we do with this sort action?\n\n    var sortAction;\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'add';\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== _sortBy.length - 1) {\n        sortAction = 'replace';\n      } else if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'replace';\n      }\n    } // Handle toggle states that will remove the sortBy\n\n\n    if (sortAction === 'toggle' && // Must be toggling\n    !disableSortRemove && // If disableSortRemove, disable in general\n    !hasDescDefined && ( // Must not be setting desc\n    multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n    existingSortBy && // Finally, detect if it should indeed be removed\n    existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n      sortAction = 'remove';\n    }\n\n    if (sortAction === 'replace') {\n      _newSortBy = [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }];\n    } else if (sortAction === 'add') {\n      _newSortBy = [].concat(_sortBy, [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }]); // Take latest n columns\n\n      _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      _newSortBy = _sortBy.map(function (d) {\n        if (d.id === columnId) {\n          return _extends({}, d, {\n            desc: hasDescDefined ? desc : !existingSortBy.desc\n          });\n        }\n\n        return d;\n      });\n    } else if (sortAction === 'remove') {\n      _newSortBy = _sortBy.filter(function (d) {\n        return d.id !== columnId;\n      });\n    }\n\n    return _extends({}, state, {\n      sortBy: _newSortBy\n    });\n  }\n}\n\nfunction useInstance$5(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatColumns = instance.flatColumns,\n      _instance$orderByFn = instance.orderByFn,\n      orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,\n      userSortTypes = instance.sortTypes,\n      manualSortBy = instance.manualSortBy,\n      defaultCanSort = instance.defaultCanSort,\n      disableSortBy = instance.disableSortBy,\n      flatHeaders = instance.flatHeaders,\n      sortBy = instance.state.sortBy,\n      dispatch = instance.dispatch,\n      plugins = instance.plugins,\n      _instance$autoResetSo = instance.autoResetSortBy,\n      autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;\n  ensurePluginOrder(plugins, ['useFilters'], 'useSortBy', []); // Updates sorting based on a columnId, desc flag and multi flag\n\n  var toggleSortBy = function toggleSortBy(columnId, desc, multi) {\n    dispatch({\n      type: actions.toggleSortBy,\n      columnId: columnId,\n      desc: desc,\n      multi: multi\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var getInstance = useGetLatest(instance);\n  var getSortByTogglePropsHooks = useConsumeHookGetter(getInstance().hooks, 'getSortByToggleProps'); // Add the getSortByToggleProps method to columns and headers\n\n  flatHeaders.forEach(function (column) {\n    var accessor = column.accessor,\n        defaultColumnCanSort = column.canSort,\n        columnDisableSortBy = column.disableSortBy,\n        id = column.id;\n    var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n    column.canSort = canSort;\n\n    if (column.canSort) {\n      column.toggleSortBy = function (desc, multi) {\n        return toggleSortBy(column.id, desc, multi);\n      };\n\n      column.clearSortBy = function () {\n        dispatch({\n          type: actions.clearSortBy,\n          columnId: column.id\n        });\n      };\n    }\n\n    column.getSortByToggleProps = makePropGetter(getSortByTogglePropsHooks(), {\n      instance: getInstance(),\n      column: column\n    });\n    var columnSort = sortBy.find(function (d) {\n      return d.id === id;\n    });\n    column.isSorted = !!columnSort;\n    column.sortedIndex = sortBy.findIndex(function (d) {\n      return d.id === id;\n    });\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n  });\n  var sortedRows = React.useMemo(function () {\n    if (manualSortBy || !sortBy.length) {\n      return rows;\n    } // Filter out sortBys that correspond to non existing columns\n\n\n    var availableSortBy = sortBy.filter(function (sort) {\n      return flatColumns.find(function (col) {\n        return col.id === sort.id;\n      });\n    });\n\n    var sortData = function sortData(rows) {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {\n        // Support custom sorting methods for each column\n        var column = flatColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (!column) {\n          throw new Error(\"React-Table: Could not find a column with id: \" + sort.id + \" while sorting\");\n        }\n\n        var sortType = column.sortType; // Look up sortBy functions in this order:\n        // column function\n        // column string lookup on user sortType\n        // column string lookup on built-in sortType\n        // default function\n        // default string lookup on user sortType\n        // default string lookup on built-in sortType\n\n        var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n        if (!sortMethod) {\n          throw new Error(\"React-Table: Could not find a valid sortType of '\" + sortType + \"' for column '\" + sort.id + \"'.\");\n        } // Return the correct sortFn.\n        // This function should always return in ascending order\n\n\n        return function (a, b) {\n          return sortMethod(a, b, sort.id);\n        };\n      }), // Map the directions\n      availableSortBy.map(function (sort) {\n        // Detect and use the sortInverted option\n        var column = flatColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (column && column.sortInverted) {\n          return sort.desc;\n        }\n\n        return !sort.desc;\n      })); // If there are sub-rows, sort them\n\n      sortedData.forEach(function (row) {\n        if (!row.subRows || row.subRows.length <= 1) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    return sortData(rows);\n  }, [manualSortBy, sortBy, rows, flatColumns, orderByFn, userSortTypes]);\n  var getAutoResetSortBy = useGetLatest(autoResetSortBy);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetSortBy()) {\n      dispatch({\n        type: actions.resetSortBy\n      });\n    }\n  }, [manualSortBy ? null : data]);\n  Object.assign(instance, {\n    preSortedRows: rows,\n    sortedRows: sortedRows,\n    rows: sortedRows,\n    toggleSortBy: toggleSortBy\n  });\n}\n\nvar pluginName = 'usePagination'; // Actions\n\nactions.resetPage = 'resetPage';\nactions.gotoPage = 'gotoPage';\nactions.setPageSize = 'setPageSize';\n\nvar usePagination = function usePagination(hooks) {\n  hooks.stateReducers.push(reducer$6);\n  hooks.useInstance.push(useInstance$6);\n};\n\nusePagination.pluginName = pluginName;\n\nfunction reducer$6(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      pageSize: 10,\n      pageIndex: 0\n    }, state);\n  }\n\n  if (action.type === actions.resetPage) {\n    return _extends({}, state, {\n      pageIndex: instance.initialState.pageIndex || 0\n    });\n  }\n\n  if (action.type === actions.gotoPage) {\n    var pageCount = instance.pageCount;\n    var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state;\n    }\n\n    return _extends({}, state, {\n      pageIndex: newPageIndex\n    });\n  }\n\n  if (action.type === actions.setPageSize) {\n    var pageSize = action.pageSize;\n    var topRowIndex = state.pageSize * state.pageIndex;\n    var pageIndex = Math.floor(topRowIndex / pageSize);\n    return _extends({}, state, {\n      pageIndex: pageIndex,\n      pageSize: pageSize\n    });\n  }\n}\n\nfunction useInstance$6(instance) {\n  var rows = instance.rows,\n      _instance$autoResetPa = instance.autoResetPage,\n      autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      plugins = instance.plugins,\n      userPageCount = instance.pageCount,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      _instance$state = instance.state,\n      pageSize = _instance$state.pageSize,\n      pageIndex = _instance$state.pageIndex,\n      expanded = _instance$state.expanded,\n      filters = _instance$state.filters,\n      groupBy = _instance$state.groupBy,\n      sortBy = _instance$state.sortBy,\n      dispatch = instance.dispatch,\n      data = instance.data,\n      manualPagination = instance.manualPagination,\n      manualFilters = instance.manualFilters,\n      manualGroupBy = instance.manualGroupBy,\n      manualSortBy = instance.manualSortBy;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination', []);\n  var getAutoResetPage = useGetLatest(autoResetPage);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetPage()) {\n      dispatch({\n        type: actions.resetPage\n      });\n    }\n  }, [dispatch, manualPagination ? null : data, manualPagination || manualFilters ? null : filters, manualPagination || manualGroupBy ? null : groupBy, manualPagination || manualSortBy ? null : sortBy]);\n  var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n  var pageOptions = React.useMemo(function () {\n    return pageCount > 0 ? [].concat(new Array(pageCount)).map(function (d, i) {\n      return i;\n    }) : [];\n  }, [pageCount]);\n  var page = React.useMemo(function () {\n    var page;\n\n    if (manualPagination) {\n      page = rows;\n    } else {\n      var pageStart = pageSize * pageIndex;\n      var pageEnd = pageStart + pageSize;\n      page = rows.slice(pageStart, pageEnd);\n    }\n\n    if (paginateExpandedRows) {\n      return page;\n    }\n\n    return expandRows(page, {\n      manualExpandedKey: manualExpandedKey,\n      expanded: expanded,\n      expandSubRows: expandSubRows\n    });\n  }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n  var canPreviousPage = pageIndex > 0;\n  var canNextPage = pageCount === -1 || pageIndex < pageCount - 1;\n  var gotoPage = React.useCallback(function (pageIndex) {\n    dispatch({\n      type: actions.gotoPage,\n      pageIndex: pageIndex\n    });\n  }, [dispatch]);\n  var previousPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old - 1;\n    });\n  }, [gotoPage]);\n  var nextPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old + 1;\n    });\n  }, [gotoPage]);\n  var setPageSize = React.useCallback(function (pageSize) {\n    dispatch({\n      type: actions.setPageSize,\n      pageSize: pageSize\n    });\n  }, [dispatch]);\n  Object.assign(instance, {\n    pageOptions: pageOptions,\n    pageCount: pageCount,\n    page: page,\n    canPreviousPage: canPreviousPage,\n    canNextPage: canNextPage,\n    gotoPage: gotoPage,\n    previousPage: previousPage,\n    nextPage: nextPage,\n    setPageSize: setPageSize\n  });\n}\n\nvar pluginName$1 = 'useRowSelect'; // Actions\n\nactions.resetSelectedRows = 'resetSelectedRows';\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected';\nactions.toggleRowSelected = 'toggleRowSelected';\n\nvar useRowSelect = function useRowSelect(hooks) {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n  hooks.stateReducers.push(reducer$7);\n  hooks.useRows.push(useRows);\n  hooks.useInstance.push(useInstance$7);\n};\n\nuseRowSelect.pluginName = pluginName$1;\n\nvar defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {\n  var instance = _ref.instance,\n      row = _ref.row;\n  var _instance$manualRowSe = instance.manualRowSelectedKey,\n      manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;\n  var checked = false;\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true;\n  } else {\n    checked = row.isSelected;\n  }\n\n  return [props, {\n    onChange: function onChange(e) {\n      row.toggleRowSelected(e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: checked,\n    title: 'Toggle Row Selected',\n    indeterminate: row.isSomeSelected\n  }];\n};\n\nvar defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {\n  var instance = _ref2.instance;\n  return [props, {\n    onChange: function onChange(e) {\n      instance.toggleAllRowsSelected(e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)\n  }];\n};\n\nfunction reducer$7(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      selectedRowIds: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return _extends({}, state, {\n      selectedRowIds: instance.initialState.selectedRowIds || {}\n    });\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    var selected = action.selected;\n    var isAllRowsSelected = instance.isAllRowsSelected,\n        flatRowsById = instance.flatRowsById;\n    var selectAll = typeof selected !== 'undefined' ? selected : !isAllRowsSelected;\n\n    if (selectAll) {\n      var selectedRowIds = {};\n      Object.keys(flatRowsById).forEach(function (rowId) {\n        selectedRowIds[rowId] = true;\n      });\n      return _extends({}, state, {\n        selectedRowIds: selectedRowIds\n      });\n    }\n\n    return _extends({}, state, {\n      selectedRowIds: {}\n    });\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    var id = action.id,\n        _selected = action.selected;\n    var flatGroupedRowsById = instance.flatGroupedRowsById; // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n\n    var row = flatGroupedRowsById[id];\n    var isSelected = row.isSelected;\n    var shouldExist = typeof _selected !== 'undefined' ? _selected : !isSelected;\n\n    if (isSelected === shouldExist) {\n      return state;\n    }\n\n    var newSelectedRowIds = _extends({}, state.selectedRowIds);\n\n    var handleRowById = function handleRowById(id) {\n      var row = flatGroupedRowsById[id];\n\n      if (!row.isGrouped) {\n        if (!isSelected && shouldExist) {\n          newSelectedRowIds[id] = true;\n        } else if (isSelected && !shouldExist) {\n          delete newSelectedRowIds[id];\n        }\n      }\n\n      if (row.subRows) {\n        return row.subRows.forEach(function (row) {\n          return handleRowById(row.id);\n        });\n      }\n    };\n\n    handleRowById(id);\n    return _extends({}, state, {\n      selectedRowIds: newSelectedRowIds\n    });\n  }\n}\n\nfunction useRows(rows, _ref3) {\n  var instance = _ref3.instance;\n  var selectedRowIds = instance.state.selectedRowIds;\n  instance.selectedFlatRows = React.useMemo(function () {\n    var selectedFlatRows = [];\n    rows.forEach(function (row) {\n      var isSelected = getRowIsSelected(row, selectedRowIds);\n      row.isSelected = !!isSelected;\n      row.isSomeSelected = isSelected === null;\n\n      if (isSelected) {\n        selectedFlatRows.push(row);\n      }\n    });\n    return selectedFlatRows;\n  }, [rows, selectedRowIds]);\n  return rows;\n}\n\nfunction useInstance$7(instance) {\n  var data = instance.data,\n      hooks = instance.hooks,\n      plugins = instance.plugins,\n      flatRows = instance.flatRows,\n      _instance$autoResetSe = instance.autoResetSelectedRows,\n      autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe,\n      selectedRowIds = instance.state.selectedRowIds,\n      dispatch = instance.dispatch;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy'], 'useRowSelect', []);\n\n  var _React$useMemo = React.useMemo(function () {\n    var all = {};\n    var grouped = {};\n    flatRows.forEach(function (row) {\n      if (!row.isGrouped) {\n        all[row.id] = row;\n      }\n\n      grouped[row.id] = row;\n    });\n    return [all, grouped];\n  }, [flatRows]),\n      flatRowsById = _React$useMemo[0],\n      flatGroupedRowsById = _React$useMemo[1];\n\n  var isAllRowsSelected = Boolean(Object.keys(flatRowsById).length && Object.keys(selectedRowIds).length);\n\n  if (isAllRowsSelected) {\n    if (Object.keys(flatRowsById).some(function (id) {\n      return !selectedRowIds[id];\n    })) {\n      isAllRowsSelected = false;\n    }\n  }\n\n  var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetSelectedRows()) {\n      dispatch({\n        type: actions.resetSelectedRows\n      });\n    }\n  }, [dispatch, data]);\n\n  var toggleAllRowsSelected = function toggleAllRowsSelected(selected) {\n    return dispatch({\n      type: actions.toggleAllRowsSelected,\n      selected: selected\n    });\n  };\n\n  var toggleRowSelected = function toggleRowSelected(id, selected) {\n    return dispatch({\n      type: actions.toggleRowSelected,\n      id: id,\n      selected: selected\n    });\n  };\n\n  var getInstance = useGetLatest(instance);\n  var getToggleAllRowsSelectedPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getToggleAllRowsSelectedProps');\n  var getToggleAllRowsSelectedProps = makePropGetter(getToggleAllRowsSelectedPropsHooks(), {\n    instance: getInstance()\n  });\n  var getToggleRowSelectedPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getToggleRowSelectedProps');\n  hooks.prepareRow.push(function (row) {\n    row.toggleRowSelected = function (set) {\n      return toggleRowSelected(row.id, set);\n    };\n\n    row.getToggleRowSelectedProps = makePropGetter(getToggleRowSelectedPropsHooks(), {\n      instance: getInstance(),\n      row: row\n    });\n  });\n  Object.assign(instance, {\n    flatRowsById: flatRowsById,\n    flatGroupedRowsById: flatGroupedRowsById,\n    toggleRowSelected: toggleRowSelected,\n    toggleAllRowsSelected: toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,\n    isAllRowsSelected: isAllRowsSelected\n  });\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true;\n  }\n\n  if (row.subRows && row.subRows.length) {\n    var allChildrenSelected = true;\n    var someSelected = false;\n    row.subRows.forEach(function (subRow) {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? true : someSelected ? null : false;\n  }\n\n  return false;\n}\n\nactions.setRowState = 'setRowState';\nactions.resetRowState = 'resetRowState';\n\nvar useRowState = function useRowState(hooks) {\n  hooks.stateReducers.push(reducer$8);\n  hooks.useInstance.push(useInstance$8);\n};\n\nuseRowState.pluginName = 'useRowState';\n\nfunction reducer$8(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      rowState: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetRowState) {\n    return _extends({}, state, {\n      rowState: instance.initialState.rowState || {}\n    });\n  }\n\n  if (action.type === actions.setRowState) {\n    var _extends2;\n\n    var id = action.id,\n        value = action.value;\n    return _extends({}, state, {\n      rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[id] = functionalUpdate(value, state.rowState[id] || {}), _extends2))\n    });\n  }\n}\n\nfunction useInstance$8(instance) {\n  var hooks = instance.hooks,\n      initialRowStateAccessor = instance.initialRowStateAccessor,\n      _instance$autoResetRo = instance.autoResetRowState,\n      autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo,\n      rowState = instance.state.rowState,\n      data = instance.data,\n      dispatch = instance.dispatch;\n  var setRowState = React.useCallback(function (id, value, columnId) {\n    return dispatch({\n      type: actions.setRowState,\n      id: id,\n      value: value,\n      columnId: columnId\n    });\n  }, [dispatch]);\n  var setCellState = React.useCallback(function (rowPath, columnId, value) {\n    return setRowState(rowPath, function (old) {\n      var _extends3;\n\n      return _extends({}, old, {\n        cellState: _extends({}, old.cellState, (_extends3 = {}, _extends3[columnId] = functionalUpdate(value, (old.cellState || {})[columnId] || {}), _extends3))\n      });\n    }, columnId);\n  }, [setRowState]);\n  hooks.prepareRow.push(function (row) {\n    if (row.original) {\n      row.state = (typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor && initialRowStateAccessor(row)) || {};\n\n      row.setState = function (updater) {\n        return setRowState(row.id, updater);\n      };\n\n      row.cells.forEach(function (cell) {\n        cell.state = row.state.cellState || {};\n\n        cell.setState = function (updater) {\n          return setCellState(row.id, cell.column.id, updater);\n        };\n      });\n    }\n  });\n  var getAutoResetRowState = useGetLatest(autoResetRowState);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetRowState()) {\n      dispatch({\n        type: actions.resetRowState\n      });\n    }\n  }, [data]);\n  Object.assign(instance, {\n    setRowState: setRowState,\n    setCellState: setCellState\n  });\n}\n\nactions.resetColumnOrder = 'resetColumnOrder';\nactions.setColumnOrder = 'setColumnOrder';\n\nvar useColumnOrder = function useColumnOrder(hooks) {\n  hooks.stateReducers.push(reducer$9);\n  hooks.flatColumnsDeps.push(function (deps, _ref) {\n    var instance = _ref.instance;\n    return [].concat(deps, [instance.state.columnOrder]);\n  });\n  hooks.flatColumns.push(flatColumns$1);\n  hooks.useInstance.push(useInstance$9);\n};\n\nuseColumnOrder.pluginName = 'useColumnOrder';\n\nfunction reducer$9(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      columnOrder: []\n    }, state);\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return _extends({}, state, {\n      columnOrder: instance.initialState.columnOrder || []\n    });\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return _extends({}, state, {\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n    });\n  }\n}\n\nfunction flatColumns$1(columns, _ref2) {\n  var columnOrder = _ref2.instance.state.columnOrder; // If there is no order, return the normal columns\n\n  if (!columnOrder || !columnOrder.length) {\n    return columns;\n  }\n\n  var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns\n\n  var columnsCopy = [].concat(columns); // And make a new ordered array of the columns\n\n  var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n  var _loop = function _loop() {\n    var targetColumnId = columnOrderCopy.shift();\n    var foundIndex = columnsCopy.findIndex(function (d) {\n      return d.id === targetColumnId;\n    });\n\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n    }\n  };\n\n  while (columnsCopy.length && columnOrderCopy.length) {\n    _loop();\n  } // If there are any columns left, add them to the end\n\n\n  return [].concat(columnsInOrder, columnsCopy);\n}\n\nfunction useInstance$9(instance) {\n  var dispatch = instance.dispatch;\n  instance.setColumnOrder = React.useCallback(function (columnOrder) {\n    return dispatch({\n      type: actions.setColumnOrder,\n      columnOrder: columnOrder\n    });\n  }, [dispatch]);\n}\n\ndefaultColumn.canResize = true; // Actions\n\nactions.columnStartResizing = 'columnStartResizing';\nactions.columnResizing = 'columnResizing';\nactions.columnDoneResizing = 'columnDoneResizing';\n\nvar useResizeColumns = function useResizeColumns(hooks) {\n  hooks.getResizerProps = [defaultGetResizerProps];\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative'\n    }\n  });\n  hooks.stateReducers.push(reducer$a);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);\n};\n\nvar defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {\n  var instance = _ref.instance,\n      header = _ref.header;\n  var dispatch = instance.dispatch;\n\n  var onResizeStart = function onResizeStart(e, header) {\n    var isTouchEvent = false;\n\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return;\n      }\n\n      isTouchEvent = true;\n    }\n\n    var headersToResize = getLeafHeaders(header);\n    var headerIdWidths = headersToResize.map(function (d) {\n      return [d.id, d.totalWidth];\n    });\n    var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n\n    var dispatchMove = function dispatchMove(clientXPos) {\n      dispatch({\n        type: actions.columnResizing,\n        clientX: clientXPos\n      });\n    };\n\n    var dispatchEnd = function dispatchEnd() {\n      return dispatch({\n        type: actions.columnDoneResizing\n      });\n    };\n\n    var handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: function moveHandler(e) {\n          return dispatchMove(e.clientX);\n        },\n        upEvent: 'mouseup',\n        upHandler: function upHandler(e) {\n          document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);\n          document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);\n          dispatchEnd();\n        }\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: function moveHandler(e) {\n          if (e.cancelable) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n\n          dispatchMove(e.touches[0].clientX);\n          return false;\n        },\n        upEvent: 'touchend',\n        upHandler: function upHandler(e) {\n          document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);\n          document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);\n          dispatchEnd();\n        }\n      }\n    };\n    var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false\n    });\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false\n    });\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths: headerIdWidths,\n      clientX: clientX\n    });\n  };\n\n  return [props, {\n    onMouseDown: function onMouseDown(e) {\n      return e.persist() || onResizeStart(e, header);\n    },\n    onTouchStart: function onTouchStart(e) {\n      return e.persist() || onResizeStart(e, header);\n    },\n    style: {\n      cursor: 'ew-resize'\n    },\n    draggable: false\n  }];\n};\n\nuseResizeColumns.pluginName = 'useResizeColumns';\n\nfunction reducer$a(state, action) {\n  if (action.type === actions.init) {\n    return _extends({\n      columnResizing: {\n        columnWidths: {}\n      }\n    }, state);\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    var clientX = action.clientX,\n        columnId = action.columnId,\n        columnWidth = action.columnWidth,\n        headerIdWidths = action.headerIdWidths;\n    return _extends({}, state, {\n      columnResizing: _extends({}, state.columnResizing, {\n        startX: clientX,\n        headerIdWidths: headerIdWidths,\n        columnWidth: columnWidth,\n        isResizingColumn: columnId\n      })\n    });\n  }\n\n  if (action.type === actions.columnResizing) {\n    var _clientX = action.clientX;\n    var _state$columnResizing = state.columnResizing,\n        startX = _state$columnResizing.startX,\n        _columnWidth = _state$columnResizing.columnWidth,\n        _headerIdWidths = _state$columnResizing.headerIdWidths;\n    var deltaX = _clientX - startX;\n    var percentageDeltaX = deltaX / _columnWidth;\n    var newColumnWidths = {};\n\n    _headerIdWidths.forEach(function (_ref2) {\n      var headerId = _ref2[0],\n          headerWidth = _ref2[1];\n      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n    });\n\n    return _extends({}, state, {\n      columnResizing: _extends({}, state.columnResizing, {\n        columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)\n      })\n    });\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return _extends({}, state, {\n      columnResizing: _extends({}, state.columnResizing, {\n        startX: null,\n        isResizingColumn: null\n      })\n    });\n  }\n}\n\nvar useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {\n  var flatHeaders = instance.flatHeaders,\n      disableResizing = instance.disableResizing,\n      columnResizing = instance.state.columnResizing;\n  var getInstance = useGetLatest(instance);\n  var getResizerPropsHooks = useConsumeHookGetter(getInstance().hooks, 'getResizerProps');\n  flatHeaders.forEach(function (header) {\n    var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n    header.canResize = canResize;\n    header.width = columnResizing.columnWidths[header.id] || header.width;\n    header.isResizing = columnResizing.isResizingColumn === header.id;\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getResizerPropsHooks(), {\n        instance: getInstance(),\n        header: header\n      });\n    }\n  });\n};\n\nfunction getLeafHeaders(header) {\n  var leafHeaders = [];\n\n  var recurseHeader = function recurseHeader(header) {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader);\n    }\n\n    leafHeaders.push(header);\n  };\n\n  recurseHeader(header);\n  return leafHeaders;\n}\n\nvar cellStyles = {\n  position: 'absolute',\n  top: 0\n};\n\nvar useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n  hooks.getTableBodyProps.push(getRowStyles);\n  hooks.getRowProps.push(getRowStyles);\n  hooks.getHeaderGroupProps.push(getRowStyles);\n  hooks.useInstance.push(useInstance$a);\n  hooks.getHeaderProps.push(function (props, _ref) {\n    var column = _ref.column;\n    return [props, {\n      style: _extends({}, cellStyles, {\n        left: column.totalLeft + \"px\",\n        width: column.totalWidth + \"px\"\n      })\n    }];\n  });\n  hooks.getCellProps.push(function (props, _ref2) {\n    var cell = _ref2.cell;\n    return [props, {\n      style: _extends({}, cellStyles, {\n        left: cell.column.totalLeft + \"px\",\n        width: cell.column.totalWidth + \"px\"\n      })\n    }];\n  });\n};\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n\nvar getRowStyles = function getRowStyles(props, _ref3) {\n  var instance = _ref3.instance;\n  return [props, {\n    style: {\n      position: 'relative',\n      width: instance.totalColumnsWidth + \"px\"\n    }\n  }];\n};\n\nfunction useInstance$a(_ref4) {\n  var plugins = _ref4.plugins;\n  ensurePluginOrder(plugins, [], useAbsoluteLayout.pluginName, ['useResizeColumns']);\n}\n\nvar cellStyles$1 = {\n  display: 'inline-block',\n  boxSizing: 'border-box'\n};\n\nvar getRowStyles$1 = function getRowStyles(props, _ref) {\n  var instance = _ref.instance;\n  return [props, {\n    style: {\n      display: 'flex',\n      width: instance.totalColumnsWidth + \"px\"\n    }\n  }];\n};\n\nvar useBlockLayout = function useBlockLayout(hooks) {\n  hooks.getRowProps.push(getRowStyles$1);\n  hooks.getHeaderGroupProps.push(getRowStyles$1);\n  hooks.getHeaderProps.push(function (props, _ref2) {\n    var column = _ref2.column;\n    return [props, {\n      style: _extends({}, cellStyles$1, {\n        width: column.totalWidth + \"px\"\n      })\n    }];\n  });\n  hooks.getCellProps.push(function (props, _ref3) {\n    var cell = _ref3.cell;\n    return [props, {\n      style: _extends({}, cellStyles$1, {\n        width: cell.column.totalWidth + \"px\"\n      })\n    }];\n  });\n};\n\nuseBlockLayout.pluginName = 'useBlockLayout';\n\nfunction useFlexLayout(hooks) {\n  hooks.getTableBodyProps.push(getTableBodyProps);\n  hooks.getRowProps.push(getRowStyles$2);\n  hooks.getHeaderGroupProps.push(getRowStyles$2);\n  hooks.getHeaderProps.push(getHeaderProps);\n  hooks.getCellProps.push(getCellProps);\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout';\n\nvar getTableBodyProps = function getTableBodyProps(props, _ref) {\n  var instance = _ref.instance;\n  return [props, {\n    style: {\n      minWidth: instance.totalColumnsWidth + \"px\"\n    }\n  }];\n};\n\nvar getRowStyles$2 = function getRowStyles(props, _ref2) {\n  var instance = _ref2.instance;\n  return [props, {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: instance.totalColumnsMinWidth + \"px\"\n    }\n  }];\n};\n\nvar getHeaderProps = function getHeaderProps(props, _ref3) {\n  var column = _ref3.column;\n  return [props, {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalWidth + \" 0 auto\",\n      minWidth: column.totalMinWidth + \"px\",\n      width: column.totalWidth + \"px\"\n    }\n  }];\n};\n\nvar getCellProps = function getCellProps(props, _ref4) {\n  var cell = _ref4.cell;\n  return [props, {\n    style: {\n      boxSizing: 'border-box',\n      flex: cell.column.totalWidth + \" 0 auto\",\n      minWidth: cell.column.totalMinWidth + \"px\",\n      width: cell.column.totalWidth + \"px\"\n    }\n  }];\n};\n\nexport { actions, defaultColumn, defaultGroupByFn, defaultOrderByFn, ensurePluginOrder, flexRender, functionalUpdate, loopHooks, makePropGetter, makeRenderer, reduceHooks, safeUseLayoutEffect, useAbsoluteLayout, useAsyncDebounce, useBlockLayout, useColumnOrder, useConsumeHookGetter, useExpanded, useFilters, useFlexLayout, useGetLatest, useGlobalFilter, useGroupBy, useMountedLayoutEffect, usePagination, useResizeColumns, useRowSelect, useRowState, useSortBy, useTable };","map":{"version":3,"sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"names":["renderErr","actions","init","defaultColumn","Cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","i","funcs","sortFn","desc","dirs","sortInt","rowA","rowB","resKey","row","prev","Array","propList","style","className","rest","next","props","handlePropGetter","userProps","mergeProps","makePropGetter","meta","reduceHooks","nextValue","process","console","loopHooks","hook","pluginIndex","plugin","befores","beforeIndex","afters","afterIndex","updater","ref","React","safeUseLayoutEffect","mountedRef","fn","defaultWait","debounceRef","debounce","wait","clearTimeout","setTimeout","getter","useGetLatest","hooks","Comp","column","flexRender","isReactComponent","proto","Object","component","isClassComponent","isFunctionComponent","isExoticComponent","id","accessor","Header","accessorPath","getBy","Footer","parent","depth","index","decorateColumn","decorateColumnTree","headerGroups","buildGroup","headerGroup","headers","parentColumns","hasParents","col","columns","isFirst","latestParentColumn","similarParentColumns","d","originalId","placeholderColumn","placeholderOf","sum","header","pathObjCache","cacheKey","JSON","pathObj","makePathArray","val","cursor","args","flatColumns","recurse","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","rows","isFunction","userFilterTypes","filterTypes","autoRemove","reOpenBracket","reCloseBracket","String","newArr","arr","flattenDeep","defaultCells","defaultGetHeaderProps","key","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","useOptions","stateReducers","useControlledState","columnsDeps","flatColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","useRows","cells","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","useColumnVisibility","instance","defaultGetToggleHiddenProps","onChange","e","checked","title","defaultGetToggleHideAllColumnsProps","indeterminate","length","action","hiddenColumns","should","state","functionalUpdate","shouldAll","isMountedRef","handleColumn","parentVisible","flatHeaders","dispatch","getInstance","allColumnsHidden","toggleHideColumn","type","columnId","setHiddenColumns","toggleHideAllColumns","getToggleHideAllColumnsPropsHooks","useConsumeHookGetter","getToggleHideAllColumnsProps","getToggleHiddenPropsHooks","defaultInitialState","defaultColumnInstance","defaultReducer","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","initialState","getSubRows","getRowId","stateReducer","useTable","plugins","applyDefaults","instanceRef","makeDefaultPluginHooks","getUseOptionsHooks","data","userColumns","getStateReducers","getStateReducer","reducer","handler","reducerState","getUseControlledStateHooks","getColumnsHooks","getColumnsDepsHooks","flattenBy","flatRows","accessRow","original","subRows","unpreparedAccessWarning","accessedData","flatColumnsHooks","flatColumnsDepsHooks","getHeaderGroups","getHeaderGroupsDeps","makeHeaderGroups","getUseInstanceBeforeDimensions","totalColumnsMinWidth","totalColumnsWidth","totalColumnsMaxWidth","calculateHeaderWidths","getUseInstance","getHeaderPropsHooks","getFooterPropsHooks","makeRenderer","getHeaderGroupPropsHooks","getFooterGroupPropsHooks","getUseRowsHooks","getPrepareRowHooks","getRowPropsHooks","getCellPropsHooks","cellsHooks","getTablePropsHooks","getTableBodyPropsHooks","getUseFinalInstanceHooks","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","subHeaders","totalMinWidth","totalWidth","totalMaxWidth","Math","useExpanded","defaultGetExpandedToggleProps","onClick","setExpanded","exists","shouldExist","_","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","useMountedLayoutEffect","resetExpanded","toggleExpanded","getExpandedTogglePropsHooks","expandRows","expandedDepth","findExpandedDepth","preExpandedRows","maxDepth","splitId","text","rowValue","exactText","exactTextCase","includes","filterValue","includesAll","exact","equals","between","min","max","temp","useFilters","filters","filterMethod","getFilterMethod","previousfilter","newFilter","shouldAutoRemoveFilter","filter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","setFilter","setAllFilters","columnDefaultCanFilter","columnDisableFilters","getFirstDefined","found","filteredRows","filteredFlatRows","filterRows","nonFilteredColumns","getAutoResetFilters","resetFilters","preFilteredRows","preFilteredFlatRows","useGlobalFilter","globalFilter","undefined","stateWithoutGlobalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilters","ensurePluginOrder","setGlobalFilter","globalFilteredRows","globalFilteredFlatRows","getAutoResetGlobalFilters","resetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","values","useGroupBy","defaultGetGroupByToggleProps","groupBy","toggle","resolvedToggle","groupByColumns","nonGroupByColumns","defaultUserAggregations","groupByFn","manualGroupBy","userAggregations","autoResetGroupBy","manaulGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","columnDisableGroupBy","toggleGroupBy","getGroupByTogglePropsHooks","groupedRows","groupedFlatRows","existingGroupBy","aggregateRowsToValues","columnValues","aggregator","aggregateFn","aggregations","groupRecursively","groupByVal","parentId","isGrouped","groupByID","getAutoResetGroupBy","resetGroupBy","preGroupedRows","preGroupedFlatRow","reSplitAlphaNumeric","alphanumeric","a","getRowValueByColumnID","b","toString","aa","bb","an","parseInt","bn","combo","isNaN","compareBasic","useSortBy","defaultGetSortByToggleProps","isMultiSortEvent","sortBy","newSortBy","multi","disableMultiSort","disableSortRemove","disableMultiRemove","maxMultiSortColCount","sortDescFirst","existingSortBy","existingIndex","hasDescDefined","sortAction","orderByFn","userSortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","toggleSortBy","getSortByTogglePropsHooks","defaultColumnCanSort","columnDisableSortBy","canSort","columnSort","sortedRows","availableSortBy","sort","sortData","sortedData","sortType","sortMethod","sortTypes","getAutoResetSortBy","resetSortBy","preSortedRows","pluginName","usePagination","pageSize","pageIndex","pageCount","newPageIndex","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","resetPage","pageOptions","page","pageStart","pageEnd","canPreviousPage","canNextPage","gotoPage","previousPage","old","nextPage","setPageSize","useRowSelect","defaultGetToggleRowSelectedProps","manualRowSelectedKey","isSomeSelected","defaultGetToggleAllRowsSelectedProps","Boolean","selectedRowIds","selected","isAllRowsSelected","flatRowsById","selectAll","flatGroupedRowsById","isSelected","newSelectedRowIds","handleRowById","selectedFlatRows","getRowIsSelected","autoResetSelectedRows","all","grouped","getAutoResetSelectedRows","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","getToggleAllRowsSelectedPropsHooks","getToggleAllRowsSelectedProps","getToggleRowSelectedPropsHooks","allChildrenSelected","someSelected","useRowState","rowState","initialRowStateAccessor","autoResetRowState","setRowState","setCellState","cellState","getAutoResetRowState","resetRowState","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","useResizeColumns","position","defaultGetResizerProps","onResizeStart","isTouchEvent","headersToResize","getLeafHeaders","headerIdWidths","clientX","dispatchMove","clientXPos","dispatchEnd","columnDoneResizing","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","document","touch","events","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnResizing","columnWidths","startX","isResizingColumn","deltaX","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","getResizerPropsHooks","canResize","leafHeaders","recurseHeader","cellStyles","top","useAbsoluteLayout","getRowStyles","display","boxSizing","useBlockLayout","useFlexLayout","flex"],"mappings":"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","sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n\n  afters.forEach(after => {\n    const afterIndex = plugins.findIndex(plugin => plugin.pluginName === after)\n    if (process.env.NODE_ENV !== 'production') {\n      if (afterIndex > -1 && afterIndex < pluginIndex) {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed before the ${after} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n  debounceRef.current.defaultFn = defaultFn\n  debounceRef.current.defaultWait = defaultWait\n\n  const debounce = React.useCallback(\n    async (\n      fn = debounceRef.current.defaultFn,\n      wait = debounceRef.current.defaultWait\n    ) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await fn())\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, wait)\n\n      return debounceRef.current.promise\n    },\n    []\n  )\n\n  return debounce\n}\n\nexport function useConsumeHookGetter(hooks, hookName) {\n  const getter = useGetLatest(hooks[hookName])\n  hooks[hookName] = undefined\n  return getter\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    isFunctionComponent(component) ||\n    isExoticComponent(component)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\nexport * from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\nfunction decorateColumn(column, userDefaultColumn, parent, depth, index) {\n  // Apply the userDefaultColumn\n  column = { ...defaultColumn, ...userDefaultColumn, ...column }\n\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  column = {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...column,\n    // Materialize and override this stuff\n    id,\n    accessor,\n    parent,\n    depth,\n    index,\n  }\n\n  return column\n}\n\n// Build the visible columns, headers and flat column list\nexport function decorateColumnTree(columns, defaultColumn, parent, depth = 0) {\n  return columns.map((column, columnIndex) => {\n    column = decorateColumn(column, defaultColumn, parent, depth, columnIndex)\n    if (column.columns) {\n      column.columns = decorateColumnTree(\n        column.columns,\n        defaultColumn,\n        column,\n        depth + 1\n      )\n    }\n    return column\n  })\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(flatColumns, defaultColumn) {\n  const headerGroups = []\n\n  // Build each header group from the bottom up\n  const buildGroup = (columns, depth) => {\n    const headerGroup = {\n      headers: [],\n    }\n\n    const parentColumns = []\n\n    // Do any of these columns have parents?\n    const hasParents = columns.some(col => col.parent)\n\n    columns.forEach(column => {\n      // Are we the first column in this group?\n      const isFirst = !parentColumns.length\n\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      // If the column has a parent, add it if necessary\n      if (column.parent) {\n        const similarParentColumns = parentColumns.filter(\n          d => d.originalId === column.parent.id\n        )\n        if (isFirst || latestParentColumn.originalId !== column.parent.id) {\n          parentColumns.push({\n            ...column.parent,\n            originalId: column.parent.id,\n            id: [column.parent.id, similarParentColumns.length].join('_'),\n          })\n        }\n      } else if (hasParents) {\n        // If other columns have parents, we'll need to add a place holder if necessary\n        const originalId = [column.id, 'placeholder'].join('_')\n        const similarParentColumns = parentColumns.filter(\n          d => d.originalId === originalId\n        )\n        const placeholderColumn = decorateColumn(\n          {\n            originalId,\n            id: [column.id, 'placeholder', similarParentColumns.length].join(\n              '_'\n            ),\n            placeholderOf: column,\n          },\n          defaultColumn\n        )\n        if (\n          isFirst ||\n          latestParentColumn.originalId !== placeholderColumn.originalId\n        ) {\n          parentColumns.push(placeholderColumn)\n        }\n      }\n\n      // Establish the new headers[] relationship on the parent\n      if (column.parent || hasParents) {\n        latestParentColumn = [...parentColumns].reverse()[0]\n        latestParentColumn.headers = latestParentColumn.headers || []\n        if (!latestParentColumn.headers.includes(column)) {\n          latestParentColumn.headers.push(column)\n        }\n      }\n\n      column.totalHeaderCount = column.headers\n        ? column.headers.reduce(\n            (sum, header) => sum + header.totalHeaderCount,\n            0\n          )\n        : 1 // Leaf node columns take up at least one count\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (parentColumns.length) {\n      buildGroup(parentColumns, depth + 1)\n    }\n  }\n\n  buildGroup(flatColumns, 0)\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(columns, childKey) {\n  const flatColumns = []\n\n  const recurse = columns => {\n    columns.forEach(d => {\n      if (!d[childKey]) {\n        flatColumns.push(d)\n      } else {\n        recurse(d[childKey])\n      }\n    })\n  }\n\n  recurse(columns)\n\n  return flatColumns\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value) {\n  return autoRemove ? autoRemove(value) : typeof value === 'undefined'\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultCells = cell => cell.filter(d => d.column.isVisible)\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  ...props,\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    flatColumns: [],\n    flatColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    useRows: [],\n    cells: [defaultCells],\n    prepareRow: [],\n    getTableProps: [],\n    getTableBodyProps: [],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  useConsumeHookGetter,\n  makePropGetter,\n} from '../utils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.flatColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    flatHeaders,\n    dispatch,\n    flatColumns,\n    state: { hiddenColumns },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = flatColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getToggleHideAllColumnsPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getToggleHideAllColumnsProps'\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getToggleHideAllColumnsPropsHooks(),\n    { instance: getInstance() }\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getToggleHiddenPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getToggleHiddenProps'\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(getToggleHiddenPropsHooks(), {\n      instance: getInstance(),\n      column,\n    })\n  })\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\nimport {\n  actions,\n  reduceHooks,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n  decorateColumnTree,\n  makeHeaderGroups,\n  flattenBy,\n  useGetLatest,\n  useConsumeHookGetter,\n} from '../utils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  const getUseOptionsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'useOptions'\n  )\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getUseOptionsHooks(), applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Snapshot hook and disallow more from being added\n  const getStateReducers = useConsumeHookGetter(\n    getInstance().hooks,\n    'stateReducers'\n  )\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getStateReducers(),\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getStateReducers, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getUseControlledStateHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'useControlledState'\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getUseControlledStateHooks(), useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Snapshot hook and disallow more from being added\n  const getColumnsHooks = useConsumeHookGetter(getInstance().hooks, 'columns')\n\n  // Snapshot hook and disallow more from being added\n  const getColumnsDepsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'columnsDeps'\n  )\n\n  // Decorate All the columns\n  let columns = React.useMemo(\n    () =>\n      decorateColumnTree(\n        reduceHooks(getColumnsHooks(), userColumns, {\n          instance: getInstance(),\n        }),\n        defaultColumn\n      ),\n    [\n      defaultColumn,\n      getColumnsHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getColumnsDepsHooks(), [], { instance: getInstance() }),\n    ]\n  )\n\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let flatColumns = React.useMemo(() => flattenBy(columns, 'columns'), [\n    columns,\n  ])\n\n  getInstance().flatColumns = flatColumns\n\n  // Access the row model\n  const [rows, flatRows] = React.useMemo(() => {\n    let flatRows = []\n\n    // Access the row's data\n    const accessRow = (originalRow, i, depth = 0, parent) => {\n      // Keep the original reference around\n      const original = originalRow\n\n      const id = getRowId(originalRow, i, parent)\n\n      const row = {\n        id,\n        original,\n        index: i,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      flatRows.push(row)\n\n      // Process any subRows\n      let subRows = getSubRows(originalRow, i)\n\n      if (subRows) {\n        row.subRows = subRows.map((d, i) => accessRow(d, i, depth + 1, row))\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      const unpreparedAccessWarning = () => {\n        throw new Error(\n          'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n        )\n      }\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n      flatColumns.forEach(({ id, accessor }) => {\n        row.values[id] = accessor\n          ? accessor(originalRow, i, { subRows, depth, data })\n          : undefined\n      })\n\n      return row\n    }\n\n    // Use the resolved data\n    const accessedData = data.map((d, i) => accessRow(d, i))\n\n    return [accessedData, flatRows]\n  }, [data, flatColumns, getRowId, getSubRows])\n\n  getInstance().rows = rows\n  getInstance().flatRows = flatRows\n\n  // Snapshot hook and disallow more from being added\n  const flatColumnsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'flatColumns'\n  )\n\n  // Snapshot hook and disallow more from being added\n  const flatColumnsDepsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'flatColumnsDeps'\n  )\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  flatColumns = React.useMemo(\n    () =>\n      reduceHooks(flatColumnsHooks(), flatColumns, { instance: getInstance() }),\n    [\n      flatColumns,\n      flatColumnsHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(flatColumnsDepsHooks(), [], { instance: getInstance() }),\n    ]\n  )\n\n  getInstance().flatColumns = flatColumns\n\n  // Snapshot hook and disallow more from being added\n  const getHeaderGroups = useConsumeHookGetter(\n    getInstance().hooks,\n    'headerGroups'\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getHeaderGroupsDeps = useConsumeHookGetter(\n    getInstance().hooks,\n    'headerGroupsDeps'\n  )\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHeaderGroups(),\n        makeHeaderGroups(flatColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      defaultColumn,\n      flatColumns,\n      getHeaderGroups,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHeaderGroupsDeps(), [], { instance: getInstance() }),\n    ]\n  )\n\n  getInstance().headerGroups = headerGroups\n\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getUseInstanceBeforeDimensions = useConsumeHookGetter(\n    getInstance().hooks,\n    'useInstanceBeforeDimensions'\n  )\n\n  loopHooks(getUseInstanceBeforeDimensions(), getInstance())\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  // Snapshot hook and disallow more from being added\n  const getUseInstance = useConsumeHookGetter(\n    getInstance().hooks,\n    'useInstance'\n  )\n\n  loopHooks(getUseInstance(), getInstance())\n\n  // Snapshot hook and disallow more from being added\n  const getHeaderPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getHeaderProps'\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getFooterPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getFooterProps'\n  )\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().flatColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHeaderPropsHooks(), {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getFooterPropsHooks(), {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getHeaderGroupPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getHeaderGroupProps'\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getFooterGroupPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getFooterGroupProps'\n  )\n\n  getInstance().headerGroups = getInstance().headerGroups.filter(\n    (headerGroup, i) => {\n      // Filter out any headers and headerGroups that don't have visible columns\n      headerGroup.headers = headerGroup.headers.filter(column => {\n        const recurse = headers =>\n          headers.filter(column => {\n            if (column.headers) {\n              return recurse(column.headers)\n            }\n            return column.isVisible\n          }).length\n        if (column.headers) {\n          return recurse(column.headers)\n        }\n        return column.isVisible\n      })\n\n      // Give headerGroups getRowProps\n      if (headerGroup.headers.length) {\n        headerGroup.getHeaderGroupProps = makePropGetter(\n          getHeaderGroupPropsHooks(),\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        headerGroup.getFooterGroupProps = makePropGetter(\n          getFooterGroupPropsHooks(),\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        return true\n      }\n\n      return false\n    }\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // Run the rows (this could be a dangerous hook with a ton of data)\n\n  // Snapshot hook and disallow more from being added\n  const getUseRowsHooks = useConsumeHookGetter(getInstance().hooks, 'useRows')\n\n  getInstance().rows = reduceHooks(getUseRowsHooks(), getInstance().rows, {\n    instance: getInstance(),\n  })\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  // Snapshot hook and disallow more from being added\n  const getPrepareRowHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'prepareRow'\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getRowPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getRowProps'\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getCellPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getCellProps'\n  )\n\n  // Snapshot hook and disallow more from being added\n  const cellsHooks = useConsumeHookGetter(getInstance().hooks, 'cells')\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getRowPropsHooks(), {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = flatColumns.map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getCellPropsHooks(), {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n        })\n\n        return cell\n      })\n\n      row.cells = reduceHooks(cellsHooks(), row.allCells, {\n        instance: getInstance(),\n      })\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getPrepareRowHooks(), row, { instance: getInstance() })\n    },\n    [\n      getRowPropsHooks,\n      getInstance,\n      flatColumns,\n      cellsHooks,\n      getPrepareRowHooks,\n      getCellPropsHooks,\n    ]\n  )\n\n  // Snapshot hook and disallow more from being added\n  const getTablePropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getTableProps'\n  )\n\n  getInstance().getTableProps = makePropGetter(getTablePropsHooks(), {\n    instance: getInstance(),\n  })\n\n  // Snapshot hook and disallow more from being added\n  const getTableBodyPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getTableBodyProps'\n  )\n\n  getInstance().getTableBodyProps = makePropGetter(getTableBodyPropsHooks(), {\n    instance: getInstance(),\n  })\n\n  // Snapshot hook and disallow more from being added\n  const getUseFinalInstanceHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'useFinalInstance'\n  )\n\n  loopHooks(getUseFinalInstanceHooks(), getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [totalMinWidth, totalWidth, totalMaxWidth] = calculateHeaderWidths(\n        subHeaders,\n        left\n      )\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth]\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  expandRows,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../utils'\nimport { useConsumeHookGetter, functionalUpdate } from '../publicUtils'\n\n// Actions\nactions.toggleExpanded = 'toggleExpanded'\nactions.toggleAllExpanded = 'toggleAllExpanded'\nactions.setExpanded = 'setExpanded'\nactions.resetExpanded = 'resetExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getExpandedToggleProps = [defaultGetExpandedToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetExpandedToggleProps = (props, { row }) => [\n  props,\n  {\n    onClick: e => {\n      e.persist()\n      row.toggleExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.setExpanded) {\n    return {\n      ...state,\n      expanded: functionalUpdate(action.expanded, state.expanded),\n    }\n  }\n\n  if (action.type === actions.toggleExpanded) {\n    const { id, expanded: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    hooks,\n    autoResetExpanded = true,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleExpanded = (id, expanded) => {\n    dispatch({ type: actions.toggleExpanded, id, expanded })\n  }\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  const getExpandedTogglePropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getExpandedToggleProps'\n  )\n\n  hooks.prepareRow.push(row => {\n    row.toggleExpanded = set => instance.toggleExpanded(row.id, set)\n\n    row.getExpandedToggleProps = makePropGetter(getExpandedTogglePropsHooks(), {\n      instance: getInstance(),\n      row,\n    })\n  })\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    toggleExpanded,\n    expandedDepth,\n  })\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  actions,\n  getFirstDefined,\n  getFilterMethod,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n  shouldAutoRemoveFilter,\n} from '../utils'\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { flatColumns, userFilterTypes } = instance\n\n    const column = flatColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { flatColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = flatColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value)) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    flatColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = (columnId, filterValue) => {\n    dispatch({ type: actions.setFilter, columnId, filterValue })\n  }\n\n  const setAllFilters = filters => {\n    dispatch({\n      type: actions.setAllFilters,\n      filters,\n    })\n  }\n\n  flatColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [filteredRows, filteredFlatRows] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows]\n    }\n\n    const filteredFlatRows = []\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = flatColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows = filteredRows.map(row => {\n        filteredFlatRows.push(row)\n        if (!row.subRows) {\n          return row\n        }\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length > 0\n              ? filterRows(row.subRows, depth + 1)\n              : row.subRows,\n        }\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows]\n  }, [manualFilters, filters, rows, flatRows, flatColumns, userFilterTypes])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = flatColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, flatColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    filteredRows,\n    filteredFlatRows,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  getFilterMethod,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n  shouldAutoRemoveFilter,\n  ensurePluginOrder,\n} from '../utils'\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    flatColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilters = true,\n    plugins,\n  } = instance\n\n  ensurePluginOrder(plugins, [], 'useGlobalFilter', [\n    'useSortBy',\n    'useExpanded',\n  ])\n\n  const setGlobalFilter = filterValue => {\n    dispatch({ type: actions.setGlobalFilter, filterValue })\n  }\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [globalFilteredRows, globalFilteredFlatRows] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows]\n    }\n\n    const filteredFlatRows = []\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      return filterMethod(\n        filteredRows,\n        flatColumns.map(d => d.id),\n        globalFilterValue\n      ).map(row => {\n        filteredFlatRows.push(row)\n\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length\n              ? filterRows(row.subRows)\n              : row.subRows,\n        }\n      })\n    }\n\n    return [filterRows(rows), filteredFlatRows]\n  }, [\n    manualGlobalFilter,\n    globalFilter,\n    userFilterTypes,\n    rows,\n    flatRows,\n    flatColumns,\n    globalFilterValue,\n  ])\n\n  const getAutoResetGlobalFilters = useGetLatest(autoResetGlobalFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilters()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    setGlobalFilter,\n  })\n}\n","export function sum(values, rows) {\n  return values.reduce((sum, next) => sum + next, 0)\n}\n\nexport function average(values, rows) {\n  return Math.round((sum(values, rows) / values.length) * 100) / 100\n}\n\nexport function median(values) {\n  values = values.length ? values : [0]\n  let min = Math.min(...values)\n  let max = Math.max(...values)\n\n  return (min + max) / 2\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\nimport {\n  actions,\n  makePropGetter,\n  defaultGroupByFn,\n  getFirstDefined,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../utils'\nimport { useConsumeHookGetter } from '../publicUtils'\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.flatColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.flatColumns.push(flatColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, toggle } = action\n\n    const resolvedToggle =\n      typeof toggle !== 'undefined' ? toggle : !state.groupBy.includes(columnId)\n\n    if (resolvedToggle) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction flatColumns(\n  flatColumns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => flatColumns.find(col => col.id === g))\n    .filter(col => !!col)\n  const nonGroupByColumns = flatColumns.filter(col => !groupBy.includes(col.id))\n\n  flatColumns = [...groupByColumns, ...nonGroupByColumns]\n\n  flatColumns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return flatColumns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    flatColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    hooks,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    manaulGroupBy,\n    disableGroupBy,\n    defaultCanGroupBy,\n  } = instance\n\n  ensurePluginOrder(plugins, [], 'useGroupBy', ['useSortBy', 'useExpanded'])\n\n  const getInstance = useGetLatest(instance)\n\n  flatColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultColumnGroupBy, defaultCanGroupBy, false)\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = (columnId, toggle) => {\n    dispatch({ type: actions.toggleGroupBy, columnId, toggle })\n  }\n\n  const getGroupByTogglePropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getGroupByToggleProps'\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getGroupByTogglePropsHooks(),\n      { instance: getInstance(), header }\n    )\n  })\n\n  hooks.prepareRow.push(row => {\n    row.allCells.forEach(cell => {\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n      // Repeated cells are any columns in the groupBy that are not grouped\n      cell.isRepeatedValue = !cell.isGrouped && cell.column.isGrouped\n      // Aggregated cells are not grouped, not repeated, but still have subRows\n      cell.isAggregated =\n        !cell.isGrouped && !cell.isRepeatedValue && row.canExpand\n    })\n  })\n\n  const [groupedRows, groupedFlatRows] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [rows, flatRows]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      flatColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (rows, isAggregated) => {\n      const values = {}\n\n      flatColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = rows[0] ? rows[0].values[column.id] : null\n          return\n        }\n\n        const columnValues = rows.map(d => d.values[column.id])\n\n        let aggregator = column.aggregate\n\n        if (Array.isArray(aggregator)) {\n          if (aggregator.length !== 2) {\n            console.info({ column })\n            throw new Error(\n              `React Table: Complex aggregators must have 2 values, eg. aggregate: ['sum', 'count']. More info above...`\n            )\n          }\n          if (isAggregated) {\n            aggregator = aggregator[1]\n          } else {\n            aggregator = aggregator[0]\n          }\n        }\n\n        let aggregateFn =\n          typeof aggregator === 'function'\n            ? aggregator\n            : userAggregations[aggregator] || aggregations[aggregator]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(columnValues, rows, isAggregated)\n        } else if (aggregator) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n      return values\n    }\n\n    let groupedFlatRows = []\n\n    // Recursively group the data\n    const groupRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let groupedRows = groupByFn(rows, columnId)\n\n      // Recurse to sub rows before aggregation\n      groupedRows = Object.entries(groupedRows).map(\n        ([groupByVal, subRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          subRows = groupRecursively(subRows, depth + 1, id)\n\n          const values = aggregateRowsToValues(\n            subRows,\n            depth < existingGroupBy.length\n          )\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            depth,\n            index,\n          }\n\n          groupedFlatRows.push(row, ...subRows)\n\n          return row\n        }\n      )\n\n      return groupedRows\n    }\n\n    const groupedRows = groupRecursively(rows)\n\n    // Assign the new data\n    return [groupedRows, groupedFlatRows]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    flatColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manaulGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    groupedRows,\n    groupedFlatRows,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    toggleGroupBy,\n  })\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useConsumeHookGetter,\n  getFirstDefined,\n  defaultOrderByFn,\n  isFunction,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      flatColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = flatColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useSortBy', [])\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = (columnId, desc, multi) => {\n    dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n  }\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  const getSortByTogglePropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getSortByToggleProps'\n  )\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(getSortByTogglePropsHooks(), {\n      instance: getInstance(),\n      column,\n    })\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const sortedRows = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return rows\n    }\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      flatColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = flatColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = flatColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return sortData(rows)\n  }, [manualSortBy, sortBy, rows, flatColumns, orderByFn, userSortTypes])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    sortedRows,\n    rows: sortedRows,\n    toggleSortBy,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  expandRows,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state\n    }\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: { pageSize, pageIndex, expanded, filters, groupBy, sortBy },\n    dispatch,\n    data,\n    manualPagination,\n    manualFilters,\n    manualGroupBy,\n    manualSortBy,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination',\n    []\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    manualPagination || manualFilters ? null : filters,\n    manualPagination || manualGroupBy ? null : groupBy,\n    manualPagination || manualSortBy ? null : sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () => (pageCount > 0 ? [...new Array(pageCount)].map((d, i) => i) : []),\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n  useConsumeHookGetter,\n} from '../utils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useRows.push(useRows)\n  hooks.useInstance.push(useInstance)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { selected } = action\n    const { isAllRowsSelected, flatRowsById } = instance\n\n    const selectAll =\n      typeof selected !== 'undefined' ? selected : !isAllRowsSelected\n\n    if (selectAll) {\n      const selectedRowIds = {}\n\n      Object.keys(flatRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n\n      return {\n        ...state,\n        selectedRowIds,\n      }\n    }\n\n    return {\n      ...state,\n      selectedRowIds: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, selected } = action\n    const { flatGroupedRowsById } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = flatGroupedRowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist = typeof selected !== 'undefined' ? selected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    let newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = flatGroupedRowsById[id]\n\n      if (!row.isGrouped) {\n        if (!isSelected && shouldExist) {\n          newSelectedRowIds[id] = true\n        } else if (isSelected && !shouldExist) {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useRows(rows, { instance }) {\n  const {\n    state: { selectedRowIds },\n  } = instance\n\n  instance.selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = getRowIsSelected(row, selectedRowIds)\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectedRowIds])\n\n  return rows\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    hooks,\n    plugins,\n    flatRows,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect',\n    []\n  )\n\n  const [flatRowsById, flatGroupedRowsById] = React.useMemo(() => {\n    const all = {}\n    const grouped = {}\n\n    flatRows.forEach(row => {\n      if (!row.isGrouped) {\n        all[row.id] = row\n      }\n      grouped[row.id] = row\n    })\n\n    return [all, grouped]\n  }, [flatRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(flatRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(flatRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = selected =>\n    dispatch({ type: actions.toggleAllRowsSelected, selected })\n\n  const toggleRowSelected = (id, selected) =>\n    dispatch({ type: actions.toggleRowSelected, id, selected })\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getToggleAllRowsSelectedProps'\n  )\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getToggleAllRowsSelectedPropsHooks(),\n    { instance: getInstance() }\n  )\n\n  const getToggleRowSelectedPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getToggleRowSelectedProps'\n  )\n\n  hooks.prepareRow.push(row => {\n    row.toggleRowSelected = set => toggleRowSelected(row.id, set)\n\n    row.getToggleRowSelectedProps = makePropGetter(\n      getToggleRowSelectedPropsHooks(),\n      { instance: getInstance(), row }\n    )\n  })\n\n  Object.assign(instance, {\n    flatRowsById,\n    flatGroupedRowsById,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    isAllRowsSelected,\n  })\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../utils'\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { id, value } = action\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [id]: functionalUpdate(value, state.rowState[id] || {}),\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    hooks,\n    initialRowStateAccessor,\n    autoResetRowState = true,\n    state: { rowState },\n    data,\n    dispatch,\n  } = instance\n\n  const setRowState = React.useCallback(\n    (id, value, columnId) =>\n      dispatch({\n        type: actions.setRowState,\n        id,\n        value,\n        columnId,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowPath, columnId, value) => {\n      return setRowState(\n        rowPath,\n        old => {\n          return {\n            ...old,\n            cellState: {\n              ...old.cellState,\n              [columnId]: functionalUpdate(\n                value,\n                (old.cellState || {})[columnId] || {}\n              ),\n            },\n          }\n        },\n        columnId\n      )\n    },\n    [setRowState]\n  )\n\n  hooks.prepareRow.push(row => {\n    if (row.original) {\n      row.state =\n        (typeof rowState[row.id] !== 'undefined'\n          ? rowState[row.id]\n          : initialRowStateAccessor && initialRowStateAccessor(row)) || {}\n\n      row.setState = updater => {\n        return setRowState(row.id, updater)\n      }\n\n      row.cells.forEach(cell => {\n        cell.state = row.state.cellState || {}\n\n        cell.setState = updater => {\n          return setCellState(row.id, cell.column.id, updater)\n        }\n      })\n    }\n  })\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../utils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.flatColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.flatColumns.push(flatColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction flatColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  getFirstDefined,\n  makePropGetter,\n  useGetLatest,\n} from '../utils'\nimport { useConsumeHookGetter } from '../publicUtils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const getResizerPropsHooks = useConsumeHookGetter(\n    getInstance().hooks,\n    'getResizerProps'\n  )\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getResizerPropsHooks(), {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","import { ensurePluginOrder } from '../utils'\n\nconst cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.useInstance.push(useInstance)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, [], useAbsoluteLayout.pluginName, [\n    'useResizeColumns',\n  ])\n}\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableBodyProps.push(getTableBodyProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableBodyProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${column.totalWidth} 0 auto`,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n"]},"metadata":{},"sourceType":"module"}
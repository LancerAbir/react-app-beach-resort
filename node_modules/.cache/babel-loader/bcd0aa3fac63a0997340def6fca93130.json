{"ast":null,"code":"import React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar defaultColumn = {\n  Cell: function Cell(_ref) {\n    var _ref$cell$value = _ref.cell.value,\n        value = _ref$cell$value === void 0 ? '' : _ref$cell$value;\n    return String(value);\n  },\n  show: true,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER\n}; // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n\nvar safeUseLayoutEffect = typeof window !== 'undefined' && process.env.NODE_ENV === 'production' ? React.useLayoutEffect : React.useEffect; // Find the depth of the columns\n\nfunction findMaxDepth(columns) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return columns.reduce(function (prev, curr) {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1));\n    }\n\n    return depth;\n  }, 0);\n}\n\nfunction decorateColumn(column, userDefaultColumn, parent, depth, index) {\n  // Apply the userDefaultColumn\n  column = _objectSpread2({}, defaultColumn, {}, userDefaultColumn, {}, column); // First check for string accessor\n\n  var _column = column,\n      id = _column.id,\n      accessor = _column.accessor,\n      Header = _column.Header;\n\n  if (typeof accessor === 'string') {\n    id = id || accessor;\n    var accessorPath = accessor.split('.');\n\n    accessor = function accessor(row) {\n      return getBy(row, accessorPath);\n    };\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header;\n  }\n\n  if (!id && column.columns) {\n    console.error(column);\n    throw new Error('A column ID (or unique \"Header\" value) is required!');\n  }\n\n  if (!id) {\n    console.error(column);\n    throw new Error('A column ID (or string accessor) is required!');\n  }\n\n  column = _objectSpread2({\n    // Make sure there is a fallback header, just in case\n    Header: function Header() {\n      return React.createElement(React.Fragment, null, \"\\xA0\");\n    }\n  }, column, {\n    // Materialize and override this stuff\n    id: id,\n    accessor: accessor,\n    parent: parent,\n    depth: depth,\n    index: index\n  });\n  return column;\n} // Build the visible columns, headers and flat column list\n\n\nfunction decorateColumnTree(columns, defaultColumn, parent) {\n  var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  return columns.map(function (column, columnIndex) {\n    column = decorateColumn(column, defaultColumn, parent, depth, columnIndex);\n\n    if (column.columns) {\n      column.columns = decorateColumnTree(column.columns, defaultColumn, column, depth + 1);\n    }\n\n    return column;\n  });\n} // Build the header groups from the bottom up\n\n\nfunction makeHeaderGroups(flatColumns, defaultColumn) {\n  var headerGroups = []; // Build each header group from the bottom up\n\n  var buildGroup = function buildGroup(columns, depth) {\n    var headerGroup = {\n      headers: []\n    };\n    var parentColumns = []; // Do any of these columns have parents?\n\n    var hasParents = columns.some(function (col) {\n      return col.parent;\n    });\n    columns.forEach(function (column) {\n      // Are we the first column in this group?\n      var isFirst = !parentColumns.length; // What is the latest (last) parent column?\n\n      var latestParentColumn = [].concat(parentColumns).reverse()[0]; // If the column has a parent, add it if necessary\n\n      if (column.parent) {\n        var similarParentColumns = parentColumns.filter(function (d) {\n          return d.originalId === column.parent.id;\n        });\n\n        if (isFirst || latestParentColumn.originalId !== column.parent.id) {\n          parentColumns.push(_objectSpread2({}, column.parent, {\n            originalId: column.parent.id,\n            id: [column.parent.id, similarParentColumns.length].join('_')\n          }));\n        }\n      } else if (hasParents) {\n        // If other columns have parents, we'll need to add a place holder if necessary\n        var originalId = [column.id, 'placeholder'].join('_');\n\n        var _similarParentColumns = parentColumns.filter(function (d) {\n          return d.originalId === originalId;\n        });\n\n        var placeholderColumn = decorateColumn({\n          originalId: originalId,\n          id: [column.id, 'placeholder', _similarParentColumns.length].join('_'),\n          placeholderOf: column\n        }, defaultColumn);\n\n        if (isFirst || latestParentColumn.originalId !== placeholderColumn.originalId) {\n          parentColumns.push(placeholderColumn);\n        }\n      } // Establish the new headers[] relationship on the parent\n\n\n      if (column.parent || hasParents) {\n        latestParentColumn = [].concat(parentColumns).reverse()[0];\n        latestParentColumn.headers = latestParentColumn.headers || [];\n\n        if (!latestParentColumn.headers.includes(column)) {\n          latestParentColumn.headers.push(column);\n        }\n      }\n\n      column.totalHeaderCount = column.headers ? column.headers.reduce(function (sum, header) {\n        return sum + header.totalHeaderCount;\n      }, 0) : 1; // Leaf node columns take up at least one count\n\n      headerGroup.headers.push(column);\n    });\n    headerGroups.push(headerGroup);\n\n    if (parentColumns.length) {\n      buildGroup(parentColumns);\n    }\n  };\n\n  buildGroup(flatColumns);\n  return headerGroups.reverse();\n}\n\nfunction determineHeaderVisibility(instance) {\n  var headers = instance.headers;\n\n  var handleColumn = function handleColumn(column, parentVisible) {\n    column.isVisible = parentVisible ? typeof column.show === 'function' ? column.show(instance) : !!column.show : false;\n    var totalVisibleHeaderCount = 0;\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(function (subColumn) {\n        return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n      });\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n    return totalVisibleHeaderCount;\n  };\n\n  var totalVisibleHeaderCount = 0;\n  headers.forEach(function (subHeader) {\n    return totalVisibleHeaderCount += handleColumn(subHeader, true);\n  });\n}\n\nfunction getBy(obj, path, def) {\n  if (!path) {\n    return obj;\n  }\n\n  var pathObj = makePathArray(path);\n  var val;\n\n  try {\n    val = pathObj.reduce(function (cursor, pathPart) {\n      return cursor[pathPart];\n    }, obj);\n  } catch (e) {// continue regardless of error\n  }\n\n  return typeof val !== 'undefined' ? val : def;\n}\n\nfunction defaultOrderByFn(arr, funcs, dirs) {\n  return _toConsumableArray(arr).sort(function (rowA, rowB) {\n    for (var i = 0; i < funcs.length; i += 1) {\n      var sortFn = funcs[i];\n      var desc = dirs[i] === false || dirs[i] === 'desc';\n      var sortInt = sortFn(rowA, rowB);\n\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt;\n      }\n    }\n\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n  });\n}\n\nfunction getFirstDefined() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  for (var i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i];\n    }\n  }\n}\n\nfunction defaultGroupByFn(rows, columnId) {\n  return rows.reduce(function (prev, row, i) {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    var resKey = \"\".concat(row.values[columnId]);\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n    prev[resKey].push(row);\n    return prev;\n  }, {});\n}\n\nfunction getElementDimensions(element) {\n  var rect = element.getBoundingClientRect();\n  var style = window.getComputedStyle(element);\n  var margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight)\n  };\n  var padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight)\n  };\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(rect.width + margins.left + margins.right + padding.left + padding.right),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth\n  };\n}\n\nfunction flexRender(Comp, props) {\n  return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n}\n\nfunction isClassComponent(component) {\n  return typeof component === 'function' && !!function () {\n    var proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  }();\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function';\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component);\n}\n\nvar mergeProps = function mergeProps() {\n  var props = {};\n\n  for (var _len2 = arguments.length, groups = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    groups[_key2] = arguments[_key2];\n  }\n\n  groups.forEach(function () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$style = _ref2.style,\n        style = _ref2$style === void 0 ? {} : _ref2$style,\n        className = _ref2.className,\n        rest = _objectWithoutProperties(_ref2, [\"style\", \"className\"]);\n\n    props = _objectSpread2({}, props, {}, rest, {\n      style: _objectSpread2({}, props.style || {}, {}, style),\n      className: [props.className, className].filter(Boolean).join(' ')\n    });\n  });\n\n  if (props.className === '') {\n    delete props.className;\n  }\n\n  return props;\n};\n\nvar applyHooks = function applyHooks(hooks, initial) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n    args[_key3 - 2] = arguments[_key3];\n  }\n\n  return hooks.reduce(function (prev, next) {\n    var nextValue = next.apply(void 0, [prev].concat(args));\n\n    if (typeof nextValue === 'undefined') {\n      throw new Error('React Table: A hook just returned undefined! This is not allowed.');\n    }\n\n    return nextValue;\n  }, initial);\n};\n\nvar applyPropHooks = function applyPropHooks(hooks) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n\n  return hooks.reduce(function (prev, next) {\n    return mergeProps(prev, next.apply(void 0, args));\n  }, {});\n};\n\nvar warnUnknownProps = function warnUnknownProps(props) {\n  if (Object.keys(props).length) {\n    throw new Error(\"Unknown options passed to useReactTable:\\n\\n\".concat(JSON.stringify(props, null, 2)));\n  }\n};\n\nfunction sum(arr) {\n  return arr.reduce(function (prev, curr) {\n    return prev + curr;\n  }, 0);\n}\n\nfunction isFunction(a) {\n  if (typeof a === 'function') {\n    return a;\n  }\n}\n\nfunction flattenBy(columns, childKey) {\n  var flatColumns = [];\n\n  var recurse = function recurse(columns) {\n    columns.forEach(function (d) {\n      if (!d[childKey]) {\n        flatColumns.push(d);\n      } else {\n        recurse(d[childKey]);\n      }\n    });\n  };\n\n  recurse(columns);\n  return flatColumns;\n}\n\nfunction ensurePluginOrder(plugins, befores, pluginName, afters) {\n  var pluginIndex = plugins.findIndex(function (plugin) {\n    return plugin.pluginName === pluginName;\n  });\n\n  if (pluginIndex === -1) {\n    throw new Error(\"The plugin \".concat(pluginName, \" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \").concat(pluginName, \".pluginName = '\").concat(pluginName, \"'\\n\"));\n  }\n\n  befores.forEach(function (before) {\n    var beforeIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === before;\n    });\n\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      throw new Error(\"React Table: The \".concat(pluginName, \" plugin hook must be placed after the \").concat(before, \" plugin hook!\"));\n    }\n  });\n  afters.forEach(function (after) {\n    var afterIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === after;\n    });\n\n    if (afterIndex > -1 && afterIndex < pluginIndex) {\n      throw new Error(\"React Table: The \".concat(pluginName, \" plugin hook must be placed before the \").concat(after, \" plugin hook!\"));\n    }\n  });\n}\n\nfunction expandRows(rows, _ref3) {\n  var manualExpandedKey = _ref3.manualExpandedKey,\n      expanded = _ref3.expanded,\n      _ref3$expandSubRows = _ref3.expandSubRows,\n      expandSubRows = _ref3$expandSubRows === void 0 ? true : _ref3$expandSubRows;\n  var expandedRows = [];\n\n  var handleRow = function handleRow(row) {\n    var key = row.path.join('.');\n    row.isExpanded = row.original && row.original[manualExpandedKey] || expanded.includes(key);\n    row.canExpand = row.subRows && !!row.subRows.length;\n    expandedRows.push(row);\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rows.forEach(handleRow);\n  return expandedRows;\n}\n\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n} //\n\n\nfunction makePathArray(obj) {\n  return flattenDeep(obj) // remove all periods in parts\n  .map(function (d) {\n    return String(d).replace('.', '_');\n  }) // join parts using period\n  .join('.') // replace brackets with periods\n  .replace(/\\[/g, '.').replace(/\\]/g, '') // split it back out on periods\n  .split('.');\n}\n\nfunction flattenDeep(arr) {\n  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!Array.isArray(arr)) {\n    newArr.push(arr);\n  } else {\n    for (var i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr);\n    }\n  }\n\n  return newArr;\n}\n\nvar utils =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  defaultColumn: defaultColumn,\n  safeUseLayoutEffect: safeUseLayoutEffect,\n  findMaxDepth: findMaxDepth,\n  decorateColumn: decorateColumn,\n  decorateColumnTree: decorateColumnTree,\n  makeHeaderGroups: makeHeaderGroups,\n  determineHeaderVisibility: determineHeaderVisibility,\n  getBy: getBy,\n  defaultOrderByFn: defaultOrderByFn,\n  getFirstDefined: getFirstDefined,\n  defaultGroupByFn: defaultGroupByFn,\n  getElementDimensions: getElementDimensions,\n  flexRender: flexRender,\n  mergeProps: mergeProps,\n  applyHooks: applyHooks,\n  applyPropHooks: applyPropHooks,\n  warnUnknownProps: warnUnknownProps,\n  sum: sum,\n  isFunction: isFunction,\n  flattenBy: flattenBy,\n  ensurePluginOrder: ensurePluginOrder,\n  expandRows: expandRows,\n  functionalUpdate: functionalUpdate\n});\nvar renderErr = 'You must specify a valid render component. This could be \"column.Cell\", \"column.Header\", \"column.Filter\", \"column.Aggregated\" or any other custom renderer component.';\nvar actions = {\n  init: 'init'\n};\nvar reducerHandlers = {};\nvar defaultInitialState = {};\nvar defaultColumnInstance = {};\n\nvar defaultReducer = function defaultReducer(state, action, prevState) {\n  return state;\n};\n\nvar defaultGetSubRows = function defaultGetSubRows(row, index) {\n  return row.subRows || [];\n};\n\nvar defaultGetRowId = function defaultGetRowId(row, index) {\n  return index;\n};\n\nvar useTable = function useTable(props) {\n  // Destructure props\n  var data = props.data,\n      userColumns = props.columns,\n      _props$initialState = props.initialState,\n      initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,\n      _props$defaultColumn = props.defaultColumn,\n      defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,\n      _props$getSubRows = props.getSubRows,\n      getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,\n      _props$getRowId = props.getRowId,\n      getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,\n      _props$reducer = props.reducer,\n      userReducer = _props$reducer === void 0 ? defaultReducer : _props$reducer,\n      debug = props.debug;\n  debug = process.env.NODE_ENV === 'production' ? false : debug;\n\n  var reducer = function reducer(state, action) {\n    var nextState = Object.keys(reducerHandlers).map(function (key) {\n      return reducerHandlers[key];\n    }).reduce(function (state, handler) {\n      return handler(state, action) || state;\n    }, state);\n    nextState = userReducer(nextState, action, state);\n\n    if (process.env.NODE_ENV !== 'production' && debug) {\n      console.log('');\n      console.log('React Table Action: ', action);\n      console.log('New State: ', nextState);\n    }\n\n    return nextState;\n  }; // But use the users table state if provided\n\n\n  var _React$useReducer = React.useReducer(reducer, undefined, function () {\n    return reducer(initialState, {\n      type: actions.init\n    });\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      originalDispatch = _React$useReducer2[1]; // The table instance ref\n\n\n  var instanceRef = React.useRef({});\n  var dispatch = React.useCallback(function (action) {\n    if (!action.type) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.info({\n          action: action\n        });\n        throw new Error('Unknown Action Type! 👆');\n      }\n\n      throw new Error();\n    }\n\n    originalDispatch(_objectSpread2({}, action, {\n      instanceRef: instanceRef\n    }));\n  }, []);\n\n  for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    plugins[_key - 1] = arguments[_key];\n  }\n\n  Object.assign(instanceRef.current, _objectSpread2({}, props, {\n    data: data,\n    // The raw data\n    state: state,\n    // The state dispatcher\n    dispatch: dispatch,\n    // The resolved table state\n    plugins: plugins,\n    // All resolved plugins\n    hooks: {\n      columnsBeforeHeaderGroups: [],\n      columnsBeforeHeaderGroupsDeps: [],\n      useBeforeDimensions: [],\n      useMain: [],\n      useRows: [],\n      prepareRow: [],\n      getTableProps: [],\n      getTableBodyProps: [],\n      getRowProps: [],\n      getHeaderGroupProps: [],\n      getHeaderProps: [],\n      getCellProps: []\n    }\n  })); // Allow plugins to register hooks\n\n  if (process.env.NODE_ENV !== 'production' && debug) console.time('plugins');\n  plugins.filter(Boolean).forEach(function (plugin) {\n    plugin(instanceRef.current.hooks);\n  });\n  if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('plugins'); // Decorate All the columns\n\n  var columns = React.useMemo(function () {\n    return decorateColumnTree(userColumns, defaultColumn);\n  }, [defaultColumn, userColumns]); // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  var flatColumns = React.useMemo(function () {\n    if (process.env.NODE_ENV !== 'production' && debug) console.time('hooks.columnsBeforeHeaderGroups');\n    var newColumns = applyHooks(instanceRef.current.hooks.columnsBeforeHeaderGroups, flattenBy(columns, 'columns'), instanceRef.current);\n    if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('hooks.columnsBeforeHeaderGroups');\n    return newColumns;\n  }, [columns, debug].concat(_toConsumableArray(applyHooks(instanceRef.current.hooks.columnsBeforeHeaderGroupsDeps, [], instanceRef.current)))); // Make the headerGroups\n\n  var headerGroups = React.useMemo(function () {\n    return makeHeaderGroups(flatColumns, defaultColumn);\n  }, [defaultColumn, flatColumns]);\n  var headers = React.useMemo(function () {\n    return headerGroups[0].headers;\n  }, [headerGroups]);\n  Object.assign(instanceRef.current, {\n    columns: columns,\n    flatColumns: flatColumns,\n    headerGroups: headerGroups,\n    headers: headers\n  }); // Access the row model\n\n  var _React$useMemo = React.useMemo(function () {\n    if (process.env.NODE_ENV !== 'production' && debug) console.time('getAccessedRows');\n    var flatRows = []; // Access the row's data\n\n    var accessRow = function accessRow(originalRow, i) {\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // Keep the original reference around\n\n      var original = originalRow;\n      var rowId = getRowId(originalRow, i); // Make the new path for the row\n\n      var path = [].concat(_toConsumableArray(parentPath), [rowId]);\n      var row = {\n        original: original,\n        index: i,\n        path: path,\n        // used to create a key for each row even if not nested\n        depth: depth,\n        cells: [{}] // This is a dummy cell\n\n      };\n      flatRows.push(row); // Process any subRows\n\n      var subRows = getSubRows(originalRow, i);\n\n      if (subRows) {\n        row.subRows = subRows.map(function (d, i) {\n          return accessRow(d, i, depth + 1, path);\n        });\n      } // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n\n\n      var unpreparedAccessWarning = function unpreparedAccessWarning() {\n        throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n      };\n\n      row.cells.map = unpreparedAccessWarning;\n      row.cells.filter = unpreparedAccessWarning;\n      row.cells.forEach = unpreparedAccessWarning;\n      row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n      row.values = {};\n      flatColumns.forEach(function (column) {\n        row.values[column.id] = column.accessor ? column.accessor(originalRow, i, {\n          subRows: subRows,\n          depth: depth,\n          data: data\n        }) : undefined;\n      });\n      return row;\n    }; // Use the resolved data\n\n\n    var accessedData = data.map(function (d, i) {\n      return accessRow(d, i);\n    });\n    if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('getAccessedRows');\n    return [accessedData, flatRows];\n  }, [debug, data, getRowId, getSubRows, flatColumns]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rows = _React$useMemo2[0],\n      flatRows = _React$useMemo2[1];\n\n  instanceRef.current.rows = rows;\n  instanceRef.current.flatRows = flatRows; // Determine column visibility\n\n  determineHeaderVisibility(instanceRef.current); // Provide a flat header list for utilities\n\n  instanceRef.current.flatHeaders = headerGroups.reduce(function (all, headerGroup) {\n    return [].concat(_toConsumableArray(all), _toConsumableArray(headerGroup.headers));\n  }, []);\n  if (process.env.NODE_ENV !== 'production' && debug) console.time('hooks.useBeforeDimensions');\n  instanceRef.current = applyHooks(instanceRef.current.hooks.useBeforeDimensions, instanceRef.current);\n  if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('hooks.useBeforeDimensions');\n  calculateDimensions(instanceRef.current);\n  if (process.env.NODE_ENV !== 'production' && debug) console.time('hooks.useMain');\n  instanceRef.current = applyHooks(instanceRef.current.hooks.useMain, instanceRef.current);\n  if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('hooks.useMain'); // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n\n  instanceRef.current.flatHeaders.forEach(function (column) {\n    // Give columns/headers rendering power\n    column.render = function (type) {\n      var userProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var Comp = typeof type === 'string' ? column[type] : type;\n\n      if (typeof Comp === 'undefined') {\n        throw new Error(renderErr);\n      }\n\n      return flexRender(Comp, _objectSpread2({}, instanceRef.current, {\n        column: column\n      }, userProps));\n    }; // Give columns/headers a default getHeaderProps\n\n\n    column.getHeaderProps = function (props) {\n      return mergeProps({\n        key: ['header', column.id].join('_'),\n        colSpan: column.totalVisibleHeaderCount\n      }, applyPropHooks(instanceRef.current.hooks.getHeaderProps, column, instanceRef.current), props);\n    };\n  });\n  instanceRef.current.headerGroups.forEach(function (headerGroup, i) {\n    // Filter out any headers and headerGroups that don't have visible columns\n    headerGroup.headers = headerGroup.headers.filter(function (header) {\n      var recurse = function recurse(headers) {\n        return headers.filter(function (header) {\n          if (header.headers) {\n            return recurse(header.headers);\n          }\n\n          return header.isVisible;\n        }).length;\n      };\n\n      if (header.headers) {\n        return recurse(header.headers);\n      }\n\n      return header.isVisible;\n    }); // Give headerGroups getRowProps\n\n    if (headerGroup.headers.length) {\n      headerGroup.getHeaderGroupProps = function () {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return mergeProps({\n          key: [\"header\".concat(i)].join('_')\n        }, applyPropHooks(instanceRef.current.hooks.getHeaderGroupProps, headerGroup, instanceRef.current), props);\n      };\n\n      return true;\n    }\n  }); // Run the rows (this could be a dangerous hook with a ton of data)\n\n  if (process.env.NODE_ENV !== 'production' && debug) console.time('hooks.useRows');\n  instanceRef.current.rows = applyHooks(instanceRef.current.hooks.useRows, instanceRef.current.rows, instanceRef.current);\n  if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('hooks.useRows'); // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  instanceRef.current.prepareRow = React.useCallback(function (row) {\n    row.getRowProps = function (props) {\n      return mergeProps({\n        key: ['row'].concat(_toConsumableArray(row.path)).join('_')\n      }, applyPropHooks(instanceRef.current.hooks.getRowProps, row, instanceRef.current), props);\n    }; // Build the visible cells for each row\n\n\n    row.cells = instanceRef.current.flatColumns.filter(function (d) {\n      return d.isVisible;\n    }).map(function (column) {\n      var cell = {\n        column: column,\n        row: row,\n        value: row.values[column.id]\n      }; // Give each cell a getCellProps base\n\n      cell.getCellProps = function (props) {\n        var columnPathStr = [].concat(_toConsumableArray(row.path), [column.id]).join('_');\n        return mergeProps({\n          key: ['cell', columnPathStr].join('_')\n        }, applyPropHooks(instanceRef.current.hooks.getCellProps, cell, instanceRef.current), props);\n      }; // Give each cell a renderer function (supports multiple renderers)\n\n\n      cell.render = function (type) {\n        var userProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var Comp = typeof type === 'string' ? column[type] : type;\n\n        if (typeof Comp === 'undefined') {\n          throw new Error(renderErr);\n        }\n\n        return flexRender(Comp, _objectSpread2({}, instanceRef.current, {\n          column: column,\n          row: row,\n          cell: cell\n        }, userProps));\n      };\n\n      return cell;\n    }); // need to apply any row specific hooks (useExpanded requires this)\n\n    applyHooks(instanceRef.current.hooks.prepareRow, row, instanceRef.current);\n  }, []);\n\n  instanceRef.current.getTableProps = function (userProps) {\n    return mergeProps(applyPropHooks(instanceRef.current.hooks.getTableProps, instanceRef.current), userProps);\n  };\n\n  instanceRef.current.getTableBodyProps = function (userProps) {\n    return mergeProps(applyPropHooks(instanceRef.current.hooks.getTableBodyProps, instanceRef.current), userProps);\n  };\n\n  return instanceRef.current;\n};\n\nfunction calculateDimensions(instance) {\n  var headers = instance.headers;\n  instance.totalColumnsWidth = calculateHeaderWidths(headers);\n}\n\nfunction calculateHeaderWidths(headers) {\n  var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var sumTotalWidth = 0;\n  headers.forEach(function (header) {\n    var subHeaders = header.headers;\n    header.totalLeft = left;\n\n    if (subHeaders && subHeaders.length) {\n      header.totalWidth = calculateHeaderWidths(subHeaders, left);\n    } else {\n      header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n    }\n\n    if (header.isVisible) {\n      left += header.totalWidth;\n      sumTotalWidth += header.totalWidth;\n    }\n  });\n  return sumTotalWidth;\n}\n\nvar pluginName = 'useExpanded'; // Actions\n\nactions.toggleExpandedByPath = 'toggleExpandedByPath';\nactions.resetExpanded = 'resetExpanded'; // Reducer\n\nreducerHandlers[pluginName] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      expanded: []\n    }, state);\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return _objectSpread2({}, state, {\n      expanded: []\n    });\n  }\n\n  if (action.type === actions.toggleExpandedByPath) {\n    var path = action.path,\n        expanded = action.expanded;\n    var key = path.join('.');\n    var exists = state.expanded.includes(key);\n    var shouldExist = typeof set !== 'undefined' ? expanded : !exists;\n    var newExpanded = new Set(state.expanded);\n\n    if (!exists && shouldExist) {\n      newExpanded.add(key);\n    } else if (exists && !shouldExist) {\n      newExpanded.delete(key);\n    } else {\n      return state;\n    }\n\n    return _objectSpread2({}, state, {\n      expanded: _toConsumableArray(newExpanded.values())\n    });\n  }\n};\n\nvar useExpanded = function useExpanded(hooks) {\n  hooks.getExpandedToggleProps = [];\n  hooks.useMain.push(useMain);\n};\n\nuseExpanded.pluginName = pluginName;\n\nvar defaultGetResetExpandedDeps = function defaultGetResetExpandedDeps(_ref) {\n  var data = _ref.data;\n  return [data];\n};\n\nfunction useMain(instance) {\n  var debug = instance.debug,\n      rows = instance.rows,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      hooks = instance.hooks,\n      expanded = instance.state.expanded,\n      dispatch = instance.dispatch,\n      _instance$getResetExp = instance.getResetExpandedDeps,\n      getResetExpandedDeps = _instance$getResetExp === void 0 ? defaultGetResetExpandedDeps : _instance$getResetExp; // Bypass any effects from firing when this changes\n\n  var isMountedRef = React.useRef();\n  safeUseLayoutEffect(function () {\n    if (isMountedRef.current) {\n      dispatch({\n        type: actions.resetExpanded\n      });\n    }\n\n    isMountedRef.current = true;\n  }, [dispatch].concat(_toConsumableArray(getResetExpandedDeps ? getResetExpandedDeps(instance) : [])));\n\n  var toggleExpandedByPath = function toggleExpandedByPath(path, expanded) {\n    dispatch({\n      type: actions.toggleExpandedByPath,\n      path: path,\n      expanded: expanded\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance;\n  hooks.prepareRow.push(function (row) {\n    row.toggleExpanded = function (set) {\n      return toggleExpandedByPath(row.path, set);\n    };\n\n    row.getExpandedToggleProps = function (props) {\n      return mergeProps({\n        onClick: function onClick(e) {\n          e.persist();\n          row.toggleExpanded();\n        },\n        style: {\n          cursor: 'pointer'\n        },\n        title: 'Toggle Expanded'\n      }, applyPropHooks(instanceRef.current.hooks.getExpandedToggleProps, row, instanceRef.current), props);\n    };\n\n    return row;\n  });\n  var expandedRows = React.useMemo(function () {\n    if (process.env.NODE_ENV !== 'production' && debug) console.info('getExpandedRows');\n\n    if (paginateExpandedRows) {\n      return expandRows(rows, {\n        manualExpandedKey: manualExpandedKey,\n        expanded: expanded,\n        expandSubRows: expandSubRows\n      });\n    }\n\n    return rows;\n  }, [debug, paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n  var expandedDepth = findExpandedDepth(expanded);\n  return _objectSpread2({}, instance, {\n    toggleExpandedByPath: toggleExpandedByPath,\n    expandedDepth: expandedDepth,\n    rows: expandedRows\n  });\n}\n\nfunction findExpandedDepth(expanded) {\n  var maxDepth = 0;\n  expanded.forEach(function (key) {\n    var path = key.split('.');\n    maxDepth = Math.max(maxDepth, path.length);\n  });\n  return maxDepth;\n}\n\nvar text = function text(rows, id, filterValue) {\n  rows = rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n  });\n  return rows;\n};\n\ntext.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactText = function exactText(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n  });\n};\n\nexactText.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactTextCase = function exactTextCase(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n  });\n};\n\nexactTextCase.autoRemove = function (val) {\n  return !val;\n};\n\nvar includes = function includes(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return filterValue.includes(rowValue);\n  });\n};\n\nincludes.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar includesAll = function includesAll(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue && rowValue.length && filterValue.every(function (val) {\n      return rowValue.includes(val);\n    });\n  });\n};\n\nincludesAll.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar exact = function exact(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue === filterValue;\n  });\n};\n\nexact.autoRemove = function (val) {\n  return typeof val === 'undefined';\n};\n\nvar equals = function equals(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n\n    return rowValue == filterValue;\n  });\n};\n\nequals.autoRemove = function (val) {\n  return val == null;\n};\n\nvar between = function between(rows, id, filterValue) {\n  var _ref = filterValue || [],\n      _ref2 = _slicedToArray(_ref, 2),\n      min = _ref2[0],\n      max = _ref2[1];\n\n  min = typeof min === 'number' ? min : -Infinity;\n  max = typeof max === 'number' ? max : Infinity;\n\n  if (min > max) {\n    var temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue >= min && rowValue <= max;\n  });\n};\n\nbetween.autoRemove = function (val) {\n  return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n};\n\nvar filterTypes =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  text: text,\n  exactText: exactText,\n  exactTextCase: exactTextCase,\n  includes: includes,\n  includesAll: includesAll,\n  exact: exact,\n  equals: equals,\n  between: between\n});\nvar pluginName$1 = 'useFilters'; // Actions\n\nactions.resetFilters = 'resetFilters';\nactions.setFilter = 'setFilter';\nactions.setAllFilters = 'setAllFilters'; // Reducer\n\nreducerHandlers[pluginName$1] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      filters: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetFilters) {\n    return _objectSpread2({}, state, {\n      filters: {}\n    });\n  }\n\n  if (action.type === actions.setFilter) {\n    var columnId = action.columnId,\n        filterValue = action.filterValue,\n        _action$instanceRef$c = action.instanceRef.current,\n        flatColumns = _action$instanceRef$c.flatColumns,\n        userFilterTypes = _action$instanceRef$c.userFilterTypes;\n    var column = flatColumns.find(function (d) {\n      return d.id === columnId;\n    });\n\n    if (!column) {\n      throw new Error(\"React-Table: Could not find a column with id: \".concat(columnId));\n    }\n\n    var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n    var newFilter = functionalUpdate(filterValue, state.filters[columnId]); //\n\n    if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n      var _state$filters = state.filters,\n          remove = _state$filters[columnId],\n          newFilters = _objectWithoutProperties(_state$filters, [columnId].map(_toPropertyKey));\n\n      return _objectSpread2({}, state, {\n        filters: newFilters\n      });\n    }\n\n    return _objectSpread2({}, state, {\n      filters: _objectSpread2({}, state.filters, _defineProperty({}, columnId, newFilter))\n    });\n  }\n\n  if (action.type === actions.setAllFilters) {\n    var filters = action.filters,\n        _action$instanceRef$c2 = action.instanceRef.current,\n        _flatColumns = _action$instanceRef$c2.flatColumns,\n        _userFilterTypes = _action$instanceRef$c2.filterTypes;\n\n    var _newFilters = functionalUpdate(filters, state.filters); // Filter out undefined values\n\n\n    Object.keys(_newFilters).forEach(function (id) {\n      var newFilter = _newFilters[id];\n\n      var column = _flatColumns.find(function (d) {\n        return d.id === id;\n      });\n\n      var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n\n      if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n        delete _newFilters[id];\n      }\n    });\n    return _objectSpread2({}, state, {\n      filters: _newFilters\n    });\n  }\n};\n\nvar useFilters = function useFilters(hooks) {\n  hooks.useMain.push(useMain$1);\n};\n\nuseFilters.pluginName = pluginName$1;\n\nfunction useMain$1(instance) {\n  var debug = instance.debug,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      flatColumns = instance.flatColumns,\n      userFilterTypes = instance.filterTypes,\n      manualFilters = instance.manualFilters,\n      _instance$defaultCanF = instance.defaultCanFilter,\n      defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,\n      disableFilters = instance.disableFilters,\n      filters = instance.state.filters,\n      dispatch = instance.dispatch,\n      _instance$getResetFil = instance.getResetFiltersDeps,\n      getResetFiltersDeps = _instance$getResetFil === void 0 ? false : _instance$getResetFil;\n  var preFilteredRows = rows;\n  var preFilteredFlatRows = flatRows; // Bypass any effects from firing when this changes\n\n  var isMountedRef = React.useRef();\n  safeUseLayoutEffect(function () {\n    if (isMountedRef.current) {\n      dispatch({\n        type: actions.resetFilters\n      });\n    }\n\n    isMountedRef.current = true;\n  }, [dispatch].concat(_toConsumableArray(getResetFiltersDeps ? getResetFiltersDeps(instance) : [])));\n\n  var setFilter = function setFilter(columnId, filterValue) {\n    dispatch({\n      type: actions.setFilter,\n      columnId: columnId,\n      filterValue: filterValue\n    });\n  };\n\n  var setAllFilters = function setAllFilters(filters) {\n    dispatch({\n      type: actions.setAllFilters,\n      filters: filters\n    });\n  };\n\n  flatColumns.forEach(function (column) {\n    var id = column.id,\n        accessor = column.accessor,\n        columnDefaultCanFilter = column.defaultCanFilter,\n        columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n\n    column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n\n    column.setFilter = function (val) {\n      return setFilter(column.id, val);\n    }; // Provide the current filter value to the column for\n    // convenience\n\n\n    column.filterValue = filters[id];\n  }); // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualFilters || !Object.keys(filters).length) {\n      return {\n        filteredRows: rows,\n        filteredFlatRows: flatRows\n      };\n    }\n\n    var filteredFlatRows = [];\n    if (process.env.NODE_ENV !== 'production' && debug) console.info('getFilteredRows'); // Filters top level and nested rows\n\n    var filterRows = function filterRows(rows) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var filteredRows = rows;\n      filteredRows = Object.entries(filters).reduce(function (filteredSoFar, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            columnId = _ref2[0],\n            filterValue = _ref2[1]; // Find the filters column\n\n\n        var column = flatColumns.find(function (d) {\n          return d.id === columnId;\n        });\n\n        if (!column) {\n          return filteredSoFar;\n        }\n\n        if (depth === 0) {\n          column.preFilteredRows = filteredSoFar;\n        }\n\n        var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n\n        if (!filterMethod) {\n          console.warn(\"Could not find a valid 'column.filter' for column with the ID: \".concat(column.id, \".\"));\n          return filteredSoFar;\n        } // Pass the rows, id, filterValue and column to the filterMethod\n        // to get the filtered rows back\n\n\n        column.filteredRows = filterMethod(filteredSoFar, columnId, filterValue, column);\n        return column.filteredRows;\n      }, rows); // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n\n      filteredRows = filteredRows.map(function (row) {\n        filteredFlatRows.push(row);\n\n        if (!row.subRows) {\n          return row;\n        }\n\n        return _objectSpread2({}, row, {\n          subRows: row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows\n        });\n      });\n      return filteredRows;\n    };\n\n    return {\n      filteredRows: filterRows(rows),\n      filteredFlatRows: filteredFlatRows\n    };\n  }, [manualFilters, filters, debug, rows, flatRows, flatColumns, userFilterTypes]),\n      filteredRows = _React$useMemo.filteredRows,\n      filteredFlatRows = _React$useMemo.filteredFlatRows;\n\n  React.useMemo(function () {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    var nonFilteredColumns = flatColumns.filter(function (column) {\n      return !Object.keys(filters).includes(column.id);\n    }); // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n\n    nonFilteredColumns.forEach(function (column) {\n      column.preFilteredRows = filteredRows;\n      column.filteredRows = filteredRows;\n    });\n  }, [filteredRows, filters, flatColumns]);\n  return _objectSpread2({}, instance, {\n    setFilter: setFilter,\n    setAllFilters: setAllFilters,\n    preFilteredRows: preFilteredRows,\n    preFilteredFlatRows: preFilteredFlatRows,\n    rows: filteredRows,\n    flatRows: filteredFlatRows\n  });\n}\n\nfunction shouldAutoRemove(autoRemove, value) {\n  return autoRemove ? autoRemove(value) : typeof value === 'undefined';\n}\n\nfunction getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n}\n\nfunction sum$1(values, rows) {\n  return values.reduce(function (sum, next) {\n    return sum + next;\n  }, 0);\n}\n\nfunction average(values, rows) {\n  return Math.round(sum$1(values) / values.length * 100) / 100;\n}\n\nfunction median(values) {\n  values = values.length ? values : [0];\n  var min = Math.min.apply(Math, _toConsumableArray(values));\n  var max = Math.max.apply(Math, _toConsumableArray(values));\n  return (min + max) / 2;\n}\n\nfunction uniqueCount(values) {\n  return new Set(values).size;\n}\n\nfunction count(values) {\n  return values.length;\n}\n\nvar aggregations =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  sum: sum$1,\n  average: average,\n  median: median,\n  uniqueCount: uniqueCount,\n  count: count\n});\nvar pluginName$2 = 'useGroupBy'; // Actions\n\nactions.resetGroupBy = 'resetGroupBy';\nactions.toggleGroupBy = 'toggleGroupBy'; // Reducer\n\nreducerHandlers[pluginName$2] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      groupBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return _objectSpread2({}, state, {\n      groupBy: []\n    });\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    var columnId = action.columnId,\n        toggle = action.toggle;\n    var resolvedToggle = typeof toggle !== 'undefined' ? toggle : !state.groupBy.includes(columnId);\n\n    if (resolvedToggle) {\n      return _objectSpread2({}, state, {\n        groupBy: [].concat(_toConsumableArray(state.groupBy), [columnId])\n      });\n    }\n\n    return _objectSpread2({}, state, {\n      groupBy: state.groupBy.filter(function (d) {\n        return d !== columnId;\n      })\n    });\n  }\n};\n\nvar useGroupBy = function useGroupBy(hooks) {\n  hooks.columnsBeforeHeaderGroups.push(columnsBeforeHeaderGroups);\n  hooks.columnsBeforeHeaderGroupsDeps.push(function (deps, instance) {\n    deps.push(instance.state.groupBy);\n    return deps;\n  });\n  hooks.useMain.push(useMain$2);\n};\n\nuseGroupBy.pluginName = pluginName$2;\n\nfunction columnsBeforeHeaderGroups(flatColumns, _ref) {\n  var groupBy = _ref.state.groupBy; // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  var groupByColumns = groupBy.map(function (g) {\n    return flatColumns.find(function (col) {\n      return col.id === g;\n    });\n  });\n  var nonGroupByColumns = flatColumns.filter(function (col) {\n    return !groupBy.includes(col.id);\n  }); // If a groupByBoundary column is found, place the groupBy's after it\n\n  var groupByBoundaryColumnIndex = flatColumns.findIndex(function (column) {\n    return column.groupByBoundary;\n  }) + 1;\n  return [].concat(_toConsumableArray(nonGroupByColumns.slice(0, groupByBoundaryColumnIndex)), _toConsumableArray(groupByColumns), _toConsumableArray(nonGroupByColumns.slice(groupByBoundaryColumnIndex)));\n}\n\nvar defaultUserAggregations = {};\n\nfunction useMain$2(instance) {\n  var debug = instance.debug,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      flatColumns = instance.flatColumns,\n      flatHeaders = instance.flatHeaders,\n      _instance$groupByFn = instance.groupByFn,\n      groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,\n      manualGroupBy = instance.manualGroupBy,\n      defaultCanGroupBy = instance.defaultCanGroupBy,\n      disableGroupBy = instance.disableGroupBy,\n      _instance$aggregation = instance.aggregations,\n      userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,\n      hooks = instance.hooks,\n      plugins = instance.plugins,\n      groupBy = instance.state.groupBy,\n      dispatch = instance.dispatch;\n  ensurePluginOrder(plugins, [], 'useGroupBy', ['useSortBy', 'useExpanded']);\n  flatColumns.forEach(function (column) {\n    var id = column.id,\n        accessor = column.accessor,\n        defaultColumnGroupBy = column.defaultGroupBy,\n        columnDisableGroupBy = column.disableGroupBy;\n    column.isGrouped = groupBy.includes(id);\n    column.groupedIndex = groupBy.indexOf(id);\n    column.canGroupBy = accessor ? getFirstDefined(columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(defaultColumnGroupBy, defaultCanGroupBy, false);\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = function () {\n        return toggleGroupBy(column.id);\n      };\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell;\n  });\n\n  var toggleGroupBy = function toggleGroupBy(columnId, toggle) {\n    dispatch({\n      type: actions.toggleGroupBy,\n      columnId: columnId,\n      toggle: toggle\n    });\n  };\n\n  hooks.getGroupByToggleProps = []; // use reference to avoid memory leak in #1608\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance;\n  flatHeaders.forEach(function (header) {\n    var canGroupBy = header.canGroupBy;\n\n    header.getGroupByToggleProps = function (props) {\n      return mergeProps({\n        onClick: canGroupBy ? function (e) {\n          e.persist();\n          header.toggleGroupBy();\n        } : undefined,\n        style: {\n          cursor: canGroupBy ? 'pointer' : undefined\n        },\n        title: 'Toggle GroupBy'\n      }, applyPropHooks(instanceRef.current.hooks.getGroupByToggleProps, header, instanceRef.current), props);\n    };\n  });\n  hooks.prepareRow.push(function (row) {\n    row.cells.forEach(function (cell) {\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Repeated cells are any columns in the groupBy that are not grouped\n\n      cell.isRepeatedValue = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n\n      cell.isAggregated = !cell.isGrouped && !cell.isRepeatedValue && row.canExpand;\n    });\n    return row;\n  });\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualGroupBy || !groupBy.length) {\n      return [rows, flatRows];\n    }\n\n    if (process.env.NODE_ENV !== 'production' && debug) console.info('getGroupedRows'); // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n\n    var aggregateRowsToValues = function aggregateRowsToValues(rows, isAggregated) {\n      var values = {};\n      flatColumns.forEach(function (column) {\n        // Don't aggregate columns that are in the groupBy\n        if (groupBy.includes(column.id)) {\n          values[column.id] = rows[0] ? rows[0].values[column.id] : null;\n          return;\n        }\n\n        var columnValues = rows.map(function (d) {\n          return d.values[column.id];\n        });\n        var aggregator = column.aggregate;\n\n        if (Array.isArray(aggregator)) {\n          if (aggregator.length !== 2) {\n            console.info({\n              column: column\n            });\n            throw new Error(\"React Table: Complex aggregators must have 2 values, eg. aggregate: ['sum', 'count']. More info above...\");\n          }\n\n          if (isAggregated) {\n            aggregator = aggregator[1];\n          } else {\n            aggregator = aggregator[0];\n          }\n        }\n\n        var aggregateFn = typeof aggregator === 'function' ? aggregator : userAggregations[aggregator] || aggregations[aggregator];\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(columnValues, rows, isAggregated);\n        } else if (aggregator) {\n          console.info({\n            column: column\n          });\n          throw new Error(\"React Table: Invalid aggregate option for column listed above\");\n        } else {\n          values[column.id] = null;\n        }\n      });\n      return values;\n    };\n\n    var groupedFlatRows = []; // Recursively group the data\n\n    var groupRecursively = function groupRecursively(rows) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parentPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : []; // This is the last level, just return the rows\n\n      if (depth >= groupBy.length) {\n        rows.forEach(function (row) {\n          row.path = [].concat(_toConsumableArray(parentPath), _toConsumableArray(row.path));\n        });\n        groupedFlatRows = groupedFlatRows.concat(rows);\n        return rows;\n      }\n\n      var columnId = groupBy[depth]; // Group the rows together for this level\n\n      var groupedRows = groupByFn(rows, columnId); // Recurse to sub rows before aggregation\n\n      groupedRows = Object.entries(groupedRows).map(function (_ref2, index) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            groupByVal = _ref3[0],\n            subRows = _ref3[1];\n\n        var path = [].concat(_toConsumableArray(parentPath), [\"\".concat(columnId, \":\").concat(groupByVal)]);\n        subRows = groupRecursively(subRows, depth + 1, path);\n        var values = aggregateRowsToValues(subRows, depth < groupBy.length);\n        var row = {\n          isAggregated: true,\n          groupByID: columnId,\n          groupByVal: groupByVal,\n          values: values,\n          subRows: subRows,\n          depth: depth,\n          index: index,\n          path: path\n        };\n        groupedFlatRows.push(row);\n        return row;\n      });\n      return groupedRows;\n    };\n\n    var groupedRows = groupRecursively(rows); // Assign the new data\n\n    return [groupedRows, groupedFlatRows];\n  }, [manualGroupBy, groupBy, debug, rows, flatRows, flatColumns, userAggregations, groupByFn]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      groupedRows = _React$useMemo2[0],\n      groupedFlatRows = _React$useMemo2[1];\n\n  return _objectSpread2({}, instance, {\n    toggleGroupBy: toggleGroupBy,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    preGroupedRows: rows\n  });\n}\n\nvar reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\nvar alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId); // Force to strings (or \"\" for unsupported types)\n\n  a = toString(a);\n  b = toString(b); // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n\n  a = a.split(reSplitAlphaNumeric).filter(Boolean);\n  b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    var aa = a.shift();\n    var bb = b.shift();\n    var an = parseInt(aa, 10);\n    var bn = parseInt(bb, 10);\n    var combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n};\n\nfunction datetime(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  a = a.getTime();\n  b = b.getTime();\n  return compareBasic(a, b);\n}\n\nfunction basic(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  return compareBasic(a, b);\n} // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId];\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n}\n\nvar sortTypes =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  alphanumeric: alphanumeric,\n  datetime: datetime,\n  basic: basic\n});\nvar pluginName$3 = 'useSortBy'; // Actions\n\nactions.resetSortBy = 'resetSortBy';\nactions.toggleSortBy = 'toggleSortBy';\nactions.clearSortBy = 'clearSortBy'; // Reducer\n\nreducerHandlers[pluginName$3] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      sortBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return _objectSpread2({}, state, {\n      sortBy: {}\n    });\n  }\n\n  if (action.type === actions.clearSortBy) {\n    var sortBy = state.sortBy;\n    var newSortBy = sortBy.filter(function (d) {\n      return d.id !== action.columnID;\n    });\n    return _objectSpread2({}, state, {\n      sortBy: newSortBy\n    });\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    var columnId = action.columnId,\n        desc = action.desc,\n        multi = action.multi,\n        _action$instanceRef$c = action.instanceRef.current,\n        flatColumns = _action$instanceRef$c.flatColumns,\n        disableMultiSort = _action$instanceRef$c.disableMultiSort,\n        disableSortRemove = _action$instanceRef$c.disableSortRemove,\n        disableMultiRemove = _action$instanceRef$c.disableMultiRemove,\n        _action$instanceRef$c2 = _action$instanceRef$c.maxMultiSortColCount,\n        maxMultiSortColCount = _action$instanceRef$c2 === void 0 ? Number.MAX_SAFE_INTEGER : _action$instanceRef$c2;\n    var _sortBy = state.sortBy; // Find the column for this columnId\n\n    var column = flatColumns.find(function (d) {\n      return d.id === columnId;\n    });\n    var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n\n    var existingSortBy = _sortBy.find(function (d) {\n      return d.id === columnId;\n    });\n\n    var existingIndex = _sortBy.findIndex(function (d) {\n      return d.id === columnId;\n    });\n\n    var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n    var _newSortBy = []; // What should we do with this sort action?\n\n    var sortAction;\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'add';\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== _sortBy.length - 1) {\n        sortAction = 'replace';\n      } else if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'replace';\n      }\n    } // Handle toggle states that will remove the sortBy\n\n\n    if (sortAction === 'toggle' && // Must be toggling\n    !disableSortRemove && // If disableSortRemove, disable in general\n    !hasDescDefined && ( // Must not be setting desc\n    multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n    existingSortBy && // Finally, detect if it should indeed be removed\n    existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n      sortAction = 'remove';\n    }\n\n    if (sortAction === 'replace') {\n      _newSortBy = [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }];\n    } else if (sortAction === 'add') {\n      _newSortBy = [].concat(_toConsumableArray(_sortBy), [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }]); // Take latest n columns\n\n      _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      _newSortBy = _sortBy.map(function (d) {\n        if (d.id === columnId) {\n          return _objectSpread2({}, d, {\n            desc: hasDescDefined ? desc : !existingSortBy.desc\n          });\n        }\n\n        return d;\n      });\n    } else if (sortAction === 'remove') {\n      _newSortBy = _sortBy.filter(function (d) {\n        return d.id !== columnId;\n      });\n    }\n\n    return _objectSpread2({}, state, {\n      sortBy: _newSortBy\n    });\n  }\n};\n\ndefaultColumn.sortType = 'alphanumeric';\ndefaultColumn.sortDescFirst = false;\n\nvar useSortBy = function useSortBy(hooks) {\n  hooks.useMain.push(useMain$3);\n};\n\nuseSortBy.pluginName = pluginName$3;\n\nfunction useMain$3(instance) {\n  var debug = instance.debug,\n      rows = instance.rows,\n      flatColumns = instance.flatColumns,\n      _instance$orderByFn = instance.orderByFn,\n      orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,\n      userSortTypes = instance.sortTypes,\n      manualSorting = instance.manualSorting,\n      defaultCanSort = instance.defaultCanSort,\n      disableSortBy = instance.disableSortBy,\n      _instance$isMultiSort = instance.isMultiSortEvent,\n      isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {\n    return e.shiftKey;\n  } : _instance$isMultiSort,\n      flatHeaders = instance.flatHeaders,\n      hooks = instance.hooks,\n      sortBy = instance.state.sortBy,\n      dispatch = instance.dispatch,\n      plugins = instance.plugins,\n      _instance$getResetSor = instance.getResetSortByDeps,\n      getResetSortByDeps = _instance$getResetSor === void 0 ? false : _instance$getResetSor;\n  ensurePluginOrder(plugins, ['useFilters'], 'useSortBy', []); // Add custom hooks\n\n  hooks.getSortByToggleProps = []; // Bypass any effects from firing when this changes\n\n  var isMountedRef = React.useRef();\n  safeUseLayoutEffect(function () {\n    if (isMountedRef.current) {\n      dispatch({\n        type: actions.resetSortBy\n      });\n    }\n\n    isMountedRef.current = true;\n  }, [dispatch].concat(_toConsumableArray(getResetSortByDeps ? getResetSortByDeps(instance) : []))); // Updates sorting based on a columnId, desc flag and multi flag\n\n  var toggleSortBy = function toggleSortBy(columnId, desc, multi) {\n    dispatch({\n      type: actions.toggleSortBy,\n      columnId: columnId,\n      desc: desc,\n      multi: multi\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance; // Add the getSortByToggleProps method to columns and headers\n\n  flatHeaders.forEach(function (column) {\n    var accessor = column.accessor,\n        defaultColumnCanSort = column.canSort,\n        columnDisableSortBy = column.disableSortBy,\n        id = column.id;\n    var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n    column.canSort = canSort;\n\n    if (column.canSort) {\n      column.toggleSortBy = function (desc, multi) {\n        return toggleSortBy(column.id, desc, multi);\n      };\n\n      column.clearSortBy = function () {\n        dispatch({\n          type: actions.clearSortBy,\n          columnId: column.id\n        });\n      };\n    }\n\n    column.getSortByToggleProps = function (props) {\n      return mergeProps({\n        onClick: canSort ? function (e) {\n          e.persist();\n          column.toggleSortBy(undefined, !instanceRef.current.disableMultiSort && isMultiSortEvent(e));\n        } : undefined,\n        style: {\n          cursor: canSort ? 'pointer' : undefined\n        },\n        title: 'Toggle SortBy'\n      }, applyPropHooks(instanceRef.current.hooks.getSortByToggleProps, column, instanceRef.current), props);\n    };\n\n    var columnSort = sortBy.find(function (d) {\n      return d.id === id;\n    });\n    column.isSorted = !!columnSort;\n    column.sortedIndex = sortBy.findIndex(function (d) {\n      return d.id === id;\n    });\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n  });\n  var sortedRows = React.useMemo(function () {\n    if (manualSorting || !sortBy.length) {\n      return rows;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && debug) console.time('getSortedRows'); // Filter out sortBys that correspond to non existing columns\n\n    var availableSortBy = sortBy.filter(function (sort) {\n      return flatColumns.find(function (col) {\n        return col.id === sort.id;\n      });\n    });\n\n    var sortData = function sortData(rows) {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {\n        // Support custom sorting methods for each column\n        var column = flatColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (!column) {\n          throw new Error(\"React-Table: Could not find a column with id: \".concat(sort.id, \" while sorting\"));\n        }\n\n        var sortType = column.sortType; // Look up sortBy functions in this order:\n        // column function\n        // column string lookup on user sortType\n        // column string lookup on built-in sortType\n        // default function\n        // default string lookup on user sortType\n        // default string lookup on built-in sortType\n\n        var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n        if (!sortMethod) {\n          throw new Error(\"React-Table: Could not find a valid sortType of '\".concat(sortType, \"' for column '\").concat(sort.id, \"'.\"));\n        } // Return the correct sortFn.\n        // This function should always return in ascending order\n\n\n        return function (a, b) {\n          return sortMethod(a, b, sort.id);\n        };\n      }), // Map the directions\n      availableSortBy.map(function (sort) {\n        // Detect and use the sortInverted option\n        var column = flatColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (column && column.sortInverted) {\n          return sort.desc;\n        }\n\n        return !sort.desc;\n      })); // If there are sub-rows, sort them\n\n      sortedData.forEach(function (row) {\n        if (!row.subRows || row.subRows.length <= 1) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('getSortedRows');\n    return sortData(rows);\n  }, [manualSorting, sortBy, debug, rows, flatColumns, orderByFn, userSortTypes]);\n  return _objectSpread2({}, instance, {\n    toggleSortBy: toggleSortBy,\n    rows: sortedRows,\n    preSortedRows: rows\n  });\n}\n\nvar pluginName$4 = 'usePagination'; // Actions\n\nactions.resetPage = 'resetPage';\nactions.gotoPage = 'gotoPage';\nactions.setPageSize = 'setPageSize'; // Reducer\n\nreducerHandlers[pluginName$4] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      pageSize: 10,\n      pageIndex: 0\n    }, state);\n  }\n\n  if (action.type === actions.resetPage) {\n    return _objectSpread2({}, state, {\n      pageIndex: 0\n    });\n  }\n\n  if (action.type === actions.gotoPage) {\n    var pageCount = action.instanceRef.current.pageCount;\n    var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state;\n    }\n\n    return _objectSpread2({}, state, {\n      pageIndex: newPageIndex\n    });\n  }\n\n  if (action.type === actions.setPageSize) {\n    var pageSize = action.pageSize;\n    var topRowIndex = state.pageSize * state.pageIndex;\n    var pageIndex = Math.floor(topRowIndex / pageSize);\n    return _objectSpread2({}, state, {\n      pageIndex: pageIndex,\n      pageSize: pageSize\n    });\n  }\n};\n\nvar usePagination = function usePagination(hooks) {\n  hooks.useMain.push(useMain$4);\n};\n\nusePagination.pluginName = pluginName$4;\n\nvar defaultGetResetPageDeps = function defaultGetResetPageDeps(_ref) {\n  var data = _ref.data,\n      manualPagination = _ref.manualPagination,\n      _ref$state = _ref.state,\n      filters = _ref$state.filters,\n      groupBy = _ref$state.groupBy,\n      sortBy = _ref$state.sortBy;\n  return [manualPagination ? null : data, filters, groupBy, sortBy];\n};\n\nfunction useMain$4(instance) {\n  var rows = instance.rows,\n      manualPagination = instance.manualPagination,\n      _instance$getResetPag = instance.getResetPageDeps,\n      getResetPageDeps = _instance$getResetPag === void 0 ? defaultGetResetPageDeps : _instance$getResetPag,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      debug = instance.debug,\n      plugins = instance.plugins,\n      userPageCount = instance.pageCount,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      _instance$state = instance.state,\n      pageSize = _instance$state.pageSize,\n      pageIndex = _instance$state.pageIndex,\n      expanded = _instance$state.expanded,\n      dispatch = instance.dispatch;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination', []); // Bypass any effects from firing when this changes\n\n  var isMountedRef = React.useRef();\n  safeUseLayoutEffect(function () {\n    if (isMountedRef.current) {\n      dispatch({\n        type: actions.resetPage\n      });\n    }\n\n    isMountedRef.current = true;\n  }, [dispatch].concat(_toConsumableArray(getResetPageDeps ? getResetPageDeps(instance) : [])));\n  var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n  var pageOptions = React.useMemo(function () {\n    return pageCount > 0 ? _toConsumableArray(new Array(pageCount)).map(function (d, i) {\n      return i;\n    }) : [];\n  }, [pageCount]);\n  var page = React.useMemo(function () {\n    var page;\n\n    if (manualPagination) {\n      page = rows;\n    } else {\n      if (process.env.NODE_ENV !== 'production' && debug) console.info('getPage');\n      var pageStart = pageSize * pageIndex;\n      var pageEnd = pageStart + pageSize;\n      page = rows.slice(pageStart, pageEnd);\n    }\n\n    if (paginateExpandedRows) {\n      return page;\n    }\n\n    return expandRows(page, {\n      manualExpandedKey: manualExpandedKey,\n      expanded: expanded,\n      expandSubRows: expandSubRows\n    });\n  }, [debug, expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n  var canPreviousPage = pageIndex > 0;\n  var canNextPage = pageCount === -1 || pageIndex < pageCount - 1;\n  var gotoPage = React.useCallback(function (pageIndex) {\n    dispatch({\n      type: actions.gotoPage,\n      pageIndex: pageIndex\n    });\n  }, [dispatch]);\n  var previousPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old - 1;\n    });\n  }, [gotoPage]);\n  var nextPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old + 1;\n    });\n  }, [gotoPage]);\n  var setPageSize = React.useCallback(function (pageSize) {\n    dispatch({\n      type: actions.setPageSize,\n      pageSize: pageSize\n    });\n  }, [dispatch]);\n  return _objectSpread2({}, instance, {\n    pageOptions: pageOptions,\n    pageCount: pageCount,\n    page: page,\n    canPreviousPage: canPreviousPage,\n    canNextPage: canNextPage,\n    gotoPage: gotoPage,\n    previousPage: previousPage,\n    nextPage: nextPage,\n    setPageSize: setPageSize,\n    pageIndex: pageIndex,\n    pageSize: pageSize\n  });\n}\n\nvar pluginName$5 = 'useRowSelect'; // Actions\n\nactions.resetSelectedRows = 'resetSelectedRows';\nactions.toggleRowSelectedAll = 'toggleRowSelectedAll';\nactions.toggleRowSelected = 'toggleRowSelected'; // Reducer\n\nreducerHandlers[pluginName$5] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      selectedRowPaths: []\n    }, state);\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return _objectSpread2({}, state, {\n      selectedRowPaths: []\n    });\n  }\n\n  if (action.type === actions.toggleRowSelectedAll) {\n    var selected = action.selected,\n        _action$instanceRef$c = action.instanceRef.current,\n        isAllRowsSelected = _action$instanceRef$c.isAllRowsSelected,\n        flatRowPaths = _action$instanceRef$c.flatRowPaths;\n    var selectAll = typeof selected !== 'undefined' ? selected : !isAllRowsSelected;\n    return _objectSpread2({}, state, {\n      selectedRowPaths: selectAll ? flatRowPaths : []\n    });\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    var path = action.path,\n        _selected = action.selected,\n        _flatRowPaths = action.instanceRef.current.flatRowPaths;\n    var key = path.join('.');\n    var childRowPrefixKey = [key, '.'].join(''); // Join the paths of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n\n    var exists = state.selectedRowPaths.includes(key);\n    var shouldExist = typeof set !== 'undefined' ? _selected : !exists;\n    var newSelectedRows = new Set(state.selectedRowPaths);\n\n    if (!exists && shouldExist) {\n      _flatRowPaths.forEach(function (rowPath) {\n        if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n          newSelectedRows.add(rowPath);\n        }\n      });\n    } else if (exists && !shouldExist) {\n      _flatRowPaths.forEach(function (rowPath) {\n        if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n          newSelectedRows.delete(rowPath);\n        }\n      });\n    } else {\n      return state;\n    }\n\n    var updateParentRow = function updateParentRow(selectedRowPaths, path) {\n      var parentPath = path.slice(0, path.length - 1);\n      var parentKey = parentPath.join('.');\n      var selected = _flatRowPaths.filter(function (rowPath) {\n        var path = rowPath;\n        return path !== parentKey && path.startsWith(parentKey) && !selectedRowPaths.has(path);\n      }).length === 0;\n\n      if (selected) {\n        selectedRowPaths.add(parentKey);\n      } else {\n        selectedRowPaths.delete(parentKey);\n      }\n\n      if (parentPath.length > 1) updateParentRow(selectedRowPaths, parentPath);\n    }; // If the row is a subRow update\n    // its parent row to reflect changes\n\n\n    if (path.length > 1) updateParentRow(newSelectedRows, path);\n    return _objectSpread2({}, state, {\n      selectedRowPaths: _toConsumableArray(newSelectedRows.values())\n    });\n  }\n};\n\nvar useRowSelect = function useRowSelect(hooks) {\n  hooks.getToggleRowSelectedProps = [];\n  hooks.getToggleAllRowsSelectedProps = [];\n  hooks.useRows.push(useRows);\n  hooks.useMain.push(useMain$5);\n};\n\nuseRowSelect.pluginName = pluginName$5;\n\nfunction useRows(rows, instance) {\n  var selectedRowPaths = instance.state.selectedRowPaths;\n  instance.selectedFlatRows = React.useMemo(function () {\n    var selectedFlatRows = [];\n    rows.forEach(function (row) {\n      row.isSelected = getRowIsSelected(row, selectedRowPaths);\n\n      if (row.isSelected) {\n        selectedFlatRows.push(row);\n      }\n    });\n    return selectedFlatRows;\n  }, [rows, selectedRowPaths]);\n  return rows;\n}\n\nvar defaultGetResetSelectedRowPathsDeps = function defaultGetResetSelectedRowPathsDeps(_ref) {\n  var data = _ref.data;\n  return [data];\n};\n\nfunction useMain$5(instance) {\n  var hooks = instance.hooks,\n      _instance$manualRowSe = instance.manualRowSelectedKey,\n      manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe,\n      plugins = instance.plugins,\n      flatRows = instance.flatRows,\n      _instance$getResetSel = instance.getResetSelectedRowPathsDeps,\n      getResetSelectedRowPathsDeps = _instance$getResetSel === void 0 ? defaultGetResetSelectedRowPathsDeps : _instance$getResetSel,\n      selectedRowPaths = instance.state.selectedRowPaths,\n      dispatch = instance.dispatch;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy'], 'useRowSelect', []);\n  var flatRowPaths = flatRows.map(function (d) {\n    return d.path.join('.');\n  });\n  var isAllRowsSelected = !!flatRowPaths.length && !!selectedRowPaths.length;\n\n  if (isAllRowsSelected) {\n    if (flatRowPaths.some(function (d) {\n      return !selectedRowPaths.includes(d);\n    })) {\n      isAllRowsSelected = false;\n    }\n  } // Bypass any effects from firing when this changes\n\n\n  var isMountedRef = React.useRef();\n  safeUseLayoutEffect(function () {\n    if (isMountedRef.current) {\n      dispatch({\n        type: actions.resetSelectedRows\n      });\n    }\n\n    isMountedRef.current = true;\n  }, [dispatch].concat(_toConsumableArray(getResetSelectedRowPathsDeps ? getResetSelectedRowPathsDeps(instance) : [])));\n\n  var toggleRowSelectedAll = function toggleRowSelectedAll(selected) {\n    return dispatch({\n      type: actions.toggleRowSelectedAll,\n      selected: selected\n    });\n  };\n\n  var toggleRowSelected = function toggleRowSelected(path, selected) {\n    return dispatch({\n      type: actions.toggleRowSelected,\n      path: path,\n      selected: selected\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance;\n\n  var getToggleAllRowsSelectedProps = function getToggleAllRowsSelectedProps(props) {\n    return mergeProps({\n      onChange: function onChange(e) {\n        toggleRowSelectedAll(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: isAllRowsSelected,\n      title: 'Toggle All Rows Selected'\n    }, applyPropHooks(instanceRef.current.hooks.getToggleAllRowsSelectedProps, instanceRef.current), props);\n  };\n\n  hooks.prepareRow.push(function (row) {\n    row.toggleRowSelected = function (set) {\n      return toggleRowSelected(row.path, set);\n    };\n\n    row.getToggleRowSelectedProps = function (props) {\n      var checked = false;\n\n      if (row.original && row.original[manualRowSelectedKey]) {\n        checked = true;\n      } else {\n        checked = row.isSelected;\n      }\n\n      return mergeProps({\n        onChange: function onChange(e) {\n          row.toggleRowSelected(e.target.checked);\n        },\n        style: {\n          cursor: 'pointer'\n        },\n        checked: checked,\n        title: 'Toggle Row Selected'\n      }, applyPropHooks(instanceRef.current.hooks.getToggleRowSelectedProps, row, instanceRef.current), props);\n    };\n\n    return row;\n  });\n  return _objectSpread2({}, instance, {\n    flatRowPaths: flatRowPaths,\n    toggleRowSelected: toggleRowSelected,\n    toggleRowSelectedAll: toggleRowSelectedAll,\n    getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,\n    isAllRowsSelected: isAllRowsSelected\n  });\n}\n\nfunction getRowIsSelected(row, selectedRowPaths) {\n  if (row.isAggregated) {\n    return row.subRows.every(function (subRow) {\n      return getRowIsSelected(subRow, selectedRowPaths);\n    });\n  }\n\n  return selectedRowPaths.includes(row.path.join('.'));\n}\n\nvar pluginName$6 = 'useRowState'; // Actions\n\nactions.setRowState = 'setRowState';\nactions.resetRowState = 'resetRowState'; // Reducer\n\nreducerHandlers[pluginName$6] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      rowState: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetRowState) {\n    return _objectSpread2({}, state, {\n      rowState: {}\n    });\n  }\n\n  if (action.type === actions.setRowState) {\n    var path = action.path,\n        value = action.value;\n    var pathKey = path.join('.');\n    return _objectSpread2({}, state, {\n      rowState: _objectSpread2({}, state.rowState, _defineProperty({}, pathKey, functionalUpdate(value, state.rowState[pathKey])))\n    });\n  }\n};\n\nvar useRowState = function useRowState(hooks) {\n  hooks.useMain.push(useMain$6);\n};\n\nuseRowState.pluginName = pluginName$6;\n\nvar defaultGetResetRowStateDeps = function defaultGetResetRowStateDeps(_ref) {\n  var data = _ref.data;\n  return [data];\n};\n\nfunction useMain$6(instance) {\n  var hooks = instance.hooks,\n      initialRowStateAccessor = instance.initialRowStateAccessor,\n      _instance$getResetRow = instance.getResetRowStateDeps,\n      getResetRowStateDeps = _instance$getResetRow === void 0 ? defaultGetResetRowStateDeps : _instance$getResetRow,\n      rowState = instance.state.rowState,\n      dispatch = instance.dispatch;\n  var setRowState = React.useCallback(function (path, value, columnId) {\n    return dispatch({\n      type: actions.setRowState,\n      path: path,\n      value: value,\n      columnId: columnId\n    });\n  }, [dispatch]);\n  var setCellState = React.useCallback(function (rowPath, columnId, updater) {\n    return setRowState(rowPath, function (old) {\n      return _objectSpread2({}, old, {\n        cellState: _objectSpread2({}, old.cellState, _defineProperty({}, columnId, typeof updater === 'function' ? updater(old.cellState[columnId]) : updater))\n      });\n    }, columnId);\n  }, [setRowState]);\n  var rowsMountedRef = React.useRef(); // When data changes, reset row and cell state\n\n  safeUseLayoutEffect(function () {\n    if (rowsMountedRef.current) {\n      dispatch({\n        type: actions.resetRowState\n      });\n    }\n\n    rowsMountedRef.current = true;\n  }, [dispatch].concat(_toConsumableArray(getResetRowStateDeps ? getResetRowStateDeps(instance) : [])));\n  hooks.prepareRow.push(function (row) {\n    var pathKey = row.path.join('.');\n\n    if (row.original) {\n      row.state = (typeof rowState[pathKey] !== 'undefined' ? rowState[pathKey] : initialRowStateAccessor && initialRowStateAccessor(row)) || {};\n\n      row.setState = function (updater) {\n        return setRowState(row.path, updater);\n      };\n\n      row.cells.forEach(function (cell) {\n        cell.state = row.state.cellState || {};\n\n        cell.setState = function (updater) {\n          return setCellState(row.path, cell.column.id, updater);\n        };\n      });\n    }\n\n    return row;\n  });\n  return _objectSpread2({}, instance, {\n    setRowState: setRowState,\n    setCellState: setCellState\n  });\n}\n\nvar pluginName$7 = 'useColumnOrder'; // Actions\n\nactions.resetColumnOrder = 'resetColumnOrder';\nactions.setColumnOrder = 'setColumnOrder'; // Reducer\n\nreducerHandlers[pluginName$7] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      columnOrder: []\n    }, state);\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return _objectSpread2({}, state, {\n      columnOrder: []\n    });\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return _objectSpread2({}, state, {\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n    });\n  }\n};\n\nvar useColumnOrder = function useColumnOrder(hooks) {\n  hooks.columnsBeforeHeaderGroupsDeps.push(function (deps, instance) {\n    return [].concat(_toConsumableArray(deps), [instance.state.columnOrder]);\n  });\n  hooks.columnsBeforeHeaderGroups.push(columnsBeforeHeaderGroups$1);\n  hooks.useMain.push(useMain$7);\n};\n\nuseColumnOrder.pluginName = pluginName$7;\n\nfunction columnsBeforeHeaderGroups$1(columns, instance) {\n  var columnOrder = instance.state.columnOrder; // If there is no order, return the normal columns\n\n  if (!columnOrder || !columnOrder.length) {\n    return columns;\n  }\n\n  var columnOrderCopy = _toConsumableArray(columnOrder); // If there is an order, make a copy of the columns\n\n\n  var columnsCopy = _toConsumableArray(columns); // And make a new ordered array of the columns\n\n\n  var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n  var _loop = function _loop() {\n    var targetColumnId = columnOrderCopy.shift();\n    var foundIndex = columnsCopy.findIndex(function (d) {\n      return d.id === targetColumnId;\n    });\n\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n    }\n  };\n\n  while (columnsCopy.length && columnOrderCopy.length) {\n    _loop();\n  } // If there are any columns left, add them to the end\n\n\n  return [].concat(columnsInOrder, _toConsumableArray(columnsCopy));\n}\n\nfunction useMain$7(instance) {\n  var dispatch = instance.dispatch;\n  var setColumnOrder = React.useCallback(function (columnOrder) {\n    return dispatch({\n      type: actions.setColumnOrder,\n      columnOrder: columnOrder\n    });\n  }, [dispatch]);\n  return _objectSpread2({}, instance, {\n    setColumnOrder: setColumnOrder\n  });\n}\n\nvar pluginName$8 = 'useResizeColumns'; // Default Column\n\ndefaultColumn.canResize = true; // Actions\n\nactions.columnStartResizing = 'columnStartResizing';\nactions.columnResizing = 'columnResizing';\nactions.columnDoneResizing = 'columnDoneResizing'; // Reducer\n\nreducerHandlers[pluginName$8] = function (state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      columnResizing: {\n        columnWidths: {}\n      }\n    }, state);\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    var startX = action.startX,\n        columnId = action.columnId,\n        headerIdWidths = action.headerIdWidths;\n    return _objectSpread2({}, state, {\n      columnResizing: _objectSpread2({}, state.columnResizing, {\n        startX: startX,\n        headerIdWidths: headerIdWidths,\n        isResizingColumn: columnId\n      })\n    });\n  }\n\n  if (action.type === actions.columnResizing) {\n    var clientX = action.clientX;\n    var _state$columnResizing = state.columnResizing,\n        _startX = _state$columnResizing.startX,\n        _headerIdWidths = _state$columnResizing.headerIdWidths;\n    var deltaX = clientX - _startX;\n    var percentageDeltaX = deltaX / _headerIdWidths.length;\n    var newColumnWidths = {};\n\n    _headerIdWidths.forEach(function (_ref, index) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          headerId = _ref2[0],\n          headerWidth = _ref2[1];\n\n      newColumnWidths[headerId] = Math.max(headerWidth + percentageDeltaX, 0);\n    });\n\n    return _objectSpread2({}, state, {\n      columnResizing: _objectSpread2({}, state.columnResizing, {\n        columnWidths: _objectSpread2({}, state.columnResizing.columnWidths, {}, action.columnWidths)\n      })\n    });\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return _objectSpread2({}, state, {\n      columnResizing: _objectSpread2({}, state.columnResizing, {\n        startX: null,\n        isResizingColumn: null\n      })\n    });\n  }\n};\n\nvar useResizeColumns = function useResizeColumns(hooks) {\n  hooks.useBeforeDimensions.push(useBeforeDimensions);\n};\n\nuseResizeColumns.pluginName = pluginName$8;\n\nvar useBeforeDimensions = function useBeforeDimensions(instance) {\n  instance.hooks.getResizerProps = [];\n  var flatHeaders = instance.flatHeaders,\n      disableResizing = instance.disableResizing,\n      getHeaderProps = instance.hooks.getHeaderProps,\n      columnResizing = instance.state.columnResizing,\n      dispatch = instance.dispatch;\n  getHeaderProps.push(function () {\n    return {\n      style: {\n        position: 'relative'\n      }\n    };\n  });\n\n  var _onMouseDown = function onMouseDown(e, header) {\n    var headersToResize = getLeafHeaders(header);\n    var headerIdWidths = headersToResize.map(function (d) {\n      return [d.id, d.totalWidth];\n    });\n    var clientX = e.clientX;\n\n    var onMouseMove = function onMouseMove(e) {\n      var clientX = e.clientX;\n      dispatch({\n        type: actions.columnResizing,\n        clientX: clientX\n      });\n    };\n\n    var onMouseUp = function onMouseUp(e) {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n      dispatch({\n        type: actions.columnDoneResizing\n      });\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      headerIdWidths: headerIdWidths,\n      clientX: clientX\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance;\n  flatHeaders.forEach(function (header) {\n    var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n    header.canResize = canResize;\n    header.width = columnResizing.columnWidths[header.id] || header.width;\n    header.isResizing = columnResizing.isResizingColumn === header.id;\n\n    if (canResize) {\n      header.getResizerProps = function (userProps) {\n        return mergeProps({\n          onMouseDown: function onMouseDown(e) {\n            return e.persist() || _onMouseDown(e, header);\n          },\n          style: {\n            cursor: 'ew-resize'\n          },\n          draggable: false\n        }, applyPropHooks(instanceRef.current.hooks.getResizerProps, header, instanceRef.current), userProps);\n      };\n    }\n  });\n  return instance;\n};\n\nfunction getLeafHeaders(header) {\n  var leafHeaders = [];\n\n  var recurseHeader = function recurseHeader(header) {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader);\n    }\n\n    leafHeaders.push(header);\n  };\n\n  recurseHeader(header);\n  return leafHeaders;\n}\n\nvar useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n  hooks.useMain.push(useMain$8);\n};\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n\nvar useMain$8 = function useMain(instance) {\n  var totalColumnsWidth = instance.totalColumnsWidth,\n      _instance$hooks = instance.hooks,\n      getRowProps = _instance$hooks.getRowProps,\n      getTableBodyProps = _instance$hooks.getTableBodyProps,\n      getHeaderGroupProps = _instance$hooks.getHeaderGroupProps,\n      getHeaderProps = _instance$hooks.getHeaderProps,\n      getCellProps = _instance$hooks.getCellProps;\n  var rowStyles = {\n    style: {\n      position: 'relative',\n      width: \"\".concat(totalColumnsWidth, \"px\")\n    }\n  };\n  getTableBodyProps.push(function () {\n    return rowStyles;\n  });\n  getRowProps.push(function () {\n    return rowStyles;\n  });\n  getHeaderGroupProps.push(function () {\n    return rowStyles;\n  }); // Calculating column/cells widths\n\n  var cellStyles = {\n    position: 'absolute',\n    top: 0\n  };\n  getHeaderProps.push(function (header) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        left: \"\".concat(header.totalLeft, \"px\"),\n        width: \"\".concat(header.totalWidth, \"px\")\n      })\n    };\n  });\n  getCellProps.push(function (cell) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        left: \"\".concat(cell.column.totalLeft, \"px\"),\n        width: \"\".concat(cell.column.totalWidth, \"px\")\n      })\n    };\n  });\n  return instance;\n};\n\nvar useBlockLayout = function useBlockLayout(hooks) {\n  hooks.useMain.push(useMain$9);\n};\n\nuseBlockLayout.pluginName = 'useBlockLayout';\n\nvar useMain$9 = function useMain(instance) {\n  var totalColumnsWidth = instance.totalColumnsWidth,\n      _instance$hooks = instance.hooks,\n      getRowProps = _instance$hooks.getRowProps,\n      getHeaderGroupProps = _instance$hooks.getHeaderGroupProps,\n      getHeaderProps = _instance$hooks.getHeaderProps,\n      getCellProps = _instance$hooks.getCellProps;\n  var rowStyles = {\n    style: {\n      display: 'flex',\n      width: \"\".concat(totalColumnsWidth, \"px\")\n    }\n  };\n  getRowProps.push(function () {\n    return rowStyles;\n  });\n  getHeaderGroupProps.push(function () {\n    return rowStyles;\n  });\n  var cellStyles = {\n    display: 'inline-block',\n    boxSizing: 'border-box'\n  };\n  getHeaderProps.push(function (header) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        width: \"\".concat(header.totalWidth, \"px\")\n      })\n    };\n  });\n  getCellProps.push(function (cell) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        width: \"\".concat(cell.column.totalWidth, \"px\")\n      })\n    };\n  });\n  return instance;\n};\n\nexport { actions, defaultColumn, reducerHandlers, useAbsoluteLayout, useBlockLayout, useColumnOrder, useExpanded, useFilters, useGroupBy, usePagination, useResizeColumns, useRowSelect, useRowState, useSortBy, useTable, utils };","map":{"version":3,"sources":["../src/utils.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js"],"names":["defaultColumn","Cell","value","String","show","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","safeUseLayoutEffect","process","React","depth","curr","Math","findMaxDepth","column","id","accessor","Header","accessorPath","getBy","console","parent","index","decorateColumn","decorateColumnTree","headerGroups","buildGroup","headerGroup","headers","parentColumns","hasParents","col","columns","isFirst","latestParentColumn","similarParentColumns","d","originalId","placeholderColumn","placeholderOf","sum","header","instance","handleColumn","parentVisible","totalVisibleHeaderCount","pathObj","makePathArray","val","cursor","i","funcs","sortFn","desc","dirs","sortInt","rowA","rowB","args","resKey","row","prev","Array","rect","element","style","window","margins","left","parseInt","right","padding","outerWidth","marginLeft","marginRight","paddingLeft","paddingRight","scrollWidth","isReactComponent","proto","Object","isClassComponent","isFunctionComponent","mergeProps","groups","props","className","rest","applyHooks","nextValue","next","applyPropHooks","warnUnknownProps","JSON","flatColumns","recurse","pluginIndex","plugin","befores","beforeIndex","afters","afterIndex","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","key","rows","updater","newArr","arr","flattenDeep","renderErr","actions","init","reducerHandlers","defaultInitialState","defaultColumnInstance","defaultReducer","defaultGetSubRows","defaultGetRowId","useTable","plugins","data","userColumns","initialState","getSubRows","getRowId","userReducer","debug","reducer","nextState","handler","state","originalDispatch","type","instanceRef","dispatch","action","hooks","columnsBeforeHeaderGroups","columnsBeforeHeaderGroupsDeps","useBeforeDimensions","useMain","useRows","prepareRow","getTableProps","getTableBodyProps","getRowProps","getHeaderGroupProps","getHeaderProps","getCellProps","newColumns","flattenBy","makeHeaderGroups","flatRows","accessRow","parentPath","original","rowId","path","cells","subRows","unpreparedAccessWarning","accessedData","determineHeaderVisibility","calculateDimensions","userProps","Comp","flexRender","colSpan","cell","columnPathStr","calculateHeaderWidths","sumTotalWidth","subHeaders","pluginName","exists","shouldExist","newExpanded","useExpanded","defaultGetResetExpandedDeps","paginateExpandedRows","getResetExpandedDeps","isMountedRef","resetExpanded","toggleExpandedByPath","onClick","e","title","expandRows","expandedDepth","findExpandedDepth","maxDepth","text","rowValue","exactText","exactTextCase","includes","filterValue","includesAll","exact","equals","between","min","max","temp","filters","columnId","userFilterTypes","filterMethod","getFilterMethod","newFilter","functionalUpdate","shouldAutoRemove","remove","newFilters","useFilters","manualFilters","defaultCanFilter","disableFilters","getResetFiltersDeps","preFilteredRows","preFilteredFlatRows","resetFilters","setFilter","setAllFilters","columnDefaultCanFilter","columnDisableFilters","getFirstDefined","filteredRows","filteredFlatRows","filterRows","nonFilteredColumns","autoRemove","isFunction","filterTypes","values","groupBy","toggle","resolvedToggle","useGroupBy","deps","groupByColumns","nonGroupByColumns","groupByBoundaryColumnIndex","defaultUserAggregations","flatHeaders","groupByFn","manualGroupBy","defaultCanGroupBy","disableGroupBy","userAggregations","ensurePluginOrder","defaultColumnGroupBy","columnDisableGroupBy","toggleGroupBy","canGroupBy","undefined","groupedRows","groupedFlatRows","aggregateRowsToValues","columnValues","aggregator","aggregateFn","aggregations","groupRecursively","groupByVal","isAggregated","groupByID","preGroupedRows","reSplitAlphaNumeric","alphanumeric","a","getRowValueByColumnID","b","toString","aa","bb","an","bn","combo","isNaN","compareBasic","sortBy","newSortBy","multi","disableMultiSort","disableSortRemove","disableMultiRemove","maxMultiSortColCount","sortDescFirst","existingSortBy","existingIndex","hasDescDefined","sortAction","useSortBy","orderByFn","userSortTypes","manualSorting","defaultCanSort","disableSortBy","isMultiSortEvent","getResetSortByDeps","resetSortBy","toggleSortBy","defaultColumnCanSort","columnDisableSortBy","canSort","columnSort","sortedRows","availableSortBy","sort","sortData","sortedData","sortType","sortMethod","sortTypes","preSortedRows","pageSize","pageIndex","pageCount","newPageIndex","topRowIndex","usePagination","defaultGetResetPageDeps","manualPagination","getResetPageDeps","userPageCount","resetPage","pageOptions","page","pageStart","pageEnd","canPreviousPage","canNextPage","gotoPage","previousPage","old","nextPage","setPageSize","selectedRowPaths","selected","isAllRowsSelected","flatRowPaths","selectAll","childRowPrefixKey","newSelectedRows","rowPath","updateParentRow","parentKey","useRowSelect","selectedFlatRows","getRowIsSelected","defaultGetResetSelectedRowPathsDeps","manualRowSelectedKey","getResetSelectedRowPathsDeps","resetSelectedRows","toggleRowSelectedAll","toggleRowSelected","getToggleAllRowsSelectedProps","onChange","checked","rowState","pathKey","useRowState","defaultGetResetRowStateDeps","initialRowStateAccessor","getResetRowStateDeps","setRowState","setCellState","cellState","rowsMountedRef","resetRowState","columnOrder","useColumnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","setColumnOrder","columnResizing","columnWidths","startX","headerIdWidths","isResizingColumn","clientX","deltaX","percentageDeltaX","newColumnWidths","headerId","headerWidth","useResizeColumns","disableResizing","position","onMouseDown","headersToResize","getLeafHeaders","onMouseMove","onMouseUp","document","columnDoneResizing","canResize","draggable","leafHeaders","recurseHeader","useAbsoluteLayout","totalColumnsWidth","rowStyles","cellStyles","top","useBlockLayout","display","boxSizing"],"mappings":"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","sourcesContent":["import React from 'react'\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => String(value),\n  show: true,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof window !== 'undefined' && process.env.NODE_ENV === 'production'\n    ? React.useLayoutEffect\n    : React.useEffect\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\nexport function decorateColumn(\n  column,\n  userDefaultColumn,\n  parent,\n  depth,\n  index\n) {\n  // Apply the userDefaultColumn\n  column = { ...defaultColumn, ...userDefaultColumn, ...column }\n\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  column = {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    ...column,\n    // Materialize and override this stuff\n    id,\n    accessor,\n    parent,\n    depth,\n    index,\n  }\n\n  return column\n}\n\n// Build the visible columns, headers and flat column list\nexport function decorateColumnTree(columns, defaultColumn, parent, depth = 0) {\n  return columns.map((column, columnIndex) => {\n    column = decorateColumn(column, defaultColumn, parent, depth, columnIndex)\n    if (column.columns) {\n      column.columns = decorateColumnTree(\n        column.columns,\n        defaultColumn,\n        column,\n        depth + 1\n      )\n    }\n    return column\n  })\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(flatColumns, defaultColumn) {\n  const headerGroups = []\n\n  // Build each header group from the bottom up\n  const buildGroup = (columns, depth) => {\n    const headerGroup = {\n      headers: [],\n    }\n\n    const parentColumns = []\n\n    // Do any of these columns have parents?\n    const hasParents = columns.some(col => col.parent)\n\n    columns.forEach(column => {\n      // Are we the first column in this group?\n      const isFirst = !parentColumns.length\n\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      // If the column has a parent, add it if necessary\n      if (column.parent) {\n        const similarParentColumns = parentColumns.filter(\n          d => d.originalId === column.parent.id\n        )\n        if (isFirst || latestParentColumn.originalId !== column.parent.id) {\n          parentColumns.push({\n            ...column.parent,\n            originalId: column.parent.id,\n            id: [column.parent.id, similarParentColumns.length].join('_'),\n          })\n        }\n      } else if (hasParents) {\n        // If other columns have parents, we'll need to add a place holder if necessary\n        const originalId = [column.id, 'placeholder'].join('_')\n        const similarParentColumns = parentColumns.filter(\n          d => d.originalId === originalId\n        )\n        const placeholderColumn = decorateColumn(\n          {\n            originalId,\n            id: [column.id, 'placeholder', similarParentColumns.length].join(\n              '_'\n            ),\n            placeholderOf: column,\n          },\n          defaultColumn\n        )\n        if (\n          isFirst ||\n          latestParentColumn.originalId !== placeholderColumn.originalId\n        ) {\n          parentColumns.push(placeholderColumn)\n        }\n      }\n\n      // Establish the new headers[] relationship on the parent\n      if (column.parent || hasParents) {\n        latestParentColumn = [...parentColumns].reverse()[0]\n        latestParentColumn.headers = latestParentColumn.headers || []\n        if (!latestParentColumn.headers.includes(column)) {\n          latestParentColumn.headers.push(column)\n        }\n      }\n\n      column.totalHeaderCount = column.headers\n        ? column.headers.reduce(\n            (sum, header) => sum + header.totalHeaderCount,\n            0\n          )\n        : 1 // Leaf node columns take up at least one count\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (parentColumns.length) {\n      buildGroup(parentColumns, depth + 1)\n    }\n  }\n\n  buildGroup(flatColumns, 0)\n\n  return headerGroups.reverse()\n}\n\nexport function determineHeaderVisibility(instance) {\n  const { headers } = instance\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible\n      ? typeof column.show === 'function'\n        ? column.show(instance)\n        : !!column.show\n      : false\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const pathObj = makePathArray(path)\n  let val\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component)\n}\n\nexport const mergeProps = (...groups) => {\n  let props = {}\n\n  groups.forEach(({ style = {}, className, ...rest } = {}) => {\n    props = {\n      ...props,\n      ...rest,\n      style: {\n        ...(props.style || {}),\n        ...style,\n      },\n      className: [props.className, className].filter(Boolean).join(' '),\n    }\n  })\n\n  if (props.className === '') {\n    delete props.className\n  }\n\n  return props\n}\n\nexport const applyHooks = (hooks, initial, ...args) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, ...args)\n    if (typeof nextValue === 'undefined') {\n      throw new Error(\n        'React Table: A hook just returned undefined! This is not allowed.'\n      )\n    }\n    return nextValue\n  }, initial)\n\nexport const applyPropHooks = (hooks, ...args) =>\n  hooks.reduce((prev, next) => mergeProps(prev, next(...args)), {})\n\nexport const warnUnknownProps = props => {\n  if (Object.keys(props).length) {\n    throw new Error(\n      `Unknown options passed to useReactTable:\n\n${JSON.stringify(props, null, 2)}`\n    )\n  }\n}\n\nexport function sum(arr) {\n  return arr.reduce((prev, curr) => prev + curr, 0)\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(columns, childKey) {\n  const flatColumns = []\n\n  const recurse = columns => {\n    columns.forEach(d => {\n      if (!d[childKey]) {\n        flatColumns.push(d)\n      } else {\n        recurse(d[childKey])\n      }\n    })\n  }\n\n  recurse(columns)\n\n  return flatColumns\n}\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    throw new Error(`The plugin ${pluginName} was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      throw new Error(\n        `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n      )\n    }\n  })\n\n  afters.forEach(after => {\n    const afterIndex = plugins.findIndex(plugin => plugin.pluginName === after)\n    if (afterIndex > -1 && afterIndex < pluginIndex) {\n      throw new Error(\n        `React Table: The ${pluginName} plugin hook must be placed before the ${after} plugin hook!`\n      )\n    }\n  })\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    const key = row.path.join('.')\n\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) ||\n      expanded.includes(key)\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\n//\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","import React from 'react'\n\n//\nimport {\n  applyHooks,\n  applyPropHooks,\n  mergeProps,\n  flexRender,\n  decorateColumnTree,\n  makeHeaderGroups,\n  flattenBy,\n  determineHeaderVisibility,\n} from '../utils'\n\nconst renderErr =\n  'You must specify a valid render component. This could be \"column.Cell\", \"column.Header\", \"column.Filter\", \"column.Aggregated\" or any other custom renderer component.'\n\nexport const actions = {\n  init: 'init',\n}\nexport const defaultState = {}\nexport const reducerHandlers = {}\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index) => index\n\nexport const useTable = (props, ...plugins) => {\n  // Destructure props\n  let {\n    data,\n    columns: userColumns,\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    reducer: userReducer = defaultReducer,\n    debug,\n  } = props\n\n  debug = process.env.NODE_ENV === 'production' ? false : debug\n\n  const reducer = (state, action) => {\n    let nextState = Object.keys(reducerHandlers)\n      .map(key => reducerHandlers[key])\n      .reduce((state, handler) => handler(state, action) || state, state)\n\n    nextState = userReducer(nextState, action, state)\n\n    if (process.env.NODE_ENV !== 'production' && debug) {\n      console.log('')\n      console.log('React Table Action: ', action)\n      console.log('New State: ', nextState)\n    }\n    return nextState\n  }\n\n  // But use the users table state if provided\n  const [state, originalDispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // The table instance ref\n  let instanceRef = React.useRef({})\n\n  const dispatch = React.useCallback(action => {\n    if (!action.type) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.info({ action })\n        throw new Error('Unknown Action Type! 👆')\n      }\n      throw new Error()\n    }\n    originalDispatch({ ...action, instanceRef })\n  }, [])\n\n  Object.assign(instanceRef.current, {\n    ...props,\n    data, // The raw data\n    state, // The state dispatcher\n    dispatch, // The resolved table state\n    plugins, // All resolved plugins\n    hooks: {\n      columnsBeforeHeaderGroups: [],\n      columnsBeforeHeaderGroupsDeps: [],\n      useBeforeDimensions: [],\n      useMain: [],\n      useRows: [],\n      prepareRow: [],\n      getTableProps: [],\n      getTableBodyProps: [],\n      getRowProps: [],\n      getHeaderGroupProps: [],\n      getHeaderProps: [],\n      getCellProps: [],\n    },\n  })\n\n  // Allow plugins to register hooks\n  if (process.env.NODE_ENV !== 'production' && debug) console.time('plugins')\n\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(instanceRef.current.hooks)\n  })\n\n  if (process.env.NODE_ENV !== 'production' && debug) console.timeEnd('plugins')\n\n  // Decorate All the columns\n  let columns = React.useMemo(\n    () => decorateColumnTree(userColumns, defaultColumn),\n    [defaultColumn, userColumns]\n  )\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let flatColumns = React.useMemo(() => {\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.time('hooks.columnsBeforeHeaderGroups')\n\n    let newColumns = applyHooks(\n      instanceRef.current.hooks.columnsBeforeHeaderGroups,\n      flattenBy(columns, 'columns'),\n      instanceRef.current\n    )\n\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.timeEnd('hooks.columnsBeforeHeaderGroups')\n    return newColumns\n  }, [\n    columns,\n    debug,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...applyHooks(\n      instanceRef.current.hooks.columnsBeforeHeaderGroupsDeps,\n      [],\n      instanceRef.current\n    ),\n  ])\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () => makeHeaderGroups(flatColumns, defaultColumn),\n    [defaultColumn, flatColumns]\n  )\n\n  const headers = React.useMemo(() => headerGroups[0].headers, [headerGroups])\n\n  Object.assign(instanceRef.current, {\n    columns,\n    flatColumns,\n    headerGroups,\n    headers,\n  })\n\n  // Access the row model\n  const [rows, flatRows] = React.useMemo(() => {\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.time('getAccessedRows')\n\n    let flatRows = []\n\n    // Access the row's data\n    const accessRow = (originalRow, i, depth = 0, parentPath = []) => {\n      // Keep the original reference around\n      const original = originalRow\n\n      const rowId = getRowId(originalRow, i)\n\n      // Make the new path for the row\n      const path = [...parentPath, rowId]\n\n      const row = {\n        original,\n        index: i,\n        path, // used to create a key for each row even if not nested\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      flatRows.push(row)\n\n      // Process any subRows\n      let subRows = getSubRows(originalRow, i)\n\n      if (subRows) {\n        row.subRows = subRows.map((d, i) => accessRow(d, i, depth + 1, path))\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      const unpreparedAccessWarning = () => {\n        throw new Error(\n          'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n        )\n      }\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n      flatColumns.forEach(column => {\n        row.values[column.id] = column.accessor\n          ? column.accessor(originalRow, i, { subRows, depth, data })\n          : undefined\n      })\n\n      return row\n    }\n\n    // Use the resolved data\n    const accessedData = data.map((d, i) => accessRow(d, i))\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.timeEnd('getAccessedRows')\n    return [accessedData, flatRows]\n  }, [debug, data, getRowId, getSubRows, flatColumns])\n\n  instanceRef.current.rows = rows\n  instanceRef.current.flatRows = flatRows\n\n  // Determine column visibility\n  determineHeaderVisibility(instanceRef.current)\n\n  // Provide a flat header list for utilities\n  instanceRef.current.flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  if (process.env.NODE_ENV !== 'production' && debug)\n    console.time('hooks.useBeforeDimensions')\n  instanceRef.current = applyHooks(\n    instanceRef.current.hooks.useBeforeDimensions,\n    instanceRef.current\n  )\n  if (process.env.NODE_ENV !== 'production' && debug)\n    console.timeEnd('hooks.useBeforeDimensions')\n\n  calculateDimensions(instanceRef.current)\n\n  if (process.env.NODE_ENV !== 'production' && debug)\n    console.time('hooks.useMain')\n  instanceRef.current = applyHooks(\n    instanceRef.current.hooks.useMain,\n    instanceRef.current\n  )\n  if (process.env.NODE_ENV !== 'production' && debug)\n    console.timeEnd('hooks.useMain')\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  instanceRef.current.flatHeaders.forEach(column => {\n    // Give columns/headers rendering power\n    column.render = (type, userProps = {}) => {\n      const Comp = typeof type === 'string' ? column[type] : type\n\n      if (typeof Comp === 'undefined') {\n        throw new Error(renderErr)\n      }\n\n      return flexRender(Comp, {\n        ...instanceRef.current,\n        column,\n        ...userProps,\n      })\n    }\n\n    // Give columns/headers a default getHeaderProps\n    column.getHeaderProps = props =>\n      mergeProps(\n        {\n          key: ['header', column.id].join('_'),\n          colSpan: column.totalVisibleHeaderCount,\n        },\n        applyPropHooks(\n          instanceRef.current.hooks.getHeaderProps,\n          column,\n          instanceRef.current\n        ),\n        props\n      )\n  })\n\n  instanceRef.current.headerGroups.forEach((headerGroup, i) => {\n    // Filter out any headers and headerGroups that don't have visible columns\n    headerGroup.headers = headerGroup.headers.filter(header => {\n      const recurse = headers =>\n        headers.filter(header => {\n          if (header.headers) {\n            return recurse(header.headers)\n          }\n          return header.isVisible\n        }).length\n      if (header.headers) {\n        return recurse(header.headers)\n      }\n      return header.isVisible\n    })\n\n    // Give headerGroups getRowProps\n    if (headerGroup.headers.length) {\n      headerGroup.getHeaderGroupProps = (props = {}) =>\n        mergeProps(\n          {\n            key: [`header${i}`].join('_'),\n          },\n          applyPropHooks(\n            instanceRef.current.hooks.getHeaderGroupProps,\n            headerGroup,\n            instanceRef.current\n          ),\n          props\n        )\n\n      return true\n    }\n  })\n\n  // Run the rows (this could be a dangerous hook with a ton of data)\n  if (process.env.NODE_ENV !== 'production' && debug)\n    console.time('hooks.useRows')\n  instanceRef.current.rows = applyHooks(\n    instanceRef.current.hooks.useRows,\n    instanceRef.current.rows,\n    instanceRef.current\n  )\n  if (process.env.NODE_ENV !== 'production' && debug)\n    console.timeEnd('hooks.useRows')\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  instanceRef.current.prepareRow = React.useCallback(row => {\n    row.getRowProps = props =>\n      mergeProps(\n        { key: ['row', ...row.path].join('_') },\n        applyPropHooks(\n          instanceRef.current.hooks.getRowProps,\n          row,\n          instanceRef.current\n        ),\n        props\n      )\n\n    // Build the visible cells for each row\n    row.cells = instanceRef.current.flatColumns\n      .filter(d => d.isVisible)\n      .map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = props => {\n          const columnPathStr = [...row.path, column.id].join('_')\n          return mergeProps(\n            {\n              key: ['cell', columnPathStr].join('_'),\n            },\n            applyPropHooks(\n              instanceRef.current.hooks.getCellProps,\n              cell,\n              instanceRef.current\n            ),\n            props\n          )\n        }\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = (type, userProps = {}) => {\n          const Comp = typeof type === 'string' ? column[type] : type\n\n          if (typeof Comp === 'undefined') {\n            throw new Error(renderErr)\n          }\n\n          return flexRender(Comp, {\n            ...instanceRef.current,\n            column,\n            row,\n            cell,\n            ...userProps,\n          })\n        }\n\n        return cell\n      })\n\n    // need to apply any row specific hooks (useExpanded requires this)\n    applyHooks(instanceRef.current.hooks.prepareRow, row, instanceRef.current)\n  }, [])\n\n  instanceRef.current.getTableProps = userProps =>\n    mergeProps(\n      applyPropHooks(\n        instanceRef.current.hooks.getTableProps,\n        instanceRef.current\n      ),\n      userProps\n    )\n\n  instanceRef.current.getTableBodyProps = userProps =>\n    mergeProps(\n      applyPropHooks(\n        instanceRef.current.hooks.getTableBodyProps,\n        instanceRef.current\n      ),\n      userProps\n    )\n\n  return instanceRef.current\n}\n\nfunction calculateDimensions(instance) {\n  const { headers } = instance\n\n  instance.totalColumnsWidth = calculateHeaderWidths(headers)\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      header.totalWidth = calculateHeaderWidths(subHeaders, left)\n    } else {\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalWidth += header.totalWidth\n    }\n  })\n\n  return sumTotalWidth\n}\n","import React from 'react'\n\nimport {\n  mergeProps,\n  applyPropHooks,\n  expandRows,\n  safeUseLayoutEffect,\n} from '../utils'\nimport { actions, reducerHandlers } from '../hooks/useTable'\n\nconst pluginName = 'useExpanded'\n\n// Actions\nactions.toggleExpandedByPath = 'toggleExpandedByPath'\nactions.resetExpanded = 'resetExpanded'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      expanded: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: [],\n    }\n  }\n\n  if (action.type === actions.toggleExpandedByPath) {\n    const { path, expanded } = action\n    const key = path.join('.')\n    const exists = state.expanded.includes(key)\n    const shouldExist = typeof set !== 'undefined' ? expanded : !exists\n    let newExpanded = new Set(state.expanded)\n\n    if (!exists && shouldExist) {\n      newExpanded.add(key)\n    } else if (exists && !shouldExist) {\n      newExpanded.delete(key)\n    } else {\n      return state\n    }\n\n    return {\n      ...state,\n      expanded: [...newExpanded.values()],\n    }\n  }\n}\n\nexport const useExpanded = hooks => {\n  hooks.getExpandedToggleProps = []\n  hooks.useMain.push(useMain)\n}\n\nuseExpanded.pluginName = pluginName\n\nconst defaultGetResetExpandedDeps = ({ data }) => [data]\n\nfunction useMain(instance) {\n  const {\n    debug,\n    rows,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    hooks,\n    state: { expanded },\n    dispatch,\n    getResetExpandedDeps = defaultGetResetExpandedDeps,\n  } = instance\n\n  // Bypass any effects from firing when this changes\n  const isMountedRef = React.useRef()\n  safeUseLayoutEffect(() => {\n    if (isMountedRef.current) {\n      dispatch({ type: actions.resetExpanded })\n    }\n    isMountedRef.current = true\n  }, [\n    dispatch,\n    ...(getResetExpandedDeps ? getResetExpandedDeps(instance) : []),\n  ])\n\n  const toggleExpandedByPath = (path, expanded) => {\n    dispatch({ type: actions.toggleExpandedByPath, path, expanded })\n  }\n\n  // use reference to avoid memory leak in #1608\n  const instanceRef = React.useRef()\n  instanceRef.current = instance\n\n  hooks.prepareRow.push(row => {\n    row.toggleExpanded = set => toggleExpandedByPath(row.path, set)\n    row.getExpandedToggleProps = props => {\n      return mergeProps(\n        {\n          onClick: e => {\n            e.persist()\n            row.toggleExpanded()\n          },\n          style: {\n            cursor: 'pointer',\n          },\n          title: 'Toggle Expanded',\n        },\n        applyPropHooks(\n          instanceRef.current.hooks.getExpandedToggleProps,\n          row,\n          instanceRef.current\n        ),\n        props\n      )\n    }\n    return row\n  })\n\n  const expandedRows = React.useMemo(() => {\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.info('getExpandedRows')\n\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [\n    debug,\n    paginateExpandedRows,\n    rows,\n    manualExpandedKey,\n    expanded,\n    expandSubRows,\n  ])\n\n  const expandedDepth = findExpandedDepth(expanded)\n\n  return {\n    ...instance,\n    toggleExpandedByPath,\n    expandedDepth,\n    rows: expandedRows,\n  }\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  expanded.forEach(key => {\n    const path = key.split('.')\n    maxDepth = Math.max(maxDepth, path.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, id, filterValue) => {\n  rows = rows.filter(row => {\n    const rowValue = row.values[id]\n    return String(rowValue)\n      .toLowerCase()\n      .includes(String(filterValue).toLowerCase())\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue !== undefined\n      ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n      : true\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue !== undefined\n      ? String(rowValue) === String(filterValue)\n      : true\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return filterValue.includes(rowValue)\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return (\n      rowValue &&\n      rowValue.length &&\n      filterValue.every(val => rowValue.includes(val))\n    )\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue === filterValue\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    // eslint-disable-next-line eqeqeq\n    return rowValue == filterValue\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, id, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= min && rowValue <= max\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  isFunction,\n  safeUseLayoutEffect,\n  functionalUpdate,\n} from '../utils'\nimport * as filterTypes from '../filterTypes'\nimport { actions, reducerHandlers } from '../hooks/useTable'\n\nconst pluginName = 'useFilters'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      filters: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: {},\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const {\n      columnId,\n      filterValue,\n      instanceRef: {\n        current: { flatColumns, userFilterTypes },\n      },\n    } = action\n\n    const column = flatColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.filters[columnId])\n\n    //\n    if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n      const { [columnId]: remove, ...newFilters } = state.filters\n\n      return {\n        ...state,\n        filters: newFilters,\n      }\n    }\n\n    return {\n      ...state,\n      filters: {\n        ...state.filters,\n        [columnId]: newFilter,\n      },\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const {\n      filters,\n      instanceRef: {\n        current: { flatColumns, filterTypes: userFilterTypes },\n      },\n    } = action\n\n    const newFilters = functionalUpdate(filters, state.filters)\n\n    // Filter out undefined values\n    Object.keys(newFilters).forEach(id => {\n      const newFilter = newFilters[id]\n      const column = flatColumns.find(d => d.id === id)\n      const filterMethod = getFilterMethod(\n        column.filter,\n        userFilterTypes || {},\n        filterTypes\n      )\n\n      if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n        delete newFilters[id]\n      }\n    })\n\n    return {\n      ...state,\n      filters: newFilters,\n    }\n  }\n}\n\nexport const useFilters = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseFilters.pluginName = pluginName\n\nfunction useMain(instance) {\n  const {\n    debug,\n    rows,\n    flatRows,\n    flatColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    getResetFiltersDeps = false,\n  } = instance\n\n  const preFilteredRows = rows\n  const preFilteredFlatRows = flatRows\n\n  // Bypass any effects from firing when this changes\n  const isMountedRef = React.useRef()\n  safeUseLayoutEffect(() => {\n    if (isMountedRef.current) {\n      dispatch({ type: actions.resetFilters })\n    }\n    isMountedRef.current = true\n  }, [dispatch, ...(getResetFiltersDeps ? getResetFiltersDeps(instance) : [])])\n\n  const setFilter = (columnId, filterValue) => {\n    dispatch({ type: actions.setFilter, columnId, filterValue })\n  }\n\n  const setAllFilters = filters => {\n    dispatch({\n      type: actions.setAllFilters,\n      filters,\n    })\n  }\n\n  flatColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    column.filterValue = filters[id]\n  })\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const { filteredRows, filteredFlatRows } = React.useMemo(() => {\n    if (manualFilters || !Object.keys(filters).length) {\n      return {\n        filteredRows: rows,\n        filteredFlatRows: flatRows,\n      }\n    }\n\n    const filteredFlatRows = []\n\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.info('getFilteredRows')\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = Object.entries(filters).reduce(\n        (filteredSoFar, [columnId, filterValue]) => {\n          // Find the filters column\n          const column = flatColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            columnId,\n            filterValue,\n            column\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows = filteredRows.map(row => {\n        filteredFlatRows.push(row)\n        if (!row.subRows) {\n          return row\n        }\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length > 0\n              ? filterRows(row.subRows, depth + 1)\n              : row.subRows,\n        }\n      })\n\n      return filteredRows\n    }\n\n    return {\n      filteredRows: filterRows(rows),\n      filteredFlatRows,\n    }\n  }, [\n    manualFilters,\n    filters,\n    debug,\n    rows,\n    flatRows,\n    flatColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = flatColumns.filter(\n      column => !Object.keys(filters).includes(column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, flatColumns])\n\n  return {\n    ...instance,\n    setFilter,\n    setAllFilters,\n    preFilteredRows,\n    preFilteredFlatRows,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n  }\n}\n\nfunction shouldAutoRemove(autoRemove, value) {\n  return autoRemove ? autoRemove(value) : typeof value === 'undefined'\n}\n\nfunction getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n","export function sum(values, rows) {\n  return values.reduce((sum, next) => sum + next, 0)\n}\n\nexport function average(values, rows) {\n  return Math.round((sum(values, rows) / values.length) * 100) / 100\n}\n\nexport function median(values) {\n  values = values.length ? values : [0]\n  let min = Math.min(...values)\n  let max = Math.max(...values)\n\n  return (min + max) / 2\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\nimport { actions, reducerHandlers } from '../hooks/useTable'\nimport {\n  mergeProps,\n  applyPropHooks,\n  defaultGroupByFn,\n  getFirstDefined,\n  ensurePluginOrder,\n} from '../utils'\n\nconst pluginName = 'useGroupBy'\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, toggle } = action\n\n    const resolvedToggle =\n      typeof toggle !== 'undefined' ? toggle : !state.groupBy.includes(columnId)\n\n    if (resolvedToggle) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nexport const useGroupBy = hooks => {\n  hooks.columnsBeforeHeaderGroups.push(columnsBeforeHeaderGroups)\n  hooks.columnsBeforeHeaderGroupsDeps.push((deps, instance) => {\n    deps.push(instance.state.groupBy)\n    return deps\n  })\n  hooks.useMain.push(useMain)\n}\n\nuseGroupBy.pluginName = pluginName\n\nfunction columnsBeforeHeaderGroups(flatColumns, { state: { groupBy } }) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy.map(g => flatColumns.find(col => col.id === g))\n  const nonGroupByColumns = flatColumns.filter(col => !groupBy.includes(col.id))\n\n  // If a groupByBoundary column is found, place the groupBy's after it\n  const groupByBoundaryColumnIndex =\n    flatColumns.findIndex(column => column.groupByBoundary) + 1\n\n  return [\n    ...nonGroupByColumns.slice(0, groupByBoundaryColumnIndex),\n    ...groupByColumns,\n    ...nonGroupByColumns.slice(groupByBoundaryColumnIndex),\n  ]\n}\n\nconst defaultUserAggregations = {}\n\nfunction useMain(instance) {\n  const {\n    debug,\n    rows,\n    flatRows,\n    flatColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    defaultCanGroupBy,\n    disableGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    hooks,\n    plugins,\n    state: { groupBy },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(plugins, [], 'useGroupBy', ['useSortBy', 'useExpanded'])\n\n  flatColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n    column.isGrouped = groupBy.includes(id)\n    column.groupedIndex = groupBy.indexOf(id)\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultColumnGroupBy, defaultCanGroupBy, false)\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = (columnId, toggle) => {\n    dispatch({ type: actions.toggleGroupBy, columnId, toggle })\n  }\n\n  hooks.getGroupByToggleProps = []\n\n  // use reference to avoid memory leak in #1608\n  const instanceRef = React.useRef()\n  instanceRef.current = instance\n\n  flatHeaders.forEach(header => {\n    const { canGroupBy } = header\n    header.getGroupByToggleProps = props => {\n      return mergeProps(\n        {\n          onClick: canGroupBy\n            ? e => {\n                e.persist()\n                header.toggleGroupBy()\n              }\n            : undefined,\n          style: {\n            cursor: canGroupBy ? 'pointer' : undefined,\n          },\n          title: 'Toggle GroupBy',\n        },\n        applyPropHooks(\n          instanceRef.current.hooks.getGroupByToggleProps,\n          header,\n          instanceRef.current\n        ),\n        props\n      )\n    }\n  })\n\n  hooks.prepareRow.push(row => {\n    row.cells.forEach(cell => {\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n      // Repeated cells are any columns in the groupBy that are not grouped\n      cell.isRepeatedValue = !cell.isGrouped && cell.column.isGrouped\n      // Aggregated cells are not grouped, not repeated, but still have subRows\n      cell.isAggregated =\n        !cell.isGrouped && !cell.isRepeatedValue && row.canExpand\n    })\n    return row\n  })\n\n  const [groupedRows, groupedFlatRows] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [rows, flatRows]\n    }\n\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.info('getGroupedRows')\n    // Find the columns that can or are aggregating\n\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (rows, isAggregated) => {\n      const values = {}\n\n      flatColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (groupBy.includes(column.id)) {\n          values[column.id] = rows[0] ? rows[0].values[column.id] : null\n          return\n        }\n\n        const columnValues = rows.map(d => d.values[column.id])\n\n        let aggregator = column.aggregate\n\n        if (Array.isArray(aggregator)) {\n          if (aggregator.length !== 2) {\n            console.info({ column })\n            throw new Error(\n              `React Table: Complex aggregators must have 2 values, eg. aggregate: ['sum', 'count']. More info above...`\n            )\n          }\n          if (isAggregated) {\n            aggregator = aggregator[1]\n          } else {\n            aggregator = aggregator[0]\n          }\n        }\n\n        let aggregateFn =\n          typeof aggregator === 'function'\n            ? aggregator\n            : userAggregations[aggregator] || aggregations[aggregator]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(columnValues, rows, isAggregated)\n        } else if (aggregator) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n      return values\n    }\n\n    let groupedFlatRows = []\n\n    // Recursively group the data\n    const groupRecursively = (rows, depth = 0, parentPath = []) => {\n      // This is the last level, just return the rows\n      if (depth >= groupBy.length) {\n        rows.forEach(row => {\n          row.path = [...parentPath, ...row.path]\n        })\n        groupedFlatRows = groupedFlatRows.concat(rows)\n        return rows\n      }\n\n      const columnId = groupBy[depth]\n\n      // Group the rows together for this level\n      let groupedRows = groupByFn(rows, columnId)\n\n      // Recurse to sub rows before aggregation\n      groupedRows = Object.entries(groupedRows).map(\n        ([groupByVal, subRows], index) => {\n          const path = [...parentPath, `${columnId}:${groupByVal}`]\n\n          subRows = groupRecursively(subRows, depth + 1, path)\n\n          const values = aggregateRowsToValues(subRows, depth < groupBy.length)\n\n          const row = {\n            isAggregated: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            depth,\n            index,\n            path,\n          }\n\n          groupedFlatRows.push(row)\n\n          return row\n        }\n      )\n\n      return groupedRows\n    }\n\n    const groupedRows = groupRecursively(rows)\n\n    // Assign the new data\n    return [groupedRows, groupedFlatRows]\n  }, [\n    manualGroupBy,\n    groupBy,\n    debug,\n    rows,\n    flatRows,\n    flatColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  return {\n    ...instance,\n    toggleGroupBy,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    preGroupedRows: rows,\n  }\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport { ensurePluginOrder, defaultColumn, safeUseLayoutEffect } from '../utils'\nimport { actions, reducerHandlers } from '../hooks/useTable'\nimport * as sortTypes from '../sortTypes'\nimport {\n  mergeProps,\n  applyPropHooks,\n  getFirstDefined,\n  defaultOrderByFn,\n  isFunction,\n} from '../utils'\n\nconst pluginName = 'useSortBy'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: {},\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnID)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const {\n      columnId,\n      desc,\n      multi,\n      instanceRef: {\n        current: {\n          flatColumns,\n          disableMultiSort,\n          disableSortRemove,\n          disableMultiRemove,\n          maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n        },\n      },\n    } = action\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = flatColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseSortBy.pluginName = pluginName\n\nfunction useMain(instance) {\n  const {\n    debug,\n    rows,\n    flatColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSorting,\n    defaultCanSort,\n    disableSortBy,\n    isMultiSortEvent = e => e.shiftKey,\n    flatHeaders,\n    hooks,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getResetSortByDeps = false,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useSortBy', [])\n  // Add custom hooks\n  hooks.getSortByToggleProps = []\n\n  // Bypass any effects from firing when this changes\n  const isMountedRef = React.useRef()\n  safeUseLayoutEffect(() => {\n    if (isMountedRef.current) {\n      dispatch({ type: actions.resetSortBy })\n    }\n    isMountedRef.current = true\n  }, [dispatch, ...(getResetSortByDeps ? getResetSortByDeps(instance) : [])])\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = (columnId, desc, multi) => {\n    dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n  }\n\n  // use reference to avoid memory leak in #1608\n  const instanceRef = React.useRef()\n  instanceRef.current = instance\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = props => {\n      return mergeProps(\n        {\n          onClick: canSort\n            ? e => {\n                e.persist()\n                column.toggleSortBy(\n                  undefined,\n                  !instanceRef.current.disableMultiSort && isMultiSortEvent(e)\n                )\n              }\n            : undefined,\n          style: {\n            cursor: canSort ? 'pointer' : undefined,\n          },\n          title: 'Toggle SortBy',\n        },\n        applyPropHooks(\n          instanceRef.current.hooks.getSortByToggleProps,\n          column,\n          instanceRef.current\n        ),\n        props\n      )\n    }\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const sortedRows = React.useMemo(() => {\n    if (manualSorting || !sortBy.length) {\n      return rows\n    }\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.time('getSortedRows')\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      flatColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = flatColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = flatColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    if (process.env.NODE_ENV !== 'production' && debug)\n      console.timeEnd('getSortedRows')\n\n    return sortData(rows)\n  }, [\n    manualSorting,\n    sortBy,\n    debug,\n    rows,\n    flatColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  return {\n    ...instance,\n    toggleSortBy,\n    rows: sortedRows,\n    preSortedRows: rows,\n  }\n}\n","import React from 'react'\n\n//\n\nimport { actions, reducerHandlers } from '../hooks/useTable'\nimport {\n  ensurePluginOrder,\n  safeUseLayoutEffect,\n  expandRows,\n  functionalUpdate,\n} from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount } = action.instanceRef.current\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state\n    }\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nexport const usePagination = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nusePagination.pluginName = pluginName\n\nconst defaultGetResetPageDeps = ({\n  data,\n  manualPagination,\n  state: { filters, groupBy, sortBy },\n}) => [manualPagination ? null : data, filters, groupBy, sortBy]\n\nfunction useMain(instance) {\n  const {\n    rows,\n    manualPagination,\n    getResetPageDeps = defaultGetResetPageDeps,\n    manualExpandedKey = 'expanded',\n    debug,\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: { pageSize, pageIndex, expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination',\n    []\n  )\n\n  // Bypass any effects from firing when this changes\n  const isMountedRef = React.useRef()\n  safeUseLayoutEffect(() => {\n    if (isMountedRef.current) {\n      dispatch({ type: actions.resetPage })\n    }\n    isMountedRef.current = true\n  }, [dispatch, ...(getResetPageDeps ? getResetPageDeps(instance) : [])])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () => (pageCount > 0 ? [...new Array(pageCount)].map((d, i) => i) : []),\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      if (process.env.NODE_ENV !== 'production' && debug)\n        console.info('getPage')\n\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    debug,\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  return {\n    ...instance,\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n    pageIndex,\n    pageSize,\n  }\n}\n","import React from 'react'\n\nimport {\n  mergeProps,\n  applyPropHooks,\n  ensurePluginOrder,\n  safeUseLayoutEffect,\n} from '../utils'\nimport { actions, reducerHandlers } from '../hooks/useTable'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleRowSelectedAll = 'toggleRowSelectedAll'\nactions.toggleRowSelected = 'toggleRowSelected'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      selectedRowPaths: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowPaths: [],\n    }\n  }\n\n  if (action.type === actions.toggleRowSelectedAll) {\n    const {\n      selected,\n      instanceRef: {\n        current: { isAllRowsSelected, flatRowPaths },\n      },\n    } = action\n\n    const selectAll =\n      typeof selected !== 'undefined' ? selected : !isAllRowsSelected\n\n    return {\n      ...state,\n      selectedRowPaths: selectAll ? flatRowPaths : [],\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const {\n      path,\n      selected,\n      instanceRef: {\n        current: { flatRowPaths },\n      },\n    } = action\n\n    const key = path.join('.')\n    const childRowPrefixKey = [key, '.'].join('')\n\n    // Join the paths of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const exists = state.selectedRowPaths.includes(key)\n    const shouldExist = typeof set !== 'undefined' ? selected : !exists\n    let newSelectedRows = new Set(state.selectedRowPaths)\n\n    if (!exists && shouldExist) {\n      flatRowPaths.forEach(rowPath => {\n        if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n          newSelectedRows.add(rowPath)\n        }\n      })\n    } else if (exists && !shouldExist) {\n      flatRowPaths.forEach(rowPath => {\n        if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n          newSelectedRows.delete(rowPath)\n        }\n      })\n    } else {\n      return state\n    }\n\n    const updateParentRow = (selectedRowPaths, path) => {\n      const parentPath = path.slice(0, path.length - 1)\n      const parentKey = parentPath.join('.')\n      const selected =\n        flatRowPaths.filter(rowPath => {\n          const path = rowPath\n          return (\n            path !== parentKey &&\n            path.startsWith(parentKey) &&\n            !selectedRowPaths.has(path)\n          )\n        }).length === 0\n      if (selected) {\n        selectedRowPaths.add(parentKey)\n      } else {\n        selectedRowPaths.delete(parentKey)\n      }\n      if (parentPath.length > 1) updateParentRow(selectedRowPaths, parentPath)\n    }\n\n    // If the row is a subRow update\n    // its parent row to reflect changes\n    if (path.length > 1) updateParentRow(newSelectedRows, path)\n\n    return {\n      ...state,\n      selectedRowPaths: [...newSelectedRows.values()],\n    }\n  }\n}\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = []\n  hooks.getToggleAllRowsSelectedProps = []\n  hooks.useRows.push(useRows)\n  hooks.useMain.push(useMain)\n}\n\nuseRowSelect.pluginName = pluginName\n\nfunction useRows(rows, instance) {\n  const {\n    state: { selectedRowPaths },\n  } = instance\n\n  instance.selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      row.isSelected = getRowIsSelected(row, selectedRowPaths)\n\n      if (row.isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectedRowPaths])\n\n  return rows\n}\n\nconst defaultGetResetSelectedRowPathsDeps = ({ data }) => [data]\n\nfunction useMain(instance) {\n  const {\n    hooks,\n    manualRowSelectedKey = 'isSelected',\n    plugins,\n    flatRows,\n    getResetSelectedRowPathsDeps = defaultGetResetSelectedRowPathsDeps,\n    state: { selectedRowPaths },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect',\n    []\n  )\n\n  const flatRowPaths = flatRows.map(d => d.path.join('.'))\n\n  let isAllRowsSelected = !!flatRowPaths.length && !!selectedRowPaths.length\n\n  if (isAllRowsSelected) {\n    if (flatRowPaths.some(d => !selectedRowPaths.includes(d))) {\n      isAllRowsSelected = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  const isMountedRef = React.useRef()\n  safeUseLayoutEffect(() => {\n    if (isMountedRef.current) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n    isMountedRef.current = true\n  }, [\n    dispatch,\n    ...(getResetSelectedRowPathsDeps\n      ? getResetSelectedRowPathsDeps(instance)\n      : []),\n  ])\n\n  const toggleRowSelectedAll = selected =>\n    dispatch({ type: actions.toggleRowSelectedAll, selected })\n\n  const toggleRowSelected = (path, selected) =>\n    dispatch({ type: actions.toggleRowSelected, path, selected })\n\n  // use reference to avoid memory leak in #1608\n  const instanceRef = React.useRef()\n  instanceRef.current = instance\n\n  const getToggleAllRowsSelectedProps = props => {\n    return mergeProps(\n      {\n        onChange: e => {\n          toggleRowSelectedAll(e.target.checked)\n        },\n        style: {\n          cursor: 'pointer',\n        },\n        checked: isAllRowsSelected,\n        title: 'Toggle All Rows Selected',\n      },\n      applyPropHooks(\n        instanceRef.current.hooks.getToggleAllRowsSelectedProps,\n        instanceRef.current\n      ),\n      props\n    )\n  }\n\n  hooks.prepareRow.push(row => {\n    row.toggleRowSelected = set => toggleRowSelected(row.path, set)\n    row.getToggleRowSelectedProps = props => {\n      let checked = false\n\n      if (row.original && row.original[manualRowSelectedKey]) {\n        checked = true\n      } else {\n        checked = row.isSelected\n      }\n\n      return mergeProps(\n        {\n          onChange: e => {\n            row.toggleRowSelected(e.target.checked)\n          },\n          style: {\n            cursor: 'pointer',\n          },\n          checked,\n          title: 'Toggle Row Selected',\n        },\n        applyPropHooks(\n          instanceRef.current.hooks.getToggleRowSelectedProps,\n          row,\n          instanceRef.current\n        ),\n        props\n      )\n    }\n\n    return row\n  })\n\n  return {\n    ...instance,\n    flatRowPaths,\n    toggleRowSelected,\n    toggleRowSelectedAll,\n    getToggleAllRowsSelectedProps,\n    isAllRowsSelected,\n  }\n}\n\nfunction getRowIsSelected(row, selectedRowPaths) {\n  if (row.isAggregated) {\n    return row.subRows.every(subRow =>\n      getRowIsSelected(subRow, selectedRowPaths)\n    )\n  }\n\n  return selectedRowPaths.includes(row.path.join('.'))\n}\n","import React from 'react'\n\n//\n\nimport { actions, reducerHandlers } from '../hooks/useTable'\nimport { functionalUpdate, safeUseLayoutEffect } from '../utils'\n\nconst pluginName = 'useRowState'\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.resetRowState = 'resetRowState'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { path, value } = action\n\n    const pathKey = path.join('.')\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [pathKey]: functionalUpdate(value, state.rowState[pathKey]),\n      },\n    }\n  }\n}\n\nexport const useRowState = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseRowState.pluginName = pluginName\n\nconst defaultGetResetRowStateDeps = ({ data }) => [data]\n\nfunction useMain(instance) {\n  const {\n    hooks,\n    initialRowStateAccessor,\n    getResetRowStateDeps = defaultGetResetRowStateDeps,\n    state: { rowState },\n    dispatch,\n  } = instance\n\n  const setRowState = React.useCallback(\n    (path, value, columnId) =>\n      dispatch({\n        type: actions.setRowState,\n        path,\n        value,\n        columnId,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowPath, columnId, updater) => {\n      return setRowState(\n        rowPath,\n        old => {\n          return {\n            ...old,\n            cellState: {\n              ...old.cellState,\n              [columnId]:\n                typeof updater === 'function'\n                  ? updater(old.cellState[columnId])\n                  : updater,\n            },\n          }\n        },\n        columnId\n      )\n    },\n    [setRowState]\n  )\n\n  const rowsMountedRef = React.useRef()\n\n  // When data changes, reset row and cell state\n  safeUseLayoutEffect(() => {\n    if (rowsMountedRef.current) {\n      dispatch({ type: actions.resetRowState })\n    }\n\n    rowsMountedRef.current = true\n  }, [\n    dispatch,\n    ...(getResetRowStateDeps ? getResetRowStateDeps(instance) : []),\n  ])\n\n  hooks.prepareRow.push(row => {\n    const pathKey = row.path.join('.')\n\n    if (row.original) {\n      row.state =\n        (typeof rowState[pathKey] !== 'undefined'\n          ? rowState[pathKey]\n          : initialRowStateAccessor && initialRowStateAccessor(row)) || {}\n\n      row.setState = updater => {\n        return setRowState(row.path, updater)\n      }\n\n      row.cells.forEach(cell => {\n        cell.state = row.state.cellState || {}\n\n        cell.setState = updater => {\n          return setCellState(row.path, cell.column.id, updater)\n        }\n      })\n    }\n\n    return row\n  })\n\n  return {\n    ...instance,\n    setRowState,\n    setCellState,\n  }\n}\n","import React from 'react'\n\nimport { actions, reducerHandlers } from '../hooks/useTable'\nimport { functionalUpdate } from '../utils'\n\nconst pluginName = 'useColumnOrder'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nexport const useColumnOrder = hooks => {\n  hooks.columnsBeforeHeaderGroupsDeps.push((deps, instance) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.columnsBeforeHeaderGroups.push(columnsBeforeHeaderGroups)\n  hooks.useMain.push(useMain)\n}\n\nuseColumnOrder.pluginName = pluginName\n\nfunction columnsBeforeHeaderGroups(columns, instance) {\n  const {\n    state: { columnOrder },\n  } = instance\n\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useMain(instance) {\n  const { dispatch } = instance\n\n  const setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n\n  return {\n    ...instance,\n    setColumnOrder,\n  }\n}\n","import React from 'react'\n\nimport { actions, reducerHandlers } from '../hooks/useTable'\nimport {\n  defaultColumn,\n  getFirstDefined,\n  mergeProps,\n  applyPropHooks,\n} from '../utils'\n\nconst pluginName = 'useResizeColumns'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\n// Reducer\nreducerHandlers[pluginName] = (state, action) => {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { startX, columnId, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX,\n        headerIdWidths,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / headerIdWidths.length\n\n    const newColumnWidths = {}\n    headerIdWidths.forEach(([headerId, headerWidth], index) => {\n      newColumnWidths[headerId] = Math.max(headerWidth + percentageDeltaX, 0)\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...action.columnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nexport const useResizeColumns = hooks => {\n  hooks.useBeforeDimensions.push(useBeforeDimensions)\n}\n\nuseResizeColumns.pluginName = pluginName\n\nconst useBeforeDimensions = instance => {\n  instance.hooks.getResizerProps = []\n\n  const {\n    flatHeaders,\n    disableResizing,\n    hooks: { getHeaderProps },\n    state: { columnResizing },\n    dispatch,\n  } = instance\n\n  getHeaderProps.push(() => {\n    return {\n      style: {\n        position: 'relative',\n      },\n    }\n  })\n\n  const onMouseDown = (e, header) => {\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = e.clientX\n\n    const onMouseMove = e => {\n      const clientX = e.clientX\n\n      dispatch({ type: actions.columnResizing, clientX })\n    }\n\n    const onMouseUp = e => {\n      document.removeEventListener('mousemove', onMouseMove)\n      document.removeEventListener('mouseup', onMouseUp)\n\n      dispatch({ type: actions.columnDoneResizing })\n    }\n\n    document.addEventListener('mousemove', onMouseMove)\n    document.addEventListener('mouseup', onMouseUp)\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  // use reference to avoid memory leak in #1608\n  const instanceRef = React.useRef()\n  instanceRef.current = instance\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = userProps => {\n        return mergeProps(\n          {\n            onMouseDown: e => e.persist() || onMouseDown(e, header),\n            style: {\n              cursor: 'ew-resize',\n            },\n            draggable: false,\n          },\n          applyPropHooks(\n            instanceRef.current.hooks.getResizerProps,\n            header,\n            instanceRef.current\n          ),\n          userProps\n        )\n      }\n    }\n  })\n\n  return instance\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","export const useAbsoluteLayout = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst useMain = instance => {\n  const {\n    totalColumnsWidth,\n    hooks: {\n      getRowProps,\n      getTableBodyProps,\n      getHeaderGroupProps,\n      getHeaderProps,\n      getCellProps,\n    },\n  } = instance\n\n  const rowStyles = {\n    style: {\n      position: 'relative',\n      width: `${totalColumnsWidth}px`,\n    },\n  }\n\n  getTableBodyProps.push(() => rowStyles)\n  getRowProps.push(() => rowStyles)\n  getHeaderGroupProps.push(() => rowStyles)\n\n  // Calculating column/cells widths\n  const cellStyles = {\n    position: 'absolute',\n    top: 0,\n  }\n\n  getHeaderProps.push(header => {\n    return {\n      style: {\n        ...cellStyles,\n        left: `${header.totalLeft}px`,\n        width: `${header.totalWidth}px`,\n      },\n    }\n  })\n\n  getCellProps.push(cell => {\n    return {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    }\n  })\n\n  return instance\n}\n","export const useBlockLayout = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n\nconst useMain = instance => {\n  const {\n    totalColumnsWidth,\n    hooks: { getRowProps, getHeaderGroupProps, getHeaderProps, getCellProps },\n  } = instance\n\n  const rowStyles = {\n    style: {\n      display: 'flex',\n      width: `${totalColumnsWidth}px`,\n    },\n  }\n\n  getRowProps.push(() => rowStyles)\n  getHeaderGroupProps.push(() => rowStyles)\n\n  const cellStyles = {\n    display: 'inline-block',\n    boxSizing: 'border-box',\n  }\n\n  getHeaderProps.push(header => {\n    return {\n      style: {\n        ...cellStyles,\n        width: `${header.totalWidth}px`,\n      },\n    }\n  })\n\n  getCellProps.push(cell => {\n    return {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    }\n  })\n\n  return instance\n}\n"]},"metadata":{},"sourceType":"module"}